// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package configcat

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat/internal"
)

// ## # Segment Resource
//
// Creates and manages a **Segment**. [What is a Segment in ConfigCat?](https://configcat.com/docs/advanced/segments)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-configcat/sdk/v2/go/configcat"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myProducts, err := configcat.GetProducts(ctx, &configcat.GetProductsArgs{
//				NameFilterRegex: pulumi.StringRef("ConfigCat's product"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			mySegment, err := configcat.NewSegment(ctx, "my_segment", &configcat.SegmentArgs{
//				ProductId:           pulumi.String(myProducts.Products[0].ProductId),
//				Name:                pulumi.String("Beta users"),
//				Description:         pulumi.String("Beta users' description"),
//				ComparisonAttribute: pulumi.String("email"),
//				Comparator:          pulumi.String("sensitiveIsOneOf"),
//				ComparisonValue:     pulumi.String("betauser1@example.com,betauser2@example.com"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("segmentId", mySegment.ID())
//			return nil
//		})
//	}
//
// ```
//
// ## Endpoints used
//
// * [Get Segment](https://api.configcat.com/docs/#tag/Segments/operation/get-segment)
// * [Create Segment](https://api.configcat.com/docs/#tag/Segments/operation/create-segment)
// * [Update Segment](https://api.configcat.com/docs/#tag/Segments/operation/update-segment)
// * [Delete Segment](https://api.configcat.com/docs/#tag/Segments/operation/delete-segment)
//
// ## Import
//
// Segments can be imported using the SegmentId. Get the SegmentId using the [List Segments API](https://api.configcat.com/docs/#tag/Segments/operation/get-segments) for example.
//
// ```sh
// $ pulumi import configcat:index/segment:Segment example 08d86d63-2726-47cd-8bfc-59608ecb91e2
// ```
// Read more about importing.
type Segment struct {
	pulumi.CustomResourceState

	// The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).
	Comparator pulumi.StringOutput `pulumi:"comparator"`
	// The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute).
	ComparisonAttribute pulumi.StringOutput `pulumi:"comparisonAttribute"`
	// The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).
	ComparisonValue pulumi.StringOutput `pulumi:"comparisonValue"`
	// The description of the Segment.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Segment.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Product.
	ProductId pulumi.StringOutput `pulumi:"productId"`
}

// NewSegment registers a new resource with the given unique name, arguments, and options.
func NewSegment(ctx *pulumi.Context,
	name string, args *SegmentArgs, opts ...pulumi.ResourceOption) (*Segment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Comparator == nil {
		return nil, errors.New("invalid value for required argument 'Comparator'")
	}
	if args.ComparisonAttribute == nil {
		return nil, errors.New("invalid value for required argument 'ComparisonAttribute'")
	}
	if args.ComparisonValue == nil {
		return nil, errors.New("invalid value for required argument 'ComparisonValue'")
	}
	if args.ProductId == nil {
		return nil, errors.New("invalid value for required argument 'ProductId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Segment
	err := ctx.RegisterResource("configcat:index/segment:Segment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSegment gets an existing Segment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSegment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SegmentState, opts ...pulumi.ResourceOption) (*Segment, error) {
	var resource Segment
	err := ctx.ReadResource("configcat:index/segment:Segment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Segment resources.
type segmentState struct {
	// The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).
	Comparator *string `pulumi:"comparator"`
	// The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute).
	ComparisonAttribute *string `pulumi:"comparisonAttribute"`
	// The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).
	ComparisonValue *string `pulumi:"comparisonValue"`
	// The description of the Segment.
	Description *string `pulumi:"description"`
	// The name of the Segment.
	Name *string `pulumi:"name"`
	// The ID of the Product.
	ProductId *string `pulumi:"productId"`
}

type SegmentState struct {
	// The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).
	Comparator pulumi.StringPtrInput
	// The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute).
	ComparisonAttribute pulumi.StringPtrInput
	// The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).
	ComparisonValue pulumi.StringPtrInput
	// The description of the Segment.
	Description pulumi.StringPtrInput
	// The name of the Segment.
	Name pulumi.StringPtrInput
	// The ID of the Product.
	ProductId pulumi.StringPtrInput
}

func (SegmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*segmentState)(nil)).Elem()
}

type segmentArgs struct {
	// The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).
	Comparator string `pulumi:"comparator"`
	// The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute).
	ComparisonAttribute string `pulumi:"comparisonAttribute"`
	// The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).
	ComparisonValue string `pulumi:"comparisonValue"`
	// The description of the Segment.
	Description *string `pulumi:"description"`
	// The name of the Segment.
	Name *string `pulumi:"name"`
	// The ID of the Product.
	ProductId string `pulumi:"productId"`
}

// The set of arguments for constructing a Segment resource.
type SegmentArgs struct {
	// The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).
	Comparator pulumi.StringInput
	// The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute).
	ComparisonAttribute pulumi.StringInput
	// The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).
	ComparisonValue pulumi.StringInput
	// The description of the Segment.
	Description pulumi.StringPtrInput
	// The name of the Segment.
	Name pulumi.StringPtrInput
	// The ID of the Product.
	ProductId pulumi.StringInput
}

func (SegmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*segmentArgs)(nil)).Elem()
}

type SegmentInput interface {
	pulumi.Input

	ToSegmentOutput() SegmentOutput
	ToSegmentOutputWithContext(ctx context.Context) SegmentOutput
}

func (*Segment) ElementType() reflect.Type {
	return reflect.TypeOf((**Segment)(nil)).Elem()
}

func (i *Segment) ToSegmentOutput() SegmentOutput {
	return i.ToSegmentOutputWithContext(context.Background())
}

func (i *Segment) ToSegmentOutputWithContext(ctx context.Context) SegmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentOutput)
}

// SegmentArrayInput is an input type that accepts SegmentArray and SegmentArrayOutput values.
// You can construct a concrete instance of `SegmentArrayInput` via:
//
//	SegmentArray{ SegmentArgs{...} }
type SegmentArrayInput interface {
	pulumi.Input

	ToSegmentArrayOutput() SegmentArrayOutput
	ToSegmentArrayOutputWithContext(context.Context) SegmentArrayOutput
}

type SegmentArray []SegmentInput

func (SegmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Segment)(nil)).Elem()
}

func (i SegmentArray) ToSegmentArrayOutput() SegmentArrayOutput {
	return i.ToSegmentArrayOutputWithContext(context.Background())
}

func (i SegmentArray) ToSegmentArrayOutputWithContext(ctx context.Context) SegmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentArrayOutput)
}

// SegmentMapInput is an input type that accepts SegmentMap and SegmentMapOutput values.
// You can construct a concrete instance of `SegmentMapInput` via:
//
//	SegmentMap{ "key": SegmentArgs{...} }
type SegmentMapInput interface {
	pulumi.Input

	ToSegmentMapOutput() SegmentMapOutput
	ToSegmentMapOutputWithContext(context.Context) SegmentMapOutput
}

type SegmentMap map[string]SegmentInput

func (SegmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Segment)(nil)).Elem()
}

func (i SegmentMap) ToSegmentMapOutput() SegmentMapOutput {
	return i.ToSegmentMapOutputWithContext(context.Background())
}

func (i SegmentMap) ToSegmentMapOutputWithContext(ctx context.Context) SegmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SegmentMapOutput)
}

type SegmentOutput struct{ *pulumi.OutputState }

func (SegmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Segment)(nil)).Elem()
}

func (o SegmentOutput) ToSegmentOutput() SegmentOutput {
	return o
}

func (o SegmentOutput) ToSegmentOutputWithContext(ctx context.Context) SegmentOutput {
	return o
}

// The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).
func (o SegmentOutput) Comparator() pulumi.StringOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringOutput { return v.Comparator }).(pulumi.StringOutput)
}

// The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute).
func (o SegmentOutput) ComparisonAttribute() pulumi.StringOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringOutput { return v.ComparisonAttribute }).(pulumi.StringOutput)
}

// The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).
func (o SegmentOutput) ComparisonValue() pulumi.StringOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringOutput { return v.ComparisonValue }).(pulumi.StringOutput)
}

// The description of the Segment.
func (o SegmentOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Segment.
func (o SegmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Product.
func (o SegmentOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v *Segment) pulumi.StringOutput { return v.ProductId }).(pulumi.StringOutput)
}

type SegmentArrayOutput struct{ *pulumi.OutputState }

func (SegmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Segment)(nil)).Elem()
}

func (o SegmentArrayOutput) ToSegmentArrayOutput() SegmentArrayOutput {
	return o
}

func (o SegmentArrayOutput) ToSegmentArrayOutputWithContext(ctx context.Context) SegmentArrayOutput {
	return o
}

func (o SegmentArrayOutput) Index(i pulumi.IntInput) SegmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Segment {
		return vs[0].([]*Segment)[vs[1].(int)]
	}).(SegmentOutput)
}

type SegmentMapOutput struct{ *pulumi.OutputState }

func (SegmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Segment)(nil)).Elem()
}

func (o SegmentMapOutput) ToSegmentMapOutput() SegmentMapOutput {
	return o
}

func (o SegmentMapOutput) ToSegmentMapOutputWithContext(ctx context.Context) SegmentMapOutput {
	return o
}

func (o SegmentMapOutput) MapIndex(k pulumi.StringInput) SegmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Segment {
		return vs[0].(map[string]*Segment)[vs[1].(string)]
	}).(SegmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentInput)(nil)).Elem(), &Segment{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentArrayInput)(nil)).Elem(), SegmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SegmentMapInput)(nil)).Elem(), SegmentMap{})
	pulumi.RegisterOutputType(SegmentOutput{})
	pulumi.RegisterOutputType(SegmentArrayOutput{})
	pulumi.RegisterOutputType(SegmentMapOutput{})
}
