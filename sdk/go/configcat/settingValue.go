// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package configcat

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat/internal"
)

// Initializes and updates **Feature Flag or Setting** values for V1 configs. [Read more about the anatomy of a Feature Flag or Setting.](https://configcat.com/docs/main-concepts)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			environmentId := cfg.Require("environmentId")
//			settingId := cfg.Require("settingId")
//			_, err := configcat.NewSettingValue(ctx, "my_setting_value", &configcat.SettingValueArgs{
//				EnvironmentId:  pulumi.String(environmentId),
//				SettingId:      pulumi.String(settingId),
//				MandatoryNotes: pulumi.String("mandatory notes"),
//				Value:          pulumi.String("true"),
//				RolloutRules: configcat.SettingValueRolloutRuleArray{
//					&configcat.SettingValueRolloutRuleArgs{
//						ComparisonAttribute: pulumi.String("Email"),
//						Comparator:          pulumi.String("contains"),
//						ComparisonValue:     pulumi.String("@mycompany.com"),
//						Value:               pulumi.String("true"),
//					},
//					&configcat.SettingValueRolloutRuleArgs{
//						ComparisonAttribute: pulumi.String("custom"),
//						Comparator:          pulumi.String("isOneOf"),
//						ComparisonValue:     pulumi.String("red"),
//						Value:               pulumi.String("false"),
//					},
//				},
//				PercentageItems: configcat.SettingValuePercentageItemArray{
//					&configcat.SettingValuePercentageItemArgs{
//						Percentage: pulumi.String("20"),
//						Value:      pulumi.String("true"),
//					},
//					&configcat.SettingValuePercentageItemArgs{
//						Percentage: pulumi.String("80"),
//						Value:      pulumi.String("false"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Feature Flag/Setting values (V1) can be imported using a combined EnvironmentID:SettingId ID.
//
// Get the EnvironmentId using e.g. the [List Environments API](https://api.configcat.com/docs/#tag/Environments/operation/get-environments).
//
// Get the SettingId using e.g. the [List Flags API](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/get-settings).
//
// ```sh
// $ pulumi import configcat:index/settingValue:SettingValue example 08d86d63-2726-47cd-8bfc-59608ecb91e2:1234
// ```
type SettingValue struct {
	pulumi.CustomResourceState

	// The ID of the Environment.
	EnvironmentId pulumi.StringOutput `pulumi:"environmentId"`
	InitOnly      pulumi.BoolOutput   `pulumi:"initOnly"`
	// If the Product's "Mandatory notes" preference is turned on for the Environment the Mandatory note must be passed.
	MandatoryNotes  pulumi.StringPtrOutput                `pulumi:"mandatoryNotes"`
	PercentageItems SettingValuePercentageItemArrayOutput `pulumi:"percentageItems"`
	RolloutRules    SettingValueRolloutRuleArrayOutput    `pulumi:"rolloutRules"`
	// The ID of the Feature Flag or Setting.
	SettingId pulumi.StringOutput `pulumi:"settingId"`
	// The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`.
	SettingType pulumi.StringOutput `pulumi:"settingType"`
	// The Feature Flag or Setting's value. Type: `string`. It must be compatible with the `settingType`.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewSettingValue registers a new resource with the given unique name, arguments, and options.
func NewSettingValue(ctx *pulumi.Context,
	name string, args *SettingValueArgs, opts ...pulumi.ResourceOption) (*SettingValue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentId == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentId'")
	}
	if args.SettingId == nil {
		return nil, errors.New("invalid value for required argument 'SettingId'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SettingValue
	err := ctx.RegisterResource("configcat:index/settingValue:SettingValue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSettingValue gets an existing SettingValue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSettingValue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SettingValueState, opts ...pulumi.ResourceOption) (*SettingValue, error) {
	var resource SettingValue
	err := ctx.ReadResource("configcat:index/settingValue:SettingValue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SettingValue resources.
type settingValueState struct {
	// The ID of the Environment.
	EnvironmentId *string `pulumi:"environmentId"`
	InitOnly      *bool   `pulumi:"initOnly"`
	// If the Product's "Mandatory notes" preference is turned on for the Environment the Mandatory note must be passed.
	MandatoryNotes  *string                      `pulumi:"mandatoryNotes"`
	PercentageItems []SettingValuePercentageItem `pulumi:"percentageItems"`
	RolloutRules    []SettingValueRolloutRule    `pulumi:"rolloutRules"`
	// The ID of the Feature Flag or Setting.
	SettingId *string `pulumi:"settingId"`
	// The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`.
	SettingType *string `pulumi:"settingType"`
	// The Feature Flag or Setting's value. Type: `string`. It must be compatible with the `settingType`.
	Value *string `pulumi:"value"`
}

type SettingValueState struct {
	// The ID of the Environment.
	EnvironmentId pulumi.StringPtrInput
	InitOnly      pulumi.BoolPtrInput
	// If the Product's "Mandatory notes" preference is turned on for the Environment the Mandatory note must be passed.
	MandatoryNotes  pulumi.StringPtrInput
	PercentageItems SettingValuePercentageItemArrayInput
	RolloutRules    SettingValueRolloutRuleArrayInput
	// The ID of the Feature Flag or Setting.
	SettingId pulumi.StringPtrInput
	// The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`.
	SettingType pulumi.StringPtrInput
	// The Feature Flag or Setting's value. Type: `string`. It must be compatible with the `settingType`.
	Value pulumi.StringPtrInput
}

func (SettingValueState) ElementType() reflect.Type {
	return reflect.TypeOf((*settingValueState)(nil)).Elem()
}

type settingValueArgs struct {
	// The ID of the Environment.
	EnvironmentId string `pulumi:"environmentId"`
	InitOnly      *bool  `pulumi:"initOnly"`
	// If the Product's "Mandatory notes" preference is turned on for the Environment the Mandatory note must be passed.
	MandatoryNotes  *string                      `pulumi:"mandatoryNotes"`
	PercentageItems []SettingValuePercentageItem `pulumi:"percentageItems"`
	RolloutRules    []SettingValueRolloutRule    `pulumi:"rolloutRules"`
	// The ID of the Feature Flag or Setting.
	SettingId string `pulumi:"settingId"`
	// The Feature Flag or Setting's value. Type: `string`. It must be compatible with the `settingType`.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a SettingValue resource.
type SettingValueArgs struct {
	// The ID of the Environment.
	EnvironmentId pulumi.StringInput
	InitOnly      pulumi.BoolPtrInput
	// If the Product's "Mandatory notes" preference is turned on for the Environment the Mandatory note must be passed.
	MandatoryNotes  pulumi.StringPtrInput
	PercentageItems SettingValuePercentageItemArrayInput
	RolloutRules    SettingValueRolloutRuleArrayInput
	// The ID of the Feature Flag or Setting.
	SettingId pulumi.StringInput
	// The Feature Flag or Setting's value. Type: `string`. It must be compatible with the `settingType`.
	Value pulumi.StringInput
}

func (SettingValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*settingValueArgs)(nil)).Elem()
}

type SettingValueInput interface {
	pulumi.Input

	ToSettingValueOutput() SettingValueOutput
	ToSettingValueOutputWithContext(ctx context.Context) SettingValueOutput
}

func (*SettingValue) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingValue)(nil)).Elem()
}

func (i *SettingValue) ToSettingValueOutput() SettingValueOutput {
	return i.ToSettingValueOutputWithContext(context.Background())
}

func (i *SettingValue) ToSettingValueOutputWithContext(ctx context.Context) SettingValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingValueOutput)
}

// SettingValueArrayInput is an input type that accepts SettingValueArray and SettingValueArrayOutput values.
// You can construct a concrete instance of `SettingValueArrayInput` via:
//
//	SettingValueArray{ SettingValueArgs{...} }
type SettingValueArrayInput interface {
	pulumi.Input

	ToSettingValueArrayOutput() SettingValueArrayOutput
	ToSettingValueArrayOutputWithContext(context.Context) SettingValueArrayOutput
}

type SettingValueArray []SettingValueInput

func (SettingValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SettingValue)(nil)).Elem()
}

func (i SettingValueArray) ToSettingValueArrayOutput() SettingValueArrayOutput {
	return i.ToSettingValueArrayOutputWithContext(context.Background())
}

func (i SettingValueArray) ToSettingValueArrayOutputWithContext(ctx context.Context) SettingValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingValueArrayOutput)
}

// SettingValueMapInput is an input type that accepts SettingValueMap and SettingValueMapOutput values.
// You can construct a concrete instance of `SettingValueMapInput` via:
//
//	SettingValueMap{ "key": SettingValueArgs{...} }
type SettingValueMapInput interface {
	pulumi.Input

	ToSettingValueMapOutput() SettingValueMapOutput
	ToSettingValueMapOutputWithContext(context.Context) SettingValueMapOutput
}

type SettingValueMap map[string]SettingValueInput

func (SettingValueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SettingValue)(nil)).Elem()
}

func (i SettingValueMap) ToSettingValueMapOutput() SettingValueMapOutput {
	return i.ToSettingValueMapOutputWithContext(context.Background())
}

func (i SettingValueMap) ToSettingValueMapOutputWithContext(ctx context.Context) SettingValueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingValueMapOutput)
}

type SettingValueOutput struct{ *pulumi.OutputState }

func (SettingValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingValue)(nil)).Elem()
}

func (o SettingValueOutput) ToSettingValueOutput() SettingValueOutput {
	return o
}

func (o SettingValueOutput) ToSettingValueOutputWithContext(ctx context.Context) SettingValueOutput {
	return o
}

// The ID of the Environment.
func (o SettingValueOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *SettingValue) pulumi.StringOutput { return v.EnvironmentId }).(pulumi.StringOutput)
}

func (o SettingValueOutput) InitOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *SettingValue) pulumi.BoolOutput { return v.InitOnly }).(pulumi.BoolOutput)
}

// If the Product's "Mandatory notes" preference is turned on for the Environment the Mandatory note must be passed.
func (o SettingValueOutput) MandatoryNotes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SettingValue) pulumi.StringPtrOutput { return v.MandatoryNotes }).(pulumi.StringPtrOutput)
}

func (o SettingValueOutput) PercentageItems() SettingValuePercentageItemArrayOutput {
	return o.ApplyT(func(v *SettingValue) SettingValuePercentageItemArrayOutput { return v.PercentageItems }).(SettingValuePercentageItemArrayOutput)
}

func (o SettingValueOutput) RolloutRules() SettingValueRolloutRuleArrayOutput {
	return o.ApplyT(func(v *SettingValue) SettingValueRolloutRuleArrayOutput { return v.RolloutRules }).(SettingValueRolloutRuleArrayOutput)
}

// The ID of the Feature Flag or Setting.
func (o SettingValueOutput) SettingId() pulumi.StringOutput {
	return o.ApplyT(func(v *SettingValue) pulumi.StringOutput { return v.SettingId }).(pulumi.StringOutput)
}

// The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`.
func (o SettingValueOutput) SettingType() pulumi.StringOutput {
	return o.ApplyT(func(v *SettingValue) pulumi.StringOutput { return v.SettingType }).(pulumi.StringOutput)
}

// The Feature Flag or Setting's value. Type: `string`. It must be compatible with the `settingType`.
func (o SettingValueOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *SettingValue) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type SettingValueArrayOutput struct{ *pulumi.OutputState }

func (SettingValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SettingValue)(nil)).Elem()
}

func (o SettingValueArrayOutput) ToSettingValueArrayOutput() SettingValueArrayOutput {
	return o
}

func (o SettingValueArrayOutput) ToSettingValueArrayOutputWithContext(ctx context.Context) SettingValueArrayOutput {
	return o
}

func (o SettingValueArrayOutput) Index(i pulumi.IntInput) SettingValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SettingValue {
		return vs[0].([]*SettingValue)[vs[1].(int)]
	}).(SettingValueOutput)
}

type SettingValueMapOutput struct{ *pulumi.OutputState }

func (SettingValueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SettingValue)(nil)).Elem()
}

func (o SettingValueMapOutput) ToSettingValueMapOutput() SettingValueMapOutput {
	return o
}

func (o SettingValueMapOutput) ToSettingValueMapOutputWithContext(ctx context.Context) SettingValueMapOutput {
	return o
}

func (o SettingValueMapOutput) MapIndex(k pulumi.StringInput) SettingValueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SettingValue {
		return vs[0].(map[string]*SettingValue)[vs[1].(string)]
	}).(SettingValueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SettingValueInput)(nil)).Elem(), &SettingValue{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingValueArrayInput)(nil)).Elem(), SettingValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingValueMapInput)(nil)).Elem(), SettingValueMap{})
	pulumi.RegisterOutputType(SettingValueOutput{})
	pulumi.RegisterOutputType(SettingValueArrayOutput{})
	pulumi.RegisterOutputType(SettingValueMapOutput{})
}
