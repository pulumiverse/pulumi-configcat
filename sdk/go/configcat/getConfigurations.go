// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package configcat

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat/internal"
)

// Use this data source to access information about existing **Configs**. [What is a Config in ConfigCat?](https://configcat.com/docs/main-concepts)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			productId := cfg.Require("productId")
//			myConfigs, err := configcat.GetConfigurations(ctx, &configcat.GetConfigurationsArgs{
//				ProductId:       productId,
//				NameFilterRegex: pulumi.StringRef("Main Config"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("configId", myConfigs.Configs[0].ConfigId)
//			return nil
//		})
//	}
//
// ```
func GetConfigurations(ctx *pulumi.Context, args *GetConfigurationsArgs, opts ...pulumi.InvokeOption) (*GetConfigurationsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetConfigurationsResult
	err := ctx.Invoke("configcat:index/getConfigurations:getConfigurations", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConfigurations.
type GetConfigurationsArgs struct {
	// Filter the Configs by name.
	NameFilterRegex *string `pulumi:"nameFilterRegex"`
	// The ID of the Product.
	ProductId string `pulumi:"productId"`
}

// A collection of values returned by getConfigurations.
type GetConfigurationsResult struct {
	Configs []GetConfigurationsConfig `pulumi:"configs"`
	// Internal ID of the data source. Do not use.
	Id string `pulumi:"id"`
	// Filter the Configs by name.
	NameFilterRegex *string `pulumi:"nameFilterRegex"`
	// The ID of the Product.
	ProductId string `pulumi:"productId"`
}

func GetConfigurationsOutput(ctx *pulumi.Context, args GetConfigurationsOutputArgs, opts ...pulumi.InvokeOption) GetConfigurationsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetConfigurationsResultOutput, error) {
			args := v.(GetConfigurationsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("configcat:index/getConfigurations:getConfigurations", args, GetConfigurationsResultOutput{}, options).(GetConfigurationsResultOutput), nil
		}).(GetConfigurationsResultOutput)
}

// A collection of arguments for invoking getConfigurations.
type GetConfigurationsOutputArgs struct {
	// Filter the Configs by name.
	NameFilterRegex pulumi.StringPtrInput `pulumi:"nameFilterRegex"`
	// The ID of the Product.
	ProductId pulumi.StringInput `pulumi:"productId"`
}

func (GetConfigurationsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConfigurationsArgs)(nil)).Elem()
}

// A collection of values returned by getConfigurations.
type GetConfigurationsResultOutput struct{ *pulumi.OutputState }

func (GetConfigurationsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConfigurationsResult)(nil)).Elem()
}

func (o GetConfigurationsResultOutput) ToGetConfigurationsResultOutput() GetConfigurationsResultOutput {
	return o
}

func (o GetConfigurationsResultOutput) ToGetConfigurationsResultOutputWithContext(ctx context.Context) GetConfigurationsResultOutput {
	return o
}

func (o GetConfigurationsResultOutput) Configs() GetConfigurationsConfigArrayOutput {
	return o.ApplyT(func(v GetConfigurationsResult) []GetConfigurationsConfig { return v.Configs }).(GetConfigurationsConfigArrayOutput)
}

// Internal ID of the data source. Do not use.
func (o GetConfigurationsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigurationsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Filter the Configs by name.
func (o GetConfigurationsResultOutput) NameFilterRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetConfigurationsResult) *string { return v.NameFilterRegex }).(pulumi.StringPtrOutput)
}

// The ID of the Product.
func (o GetConfigurationsResultOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigurationsResult) string { return v.ProductId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetConfigurationsResultOutput{})
}
