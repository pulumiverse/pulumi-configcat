// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package configcat

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat/internal"
)

// Manages the **Product Preferences**.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// cfg := config.New(ctx, "")
// organizationId := cfg.Require("organizationId")
// product, err := configcat.NewProduct(ctx, "product", &configcat.ProductArgs{
// OrganizationId: pulumi.String(organizationId),
// Name: pulumi.String("My product"),
// Order: pulumi.Int(0),
// })
// if err != nil {
// return err
// }
// test, err := configcat.NewEnvironment(ctx, "test", &configcat.EnvironmentArgs{
// ProductId: product.ID(),
// Name: pulumi.String("Test"),
// Order: pulumi.Int(0),
// })
// if err != nil {
// return err
// }
// production, err := configcat.NewEnvironment(ctx, "production", &configcat.EnvironmentArgs{
// ProductId: product.ID(),
// Name: pulumi.String("Production"),
// Order: pulumi.Int(1),
// })
// if err != nil {
// return err
// }
// _, err = configcat.NewProductPreferences(ctx, "preferences", &configcat.ProductPreferencesArgs{
// ProductId: product.ID(),
// KeyGenerationMode: pulumi.String("kebabCase"),
// MandatorySettingHint: pulumi.Bool(true),
// ShowVariationId: pulumi.Bool(false),
// ReasonRequired: pulumi.Bool(false),
// ReasonRequiredEnvironments: pulumi.BoolMap(pulumi.All(test.ID(),production.ID()).ApplyT(func(_args []interface{}) (map[string]bool, error) {
// testId := _args[0].(string)
// productionId := _args[1].(string)
// return map[string]bool{
// testId: false,
// productionId: true,
// }, nil
// }).(pulumi.Map[string]boolOutput)),
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// Product preferences can be imported using the ProductId. Get the ProductId using the [List Products API](https://api.configcat.com/docs/#tag/Products/operation/get-products) for example.
//
// ```sh
// $ pulumi import configcat:index/productPreferences:ProductPreferences example 08d86d63-2726-47cd-8bfc-59608ecb91e2
// ```
type ProductPreferences struct {
	pulumi.CustomResourceState

	// Determines the Feature Flag key generation mode. Available values: `camelCase`|`upperCase`|`lowerCase`|`pascalCase`|`kebabCase`. Default: `camelCase`.
	KeyGenerationMode pulumi.StringOutput `pulumi:"keyGenerationMode"`
	// Indicates whether Feature flags and Settings must have a hint. Default: false.
	MandatorySettingHint pulumi.BoolOutput `pulumi:"mandatorySettingHint"`
	// The ID of the Product.
	ProductId pulumi.StringOutput `pulumi:"productId"`
	// Indicates that a mandatory note is required for saving and publishing. Default: false.
	ReasonRequired pulumi.BoolOutput `pulumi:"reasonRequired"`
	// The environment specific mandatory note map block. Keys are the Environment IDs and the values indicate that a mandatory note is required for saving and publishing.
	ReasonRequiredEnvironments pulumi.BoolMapOutput `pulumi:"reasonRequiredEnvironments"`
	// Indicates whether variation IDs must be shown on the ConfigCat Dashboard. Default: false.
	ShowVariationId pulumi.BoolOutput `pulumi:"showVariationId"`
}

// NewProductPreferences registers a new resource with the given unique name, arguments, and options.
func NewProductPreferences(ctx *pulumi.Context,
	name string, args *ProductPreferencesArgs, opts ...pulumi.ResourceOption) (*ProductPreferences, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProductId == nil {
		return nil, errors.New("invalid value for required argument 'ProductId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProductPreferences
	err := ctx.RegisterResource("configcat:index/productPreferences:ProductPreferences", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProductPreferences gets an existing ProductPreferences resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProductPreferences(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProductPreferencesState, opts ...pulumi.ResourceOption) (*ProductPreferences, error) {
	var resource ProductPreferences
	err := ctx.ReadResource("configcat:index/productPreferences:ProductPreferences", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProductPreferences resources.
type productPreferencesState struct {
	// Determines the Feature Flag key generation mode. Available values: `camelCase`|`upperCase`|`lowerCase`|`pascalCase`|`kebabCase`. Default: `camelCase`.
	KeyGenerationMode *string `pulumi:"keyGenerationMode"`
	// Indicates whether Feature flags and Settings must have a hint. Default: false.
	MandatorySettingHint *bool `pulumi:"mandatorySettingHint"`
	// The ID of the Product.
	ProductId *string `pulumi:"productId"`
	// Indicates that a mandatory note is required for saving and publishing. Default: false.
	ReasonRequired *bool `pulumi:"reasonRequired"`
	// The environment specific mandatory note map block. Keys are the Environment IDs and the values indicate that a mandatory note is required for saving and publishing.
	ReasonRequiredEnvironments map[string]bool `pulumi:"reasonRequiredEnvironments"`
	// Indicates whether variation IDs must be shown on the ConfigCat Dashboard. Default: false.
	ShowVariationId *bool `pulumi:"showVariationId"`
}

type ProductPreferencesState struct {
	// Determines the Feature Flag key generation mode. Available values: `camelCase`|`upperCase`|`lowerCase`|`pascalCase`|`kebabCase`. Default: `camelCase`.
	KeyGenerationMode pulumi.StringPtrInput
	// Indicates whether Feature flags and Settings must have a hint. Default: false.
	MandatorySettingHint pulumi.BoolPtrInput
	// The ID of the Product.
	ProductId pulumi.StringPtrInput
	// Indicates that a mandatory note is required for saving and publishing. Default: false.
	ReasonRequired pulumi.BoolPtrInput
	// The environment specific mandatory note map block. Keys are the Environment IDs and the values indicate that a mandatory note is required for saving and publishing.
	ReasonRequiredEnvironments pulumi.BoolMapInput
	// Indicates whether variation IDs must be shown on the ConfigCat Dashboard. Default: false.
	ShowVariationId pulumi.BoolPtrInput
}

func (ProductPreferencesState) ElementType() reflect.Type {
	return reflect.TypeOf((*productPreferencesState)(nil)).Elem()
}

type productPreferencesArgs struct {
	// Determines the Feature Flag key generation mode. Available values: `camelCase`|`upperCase`|`lowerCase`|`pascalCase`|`kebabCase`. Default: `camelCase`.
	KeyGenerationMode *string `pulumi:"keyGenerationMode"`
	// Indicates whether Feature flags and Settings must have a hint. Default: false.
	MandatorySettingHint *bool `pulumi:"mandatorySettingHint"`
	// The ID of the Product.
	ProductId string `pulumi:"productId"`
	// Indicates that a mandatory note is required for saving and publishing. Default: false.
	ReasonRequired *bool `pulumi:"reasonRequired"`
	// The environment specific mandatory note map block. Keys are the Environment IDs and the values indicate that a mandatory note is required for saving and publishing.
	ReasonRequiredEnvironments map[string]bool `pulumi:"reasonRequiredEnvironments"`
	// Indicates whether variation IDs must be shown on the ConfigCat Dashboard. Default: false.
	ShowVariationId *bool `pulumi:"showVariationId"`
}

// The set of arguments for constructing a ProductPreferences resource.
type ProductPreferencesArgs struct {
	// Determines the Feature Flag key generation mode. Available values: `camelCase`|`upperCase`|`lowerCase`|`pascalCase`|`kebabCase`. Default: `camelCase`.
	KeyGenerationMode pulumi.StringPtrInput
	// Indicates whether Feature flags and Settings must have a hint. Default: false.
	MandatorySettingHint pulumi.BoolPtrInput
	// The ID of the Product.
	ProductId pulumi.StringInput
	// Indicates that a mandatory note is required for saving and publishing. Default: false.
	ReasonRequired pulumi.BoolPtrInput
	// The environment specific mandatory note map block. Keys are the Environment IDs and the values indicate that a mandatory note is required for saving and publishing.
	ReasonRequiredEnvironments pulumi.BoolMapInput
	// Indicates whether variation IDs must be shown on the ConfigCat Dashboard. Default: false.
	ShowVariationId pulumi.BoolPtrInput
}

func (ProductPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*productPreferencesArgs)(nil)).Elem()
}

type ProductPreferencesInput interface {
	pulumi.Input

	ToProductPreferencesOutput() ProductPreferencesOutput
	ToProductPreferencesOutputWithContext(ctx context.Context) ProductPreferencesOutput
}

func (*ProductPreferences) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductPreferences)(nil)).Elem()
}

func (i *ProductPreferences) ToProductPreferencesOutput() ProductPreferencesOutput {
	return i.ToProductPreferencesOutputWithContext(context.Background())
}

func (i *ProductPreferences) ToProductPreferencesOutputWithContext(ctx context.Context) ProductPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductPreferencesOutput)
}

// ProductPreferencesArrayInput is an input type that accepts ProductPreferencesArray and ProductPreferencesArrayOutput values.
// You can construct a concrete instance of `ProductPreferencesArrayInput` via:
//
//	ProductPreferencesArray{ ProductPreferencesArgs{...} }
type ProductPreferencesArrayInput interface {
	pulumi.Input

	ToProductPreferencesArrayOutput() ProductPreferencesArrayOutput
	ToProductPreferencesArrayOutputWithContext(context.Context) ProductPreferencesArrayOutput
}

type ProductPreferencesArray []ProductPreferencesInput

func (ProductPreferencesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProductPreferences)(nil)).Elem()
}

func (i ProductPreferencesArray) ToProductPreferencesArrayOutput() ProductPreferencesArrayOutput {
	return i.ToProductPreferencesArrayOutputWithContext(context.Background())
}

func (i ProductPreferencesArray) ToProductPreferencesArrayOutputWithContext(ctx context.Context) ProductPreferencesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductPreferencesArrayOutput)
}

// ProductPreferencesMapInput is an input type that accepts ProductPreferencesMap and ProductPreferencesMapOutput values.
// You can construct a concrete instance of `ProductPreferencesMapInput` via:
//
//	ProductPreferencesMap{ "key": ProductPreferencesArgs{...} }
type ProductPreferencesMapInput interface {
	pulumi.Input

	ToProductPreferencesMapOutput() ProductPreferencesMapOutput
	ToProductPreferencesMapOutputWithContext(context.Context) ProductPreferencesMapOutput
}

type ProductPreferencesMap map[string]ProductPreferencesInput

func (ProductPreferencesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProductPreferences)(nil)).Elem()
}

func (i ProductPreferencesMap) ToProductPreferencesMapOutput() ProductPreferencesMapOutput {
	return i.ToProductPreferencesMapOutputWithContext(context.Background())
}

func (i ProductPreferencesMap) ToProductPreferencesMapOutputWithContext(ctx context.Context) ProductPreferencesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductPreferencesMapOutput)
}

type ProductPreferencesOutput struct{ *pulumi.OutputState }

func (ProductPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductPreferences)(nil)).Elem()
}

func (o ProductPreferencesOutput) ToProductPreferencesOutput() ProductPreferencesOutput {
	return o
}

func (o ProductPreferencesOutput) ToProductPreferencesOutputWithContext(ctx context.Context) ProductPreferencesOutput {
	return o
}

// Determines the Feature Flag key generation mode. Available values: `camelCase`|`upperCase`|`lowerCase`|`pascalCase`|`kebabCase`. Default: `camelCase`.
func (o ProductPreferencesOutput) KeyGenerationMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductPreferences) pulumi.StringOutput { return v.KeyGenerationMode }).(pulumi.StringOutput)
}

// Indicates whether Feature flags and Settings must have a hint. Default: false.
func (o ProductPreferencesOutput) MandatorySettingHint() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProductPreferences) pulumi.BoolOutput { return v.MandatorySettingHint }).(pulumi.BoolOutput)
}

// The ID of the Product.
func (o ProductPreferencesOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductPreferences) pulumi.StringOutput { return v.ProductId }).(pulumi.StringOutput)
}

// Indicates that a mandatory note is required for saving and publishing. Default: false.
func (o ProductPreferencesOutput) ReasonRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProductPreferences) pulumi.BoolOutput { return v.ReasonRequired }).(pulumi.BoolOutput)
}

// The environment specific mandatory note map block. Keys are the Environment IDs and the values indicate that a mandatory note is required for saving and publishing.
func (o ProductPreferencesOutput) ReasonRequiredEnvironments() pulumi.BoolMapOutput {
	return o.ApplyT(func(v *ProductPreferences) pulumi.BoolMapOutput { return v.ReasonRequiredEnvironments }).(pulumi.BoolMapOutput)
}

// Indicates whether variation IDs must be shown on the ConfigCat Dashboard. Default: false.
func (o ProductPreferencesOutput) ShowVariationId() pulumi.BoolOutput {
	return o.ApplyT(func(v *ProductPreferences) pulumi.BoolOutput { return v.ShowVariationId }).(pulumi.BoolOutput)
}

type ProductPreferencesArrayOutput struct{ *pulumi.OutputState }

func (ProductPreferencesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProductPreferences)(nil)).Elem()
}

func (o ProductPreferencesArrayOutput) ToProductPreferencesArrayOutput() ProductPreferencesArrayOutput {
	return o
}

func (o ProductPreferencesArrayOutput) ToProductPreferencesArrayOutputWithContext(ctx context.Context) ProductPreferencesArrayOutput {
	return o
}

func (o ProductPreferencesArrayOutput) Index(i pulumi.IntInput) ProductPreferencesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProductPreferences {
		return vs[0].([]*ProductPreferences)[vs[1].(int)]
	}).(ProductPreferencesOutput)
}

type ProductPreferencesMapOutput struct{ *pulumi.OutputState }

func (ProductPreferencesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProductPreferences)(nil)).Elem()
}

func (o ProductPreferencesMapOutput) ToProductPreferencesMapOutput() ProductPreferencesMapOutput {
	return o
}

func (o ProductPreferencesMapOutput) ToProductPreferencesMapOutputWithContext(ctx context.Context) ProductPreferencesMapOutput {
	return o
}

func (o ProductPreferencesMapOutput) MapIndex(k pulumi.StringInput) ProductPreferencesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProductPreferences {
		return vs[0].(map[string]*ProductPreferences)[vs[1].(string)]
	}).(ProductPreferencesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProductPreferencesInput)(nil)).Elem(), &ProductPreferences{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductPreferencesArrayInput)(nil)).Elem(), ProductPreferencesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductPreferencesMapInput)(nil)).Elem(), ProductPreferencesMap{})
	pulumi.RegisterOutputType(ProductPreferencesOutput{})
	pulumi.RegisterOutputType(ProductPreferencesArrayOutput{})
	pulumi.RegisterOutputType(ProductPreferencesMapOutput{})
}
