// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package configcat

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat/internal"
)

// ## # Product Resource
//
// Creates and manages a **Product**. [What is a Product in ConfigCat?](https://configcat.com/docs/main-concepts)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-configcat/sdk/v2/go/configcat"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myOrganizations, err := configcat.GetOrganizations(ctx, &configcat.GetOrganizationsArgs{
//				NameFilterRegex: pulumi.StringRef("ConfigCat"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			myProduct, err := configcat.NewProduct(ctx, "my_product", &configcat.ProductArgs{
//				OrganizationId: pulumi.String(myOrganizations.Organizations[0].OrganizationId),
//				Name:           pulumi.String("My product"),
//				Description:    pulumi.String("My product description"),
//				Order:          pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("productId", myProduct.ID())
//			return nil
//		})
//	}
//
// ```
//
// ## Endpoints used
//
// * [Get Product](https://api.configcat.com/docs/#tag/Products/operation/get-product)
// * [Create Product](https://api.configcat.com/docs/#tag/Products/operation/create-product)
// * [Update Product](https://api.configcat.com/docs/#tag/Products/operation/update-product)
// * [Delete Product](https://api.configcat.com/docs/#tag/Products/operation/delete-product)
//
// ## Import
//
// Products can be imported using the ProductId. Get the ProductId using the [List Products API](https://api.configcat.com/docs/#tag/Products/operation/get-products) for example.
//
// ```sh
// $ pulumi import configcat:index/product:Product example 08d86d63-2726-47cd-8bfc-59608ecb91e2
// ```
// Read more about importing.
type Product struct {
	pulumi.CustomResourceState

	// The description of the Product.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Product.
	Name pulumi.StringOutput `pulumi:"name"`
	// The order of the Product within an Organization (zero-based). If multiple Products has the same order, they are displayed in alphabetical order.
	Order pulumi.IntOutput `pulumi:"order"`
	// The ID of the Organization.
	OrganizationId pulumi.StringOutput `pulumi:"organizationId"`
}

// NewProduct registers a new resource with the given unique name, arguments, and options.
func NewProduct(ctx *pulumi.Context,
	name string, args *ProductArgs, opts ...pulumi.ResourceOption) (*Product, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Order == nil {
		return nil, errors.New("invalid value for required argument 'Order'")
	}
	if args.OrganizationId == nil {
		return nil, errors.New("invalid value for required argument 'OrganizationId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Product
	err := ctx.RegisterResource("configcat:index/product:Product", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProduct gets an existing Product resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProduct(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProductState, opts ...pulumi.ResourceOption) (*Product, error) {
	var resource Product
	err := ctx.ReadResource("configcat:index/product:Product", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Product resources.
type productState struct {
	// The description of the Product.
	Description *string `pulumi:"description"`
	// The name of the Product.
	Name *string `pulumi:"name"`
	// The order of the Product within an Organization (zero-based). If multiple Products has the same order, they are displayed in alphabetical order.
	Order *int `pulumi:"order"`
	// The ID of the Organization.
	OrganizationId *string `pulumi:"organizationId"`
}

type ProductState struct {
	// The description of the Product.
	Description pulumi.StringPtrInput
	// The name of the Product.
	Name pulumi.StringPtrInput
	// The order of the Product within an Organization (zero-based). If multiple Products has the same order, they are displayed in alphabetical order.
	Order pulumi.IntPtrInput
	// The ID of the Organization.
	OrganizationId pulumi.StringPtrInput
}

func (ProductState) ElementType() reflect.Type {
	return reflect.TypeOf((*productState)(nil)).Elem()
}

type productArgs struct {
	// The description of the Product.
	Description *string `pulumi:"description"`
	// The name of the Product.
	Name *string `pulumi:"name"`
	// The order of the Product within an Organization (zero-based). If multiple Products has the same order, they are displayed in alphabetical order.
	Order int `pulumi:"order"`
	// The ID of the Organization.
	OrganizationId string `pulumi:"organizationId"`
}

// The set of arguments for constructing a Product resource.
type ProductArgs struct {
	// The description of the Product.
	Description pulumi.StringPtrInput
	// The name of the Product.
	Name pulumi.StringPtrInput
	// The order of the Product within an Organization (zero-based). If multiple Products has the same order, they are displayed in alphabetical order.
	Order pulumi.IntInput
	// The ID of the Organization.
	OrganizationId pulumi.StringInput
}

func (ProductArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*productArgs)(nil)).Elem()
}

type ProductInput interface {
	pulumi.Input

	ToProductOutput() ProductOutput
	ToProductOutputWithContext(ctx context.Context) ProductOutput
}

func (*Product) ElementType() reflect.Type {
	return reflect.TypeOf((**Product)(nil)).Elem()
}

func (i *Product) ToProductOutput() ProductOutput {
	return i.ToProductOutputWithContext(context.Background())
}

func (i *Product) ToProductOutputWithContext(ctx context.Context) ProductOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductOutput)
}

// ProductArrayInput is an input type that accepts ProductArray and ProductArrayOutput values.
// You can construct a concrete instance of `ProductArrayInput` via:
//
//	ProductArray{ ProductArgs{...} }
type ProductArrayInput interface {
	pulumi.Input

	ToProductArrayOutput() ProductArrayOutput
	ToProductArrayOutputWithContext(context.Context) ProductArrayOutput
}

type ProductArray []ProductInput

func (ProductArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Product)(nil)).Elem()
}

func (i ProductArray) ToProductArrayOutput() ProductArrayOutput {
	return i.ToProductArrayOutputWithContext(context.Background())
}

func (i ProductArray) ToProductArrayOutputWithContext(ctx context.Context) ProductArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductArrayOutput)
}

// ProductMapInput is an input type that accepts ProductMap and ProductMapOutput values.
// You can construct a concrete instance of `ProductMapInput` via:
//
//	ProductMap{ "key": ProductArgs{...} }
type ProductMapInput interface {
	pulumi.Input

	ToProductMapOutput() ProductMapOutput
	ToProductMapOutputWithContext(context.Context) ProductMapOutput
}

type ProductMap map[string]ProductInput

func (ProductMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Product)(nil)).Elem()
}

func (i ProductMap) ToProductMapOutput() ProductMapOutput {
	return i.ToProductMapOutputWithContext(context.Background())
}

func (i ProductMap) ToProductMapOutputWithContext(ctx context.Context) ProductMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductMapOutput)
}

type ProductOutput struct{ *pulumi.OutputState }

func (ProductOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Product)(nil)).Elem()
}

func (o ProductOutput) ToProductOutput() ProductOutput {
	return o
}

func (o ProductOutput) ToProductOutputWithContext(ctx context.Context) ProductOutput {
	return o
}

// The description of the Product.
func (o ProductOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Product) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Product.
func (o ProductOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The order of the Product within an Organization (zero-based). If multiple Products has the same order, they are displayed in alphabetical order.
func (o ProductOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v *Product) pulumi.IntOutput { return v.Order }).(pulumi.IntOutput)
}

// The ID of the Organization.
func (o ProductOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Product) pulumi.StringOutput { return v.OrganizationId }).(pulumi.StringOutput)
}

type ProductArrayOutput struct{ *pulumi.OutputState }

func (ProductArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Product)(nil)).Elem()
}

func (o ProductArrayOutput) ToProductArrayOutput() ProductArrayOutput {
	return o
}

func (o ProductArrayOutput) ToProductArrayOutputWithContext(ctx context.Context) ProductArrayOutput {
	return o
}

func (o ProductArrayOutput) Index(i pulumi.IntInput) ProductOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Product {
		return vs[0].([]*Product)[vs[1].(int)]
	}).(ProductOutput)
}

type ProductMapOutput struct{ *pulumi.OutputState }

func (ProductMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Product)(nil)).Elem()
}

func (o ProductMapOutput) ToProductMapOutput() ProductMapOutput {
	return o
}

func (o ProductMapOutput) ToProductMapOutputWithContext(ctx context.Context) ProductMapOutput {
	return o
}

func (o ProductMapOutput) MapIndex(k pulumi.StringInput) ProductOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Product {
		return vs[0].(map[string]*Product)[vs[1].(string)]
	}).(ProductOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProductInput)(nil)).Elem(), &Product{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductArrayInput)(nil)).Elem(), ProductArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductMapInput)(nil)).Elem(), ProductMap{})
	pulumi.RegisterOutputType(ProductOutput{})
	pulumi.RegisterOutputType(ProductArrayOutput{})
	pulumi.RegisterOutputType(ProductMapOutput{})
}
