// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package configcat

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat/internal"
)

type SettingTag struct {
	pulumi.CustomResourceState

	// The ID of the Feature Flag or Setting.
	SettingId pulumi.StringOutput `pulumi:"settingId"`
	// The ID of the Tag.
	TagId pulumi.StringOutput `pulumi:"tagId"`
}

// NewSettingTag registers a new resource with the given unique name, arguments, and options.
func NewSettingTag(ctx *pulumi.Context,
	name string, args *SettingTagArgs, opts ...pulumi.ResourceOption) (*SettingTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SettingId == nil {
		return nil, errors.New("invalid value for required argument 'SettingId'")
	}
	if args.TagId == nil {
		return nil, errors.New("invalid value for required argument 'TagId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SettingTag
	err := ctx.RegisterResource("configcat:index/settingTag:SettingTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSettingTag gets an existing SettingTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSettingTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SettingTagState, opts ...pulumi.ResourceOption) (*SettingTag, error) {
	var resource SettingTag
	err := ctx.ReadResource("configcat:index/settingTag:SettingTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SettingTag resources.
type settingTagState struct {
	// The ID of the Feature Flag or Setting.
	SettingId *string `pulumi:"settingId"`
	// The ID of the Tag.
	TagId *string `pulumi:"tagId"`
}

type SettingTagState struct {
	// The ID of the Feature Flag or Setting.
	SettingId pulumi.StringPtrInput
	// The ID of the Tag.
	TagId pulumi.StringPtrInput
}

func (SettingTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*settingTagState)(nil)).Elem()
}

type settingTagArgs struct {
	// The ID of the Feature Flag or Setting.
	SettingId string `pulumi:"settingId"`
	// The ID of the Tag.
	TagId string `pulumi:"tagId"`
}

// The set of arguments for constructing a SettingTag resource.
type SettingTagArgs struct {
	// The ID of the Feature Flag or Setting.
	SettingId pulumi.StringInput
	// The ID of the Tag.
	TagId pulumi.StringInput
}

func (SettingTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*settingTagArgs)(nil)).Elem()
}

type SettingTagInput interface {
	pulumi.Input

	ToSettingTagOutput() SettingTagOutput
	ToSettingTagOutputWithContext(ctx context.Context) SettingTagOutput
}

func (*SettingTag) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingTag)(nil)).Elem()
}

func (i *SettingTag) ToSettingTagOutput() SettingTagOutput {
	return i.ToSettingTagOutputWithContext(context.Background())
}

func (i *SettingTag) ToSettingTagOutputWithContext(ctx context.Context) SettingTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingTagOutput)
}

// SettingTagArrayInput is an input type that accepts SettingTagArray and SettingTagArrayOutput values.
// You can construct a concrete instance of `SettingTagArrayInput` via:
//
//	SettingTagArray{ SettingTagArgs{...} }
type SettingTagArrayInput interface {
	pulumi.Input

	ToSettingTagArrayOutput() SettingTagArrayOutput
	ToSettingTagArrayOutputWithContext(context.Context) SettingTagArrayOutput
}

type SettingTagArray []SettingTagInput

func (SettingTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SettingTag)(nil)).Elem()
}

func (i SettingTagArray) ToSettingTagArrayOutput() SettingTagArrayOutput {
	return i.ToSettingTagArrayOutputWithContext(context.Background())
}

func (i SettingTagArray) ToSettingTagArrayOutputWithContext(ctx context.Context) SettingTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingTagArrayOutput)
}

// SettingTagMapInput is an input type that accepts SettingTagMap and SettingTagMapOutput values.
// You can construct a concrete instance of `SettingTagMapInput` via:
//
//	SettingTagMap{ "key": SettingTagArgs{...} }
type SettingTagMapInput interface {
	pulumi.Input

	ToSettingTagMapOutput() SettingTagMapOutput
	ToSettingTagMapOutputWithContext(context.Context) SettingTagMapOutput
}

type SettingTagMap map[string]SettingTagInput

func (SettingTagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SettingTag)(nil)).Elem()
}

func (i SettingTagMap) ToSettingTagMapOutput() SettingTagMapOutput {
	return i.ToSettingTagMapOutputWithContext(context.Background())
}

func (i SettingTagMap) ToSettingTagMapOutputWithContext(ctx context.Context) SettingTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SettingTagMapOutput)
}

type SettingTagOutput struct{ *pulumi.OutputState }

func (SettingTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SettingTag)(nil)).Elem()
}

func (o SettingTagOutput) ToSettingTagOutput() SettingTagOutput {
	return o
}

func (o SettingTagOutput) ToSettingTagOutputWithContext(ctx context.Context) SettingTagOutput {
	return o
}

// The ID of the Feature Flag or Setting.
func (o SettingTagOutput) SettingId() pulumi.StringOutput {
	return o.ApplyT(func(v *SettingTag) pulumi.StringOutput { return v.SettingId }).(pulumi.StringOutput)
}

// The ID of the Tag.
func (o SettingTagOutput) TagId() pulumi.StringOutput {
	return o.ApplyT(func(v *SettingTag) pulumi.StringOutput { return v.TagId }).(pulumi.StringOutput)
}

type SettingTagArrayOutput struct{ *pulumi.OutputState }

func (SettingTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SettingTag)(nil)).Elem()
}

func (o SettingTagArrayOutput) ToSettingTagArrayOutput() SettingTagArrayOutput {
	return o
}

func (o SettingTagArrayOutput) ToSettingTagArrayOutputWithContext(ctx context.Context) SettingTagArrayOutput {
	return o
}

func (o SettingTagArrayOutput) Index(i pulumi.IntInput) SettingTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SettingTag {
		return vs[0].([]*SettingTag)[vs[1].(int)]
	}).(SettingTagOutput)
}

type SettingTagMapOutput struct{ *pulumi.OutputState }

func (SettingTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SettingTag)(nil)).Elem()
}

func (o SettingTagMapOutput) ToSettingTagMapOutput() SettingTagMapOutput {
	return o
}

func (o SettingTagMapOutput) ToSettingTagMapOutputWithContext(ctx context.Context) SettingTagMapOutput {
	return o
}

func (o SettingTagMapOutput) MapIndex(k pulumi.StringInput) SettingTagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SettingTag {
		return vs[0].(map[string]*SettingTag)[vs[1].(string)]
	}).(SettingTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SettingTagInput)(nil)).Elem(), &SettingTag{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingTagArrayInput)(nil)).Elem(), SettingTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SettingTagMapInput)(nil)).Elem(), SettingTagMap{})
	pulumi.RegisterOutputType(SettingTagOutput{})
	pulumi.RegisterOutputType(SettingTagArrayOutput{})
	pulumi.RegisterOutputType(SettingTagMapOutput{})
}
