// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # configcat.SettingValue Resource
 *
 * Initializes and updates **Feature Flag and Setting** values. [Read more about the anatomy of a Feature Flag or Setting.](https://configcat.com/docs/main-concepts)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as configcat from "@pulumi/configcat";
 * import * as configcat from "@pulumiverse/configcat";
 *
 * const myProducts = configcat.getProducts({
 *     nameFilterRegex: "ConfigCat's product",
 * });
 * const myConfigs = myProducts.then(myProducts => configcat.getConfigs({
 *     productId: myProducts.products?.[0]?.productId,
 *     nameFilterRegex: "Main Config",
 * }));
 * const myEnvironments = myProducts.then(myProducts => configcat.getEnvironments({
 *     productId: myProducts.products?.[0]?.productId,
 *     nameFilterRegex: "Test",
 * }));
 * const mySettings = myConfigs.then(myConfigs => configcat.getSettings({
 *     configId: myConfigs.configs?.[0]?.configId,
 *     keyFilterRegex: "isAwesomeFeatureEnabled",
 * }));
 * const mySettingValue = new configcat.SettingValue("mySettingValue", {
 *     environmentId: myEnvironments.then(myEnvironments => myEnvironments.environments?.[0]?.environmentId),
 *     settingId: mySettings.then(mySettings => mySettings.settings?.[0]?.settingId),
 *     mandatoryNotes: "mandatory notes",
 *     value: "true",
 *     rolloutRules: [
 *         {
 *             comparisonAttribute: "Email",
 *             comparator: "contains",
 *             comparisonValue: "@mycompany.com",
 *             value: "true",
 *         },
 *         {
 *             comparisonAttribute: "custom",
 *             comparator: "isOneOf",
 *             comparisonValue: "red",
 *             value: "false",
 *         },
 *     ],
 *     percentageItems: [
 *         {
 *             percentage: "20",
 *             value: "true",
 *         },
 *         {
 *             percentage: "80",
 *             value: "false",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Endpoints used
 *
 * * [Get Value](https://api.configcat.com/docs/#tag/Feature-Flag-and-Setting-values/operation/get-setting-value)
 * * [Replace Value](https://api.configcat.com/docs/#tag/Feature-Flag-and-Setting-values/operation/replace-setting-value)
 *
 * ## Import
 *
 * Feature Flag/Setting values can be imported using a combined EnvironmentID:SettingId ID.
 *
 * Get the SettingId using e.g. the [List Flags API](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/get-settings).
 *
 * Get the EnvironmentId using e.g. the [List Environments API](https://api.configcat.com/docs/#tag/Environments/operation/get-environments).
 *
 * ```sh
 * $ pulumi import configcat:index/settingValue:SettingValue example 08d86d63-2726-47cd-8bfc-59608ecb91e2:1234
 * ```
 *
 * Read more about importing.
 */
export class SettingValue extends pulumi.CustomResource {
    /**
     * Get an existing SettingValue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingValueState, opts?: pulumi.CustomResourceOptions): SettingValue {
        return new SettingValue(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'configcat:index/settingValue:SettingValue';

    /**
     * Returns true if the given object is an instance of SettingValue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SettingValue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SettingValue.__pulumiType;
    }

    /**
     * The ID of the Environment.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * Default: true. Read more below.  
     *
     * The Feature Flag/Setting's value
     */
    public readonly initOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Default: "". If the Product's "Mandatory notes" preference is turned on for the Environment the Mandatory note must be passed.
     */
    public readonly mandatoryNotes!: pulumi.Output<string | undefined>;
    /**
     * A list to define [Percentage items](https://configcat.com/docs/advanced/targeting/#targeting-a-percentage-of-users). Read more below.
     */
    public readonly percentageItems!: pulumi.Output<outputs.SettingValuePercentageItem[] | undefined>;
    /**
     * A list to define [Rollout rules](https://configcat.com/docs/advanced/targeting/#anatomy-of-a-targeting-rule). Read more below.
     */
    public readonly rolloutRules!: pulumi.Output<outputs.SettingValueRolloutRule[] | undefined>;
    /**
     * The ID of the Feature Flag/Setting.
     */
    public readonly settingId!: pulumi.Output<string>;
    /**
     * The Setting's type.
     */
    public /*out*/ readonly settingType!: pulumi.Output<string>;
    /**
     * The Setting's value. Type: `string`. It must be compatible with the `settingType`.
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a SettingValue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SettingValueArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingValueArgs | SettingValueState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingValueState | undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["initOnly"] = state ? state.initOnly : undefined;
            resourceInputs["mandatoryNotes"] = state ? state.mandatoryNotes : undefined;
            resourceInputs["percentageItems"] = state ? state.percentageItems : undefined;
            resourceInputs["rolloutRules"] = state ? state.rolloutRules : undefined;
            resourceInputs["settingId"] = state ? state.settingId : undefined;
            resourceInputs["settingType"] = state ? state.settingType : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as SettingValueArgs | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.settingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'settingId'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["initOnly"] = args ? args.initOnly : undefined;
            resourceInputs["mandatoryNotes"] = args ? args.mandatoryNotes : undefined;
            resourceInputs["percentageItems"] = args ? args.percentageItems : undefined;
            resourceInputs["rolloutRules"] = args ? args.rolloutRules : undefined;
            resourceInputs["settingId"] = args ? args.settingId : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["settingType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SettingValue.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SettingValue resources.
 */
export interface SettingValueState {
    /**
     * The ID of the Environment.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * Default: true. Read more below.  
     *
     * The Feature Flag/Setting's value
     */
    initOnly?: pulumi.Input<boolean>;
    /**
     * Default: "". If the Product's "Mandatory notes" preference is turned on for the Environment the Mandatory note must be passed.
     */
    mandatoryNotes?: pulumi.Input<string>;
    /**
     * A list to define [Percentage items](https://configcat.com/docs/advanced/targeting/#targeting-a-percentage-of-users). Read more below.
     */
    percentageItems?: pulumi.Input<pulumi.Input<inputs.SettingValuePercentageItem>[]>;
    /**
     * A list to define [Rollout rules](https://configcat.com/docs/advanced/targeting/#anatomy-of-a-targeting-rule). Read more below.
     */
    rolloutRules?: pulumi.Input<pulumi.Input<inputs.SettingValueRolloutRule>[]>;
    /**
     * The ID of the Feature Flag/Setting.
     */
    settingId?: pulumi.Input<string>;
    /**
     * The Setting's type.
     */
    settingType?: pulumi.Input<string>;
    /**
     * The Setting's value. Type: `string`. It must be compatible with the `settingType`.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SettingValue resource.
 */
export interface SettingValueArgs {
    /**
     * The ID of the Environment.
     */
    environmentId: pulumi.Input<string>;
    /**
     * Default: true. Read more below.  
     *
     * The Feature Flag/Setting's value
     */
    initOnly?: pulumi.Input<boolean>;
    /**
     * Default: "". If the Product's "Mandatory notes" preference is turned on for the Environment the Mandatory note must be passed.
     */
    mandatoryNotes?: pulumi.Input<string>;
    /**
     * A list to define [Percentage items](https://configcat.com/docs/advanced/targeting/#targeting-a-percentage-of-users). Read more below.
     */
    percentageItems?: pulumi.Input<pulumi.Input<inputs.SettingValuePercentageItem>[]>;
    /**
     * A list to define [Rollout rules](https://configcat.com/docs/advanced/targeting/#anatomy-of-a-targeting-rule). Read more below.
     */
    rolloutRules?: pulumi.Input<pulumi.Input<inputs.SettingValueRolloutRule>[]>;
    /**
     * The ID of the Feature Flag/Setting.
     */
    settingId: pulumi.Input<string>;
    /**
     * The Setting's value. Type: `string`. It must be compatible with the `settingType`.
     */
    value: pulumi.Input<string>;
}
