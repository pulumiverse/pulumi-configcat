// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to access information about existing **Configs**. [What is a Config in ConfigCat?](https://configcat.com/docs/main-concepts)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as configcat from "@pulumi/configcat";
 *
 * const config = new pulumi.Config();
 * const productId = config.require("productId");
 * const myConfigs = configcat.getConfigurations({
 *     productId: productId,
 *     nameFilterRegex: "Main Config",
 * });
 * export const configId = myConfigs.then(myConfigs => myConfigs.configs?.[0]?.configId);
 * ```
 */
export function getConfigurations(args: GetConfigurationsArgs, opts?: pulumi.InvokeOptions): Promise<GetConfigurationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("configcat:index/getConfigurations:getConfigurations", {
        "nameFilterRegex": args.nameFilterRegex,
        "productId": args.productId,
    }, opts);
}

/**
 * A collection of arguments for invoking getConfigurations.
 */
export interface GetConfigurationsArgs {
    /**
     * Filter the Configs by name.
     */
    nameFilterRegex?: string;
    /**
     * The ID of the Product.
     */
    productId: string;
}

/**
 * A collection of values returned by getConfigurations.
 */
export interface GetConfigurationsResult {
    readonly configs: outputs.GetConfigurationsConfig[];
    /**
     * Internal ID of the data source. Do not use.
     */
    readonly id: string;
    /**
     * Filter the Configs by name.
     */
    readonly nameFilterRegex?: string;
    /**
     * The ID of the Product.
     */
    readonly productId: string;
}
/**
 * Use this data source to access information about existing **Configs**. [What is a Config in ConfigCat?](https://configcat.com/docs/main-concepts)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as configcat from "@pulumi/configcat";
 *
 * const config = new pulumi.Config();
 * const productId = config.require("productId");
 * const myConfigs = configcat.getConfigurations({
 *     productId: productId,
 *     nameFilterRegex: "Main Config",
 * });
 * export const configId = myConfigs.then(myConfigs => myConfigs.configs?.[0]?.configId);
 * ```
 */
export function getConfigurationsOutput(args: GetConfigurationsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetConfigurationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("configcat:index/getConfigurations:getConfigurations", {
        "nameFilterRegex": args.nameFilterRegex,
        "productId": args.productId,
    }, opts);
}

/**
 * A collection of arguments for invoking getConfigurations.
 */
export interface GetConfigurationsOutputArgs {
    /**
     * Filter the Configs by name.
     */
    nameFilterRegex?: pulumi.Input<string>;
    /**
     * The ID of the Product.
     */
    productId: pulumi.Input<string>;
}
