// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Initializes and updates **Feature Flag or Setting** values for V2 configs. [Read more about the anatomy of a Feature Flag or Setting.](https://configcat.com/docs/main-concepts)
 *
 * ## Import
 *
 * Feature Flag/Setting values (V2) can be imported using a combined EnvironmentID:SettingId ID.
 *
 * Get the EnvironmentId using e.g. the [List Environments API](https://api.configcat.com/docs/#tag/Environments/operation/get-environments).
 *
 * Get the SettingId using e.g. the [List Flags API](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/get-settings).
 *
 * ```sh
 * $ pulumi import configcat:index/settingValueV2:SettingValueV2 example 08d86d63-2726-47cd-8bfc-59608ecb91e2:1234
 * ```
 */
export class SettingValueV2 extends pulumi.CustomResource {
    /**
     * Get an existing SettingValueV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SettingValueV2State, opts?: pulumi.CustomResourceOptions): SettingValueV2 {
        return new SettingValueV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'configcat:index/settingValueV2:SettingValueV2';

    /**
     * Returns true if the given object is an instance of SettingValueV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SettingValueV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SettingValueV2.__pulumiType;
    }

    /**
     * The ID of the Environment.
     */
    public readonly environmentId!: pulumi.Output<string>;
    public readonly initOnly!: pulumi.Output<boolean>;
    /**
     * If the Product's "Mandatory notes" preference is turned on for the Environment the Mandatory note must be passed.
     */
    public readonly mandatoryNotes!: pulumi.Output<string | undefined>;
    /**
     * The user attribute used for percentage evaluation. If not set, it defaults to the Identifier user object attribute.
     */
    public readonly percentageEvaluationAttribute!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Feature Flag or Setting.
     */
    public readonly settingId!: pulumi.Output<string>;
    /**
     * The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`.
     */
    public /*out*/ readonly settingType!: pulumi.Output<string>;
    /**
     * The targeting rules of the Feature Flag or Setting
     */
    public readonly targetingRules!: pulumi.Output<outputs.SettingValueV2TargetingRule[] | undefined>;
    /**
     * Represents the value of a Feature Flag or Setting.
     */
    public readonly value!: pulumi.Output<outputs.SettingValueV2Value>;

    /**
     * Create a SettingValueV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SettingValueV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SettingValueV2Args | SettingValueV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SettingValueV2State | undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["initOnly"] = state ? state.initOnly : undefined;
            resourceInputs["mandatoryNotes"] = state ? state.mandatoryNotes : undefined;
            resourceInputs["percentageEvaluationAttribute"] = state ? state.percentageEvaluationAttribute : undefined;
            resourceInputs["settingId"] = state ? state.settingId : undefined;
            resourceInputs["settingType"] = state ? state.settingType : undefined;
            resourceInputs["targetingRules"] = state ? state.targetingRules : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as SettingValueV2Args | undefined;
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.settingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'settingId'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["initOnly"] = args ? args.initOnly : undefined;
            resourceInputs["mandatoryNotes"] = args ? args.mandatoryNotes : undefined;
            resourceInputs["percentageEvaluationAttribute"] = args ? args.percentageEvaluationAttribute : undefined;
            resourceInputs["settingId"] = args ? args.settingId : undefined;
            resourceInputs["targetingRules"] = args ? args.targetingRules : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["settingType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SettingValueV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SettingValueV2 resources.
 */
export interface SettingValueV2State {
    /**
     * The ID of the Environment.
     */
    environmentId?: pulumi.Input<string>;
    initOnly?: pulumi.Input<boolean>;
    /**
     * If the Product's "Mandatory notes" preference is turned on for the Environment the Mandatory note must be passed.
     */
    mandatoryNotes?: pulumi.Input<string>;
    /**
     * The user attribute used for percentage evaluation. If not set, it defaults to the Identifier user object attribute.
     */
    percentageEvaluationAttribute?: pulumi.Input<string>;
    /**
     * The ID of the Feature Flag or Setting.
     */
    settingId?: pulumi.Input<string>;
    /**
     * The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`.
     */
    settingType?: pulumi.Input<string>;
    /**
     * The targeting rules of the Feature Flag or Setting
     */
    targetingRules?: pulumi.Input<pulumi.Input<inputs.SettingValueV2TargetingRule>[]>;
    /**
     * Represents the value of a Feature Flag or Setting.
     */
    value?: pulumi.Input<inputs.SettingValueV2Value>;
}

/**
 * The set of arguments for constructing a SettingValueV2 resource.
 */
export interface SettingValueV2Args {
    /**
     * The ID of the Environment.
     */
    environmentId: pulumi.Input<string>;
    initOnly?: pulumi.Input<boolean>;
    /**
     * If the Product's "Mandatory notes" preference is turned on for the Environment the Mandatory note must be passed.
     */
    mandatoryNotes?: pulumi.Input<string>;
    /**
     * The user attribute used for percentage evaluation. If not set, it defaults to the Identifier user object attribute.
     */
    percentageEvaluationAttribute?: pulumi.Input<string>;
    /**
     * The ID of the Feature Flag or Setting.
     */
    settingId: pulumi.Input<string>;
    /**
     * The targeting rules of the Feature Flag or Setting
     */
    targetingRules?: pulumi.Input<pulumi.Input<inputs.SettingValueV2TargetingRule>[]>;
    /**
     * Represents the value of a Feature Flag or Setting.
     */
    value: pulumi.Input<inputs.SettingValueV2Value>;
}
