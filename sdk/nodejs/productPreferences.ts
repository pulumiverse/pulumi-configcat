// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages the **Product Preferences**.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as configcat from "@pulumiverse/configcat";
 *
 * const config = new pulumi.Config();
 * const organizationId = config.require("organizationId");
 * const product = new configcat.Product("product", {
 *     organizationId: organizationId,
 *     name: "My product",
 *     order: 0,
 * });
 * const test = new configcat.Environment("test", {
 *     productId: product.id,
 *     name: "Test",
 *     order: 0,
 * });
 * const production = new configcat.Environment("production", {
 *     productId: product.id,
 *     name: "Production",
 *     order: 1,
 * });
 * const preferences = new configcat.ProductPreferences("preferences", {
 *     productId: product.id,
 *     keyGenerationMode: "kebabCase",
 *     mandatorySettingHint: true,
 *     showVariationId: false,
 *     reasonRequired: false,
 *     reasonRequiredEnvironments: pulumi.all([test.id, production.id]).apply(([testId, productionId]) => {
 *         [testId]: false,
 *         [productionId]: true,
 *     }),
 * });
 * ```
 *
 * ## Import
 *
 * Product preferences can be imported using the ProductId. Get the ProductId using the [List Products API](https://api.configcat.com/docs/#tag/Products/operation/get-products) for example.
 *
 * ```sh
 * $ pulumi import configcat:index/productPreferences:ProductPreferences example 08d86d63-2726-47cd-8bfc-59608ecb91e2
 * ```
 */
export class ProductPreferences extends pulumi.CustomResource {
    /**
     * Get an existing ProductPreferences resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProductPreferencesState, opts?: pulumi.CustomResourceOptions): ProductPreferences {
        return new ProductPreferences(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'configcat:index/productPreferences:ProductPreferences';

    /**
     * Returns true if the given object is an instance of ProductPreferences.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProductPreferences {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProductPreferences.__pulumiType;
    }

    /**
     * Determines the Feature Flag key generation mode. Available values: `camelCase`|`upperCase`|`lowerCase`|`pascalCase`|`kebabCase`. Default: `camelCase`.
     */
    public readonly keyGenerationMode!: pulumi.Output<string>;
    /**
     * Indicates whether Feature flags and Settings must have a hint. Default: false.
     */
    public readonly mandatorySettingHint!: pulumi.Output<boolean>;
    /**
     * The ID of the Product.
     */
    public readonly productId!: pulumi.Output<string>;
    /**
     * Indicates that a mandatory note is required for saving and publishing. Default: false.
     */
    public readonly reasonRequired!: pulumi.Output<boolean>;
    /**
     * The environment specific mandatory note map block. Keys are the Environment IDs and the values indicate that a mandatory note is required for saving and publishing.
     */
    public readonly reasonRequiredEnvironments!: pulumi.Output<{[key: string]: boolean}>;
    /**
     * Indicates whether variation IDs must be shown on the ConfigCat Dashboard. Default: false.
     */
    public readonly showVariationId!: pulumi.Output<boolean>;

    /**
     * Create a ProductPreferences resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProductPreferencesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProductPreferencesArgs | ProductPreferencesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProductPreferencesState | undefined;
            resourceInputs["keyGenerationMode"] = state ? state.keyGenerationMode : undefined;
            resourceInputs["mandatorySettingHint"] = state ? state.mandatorySettingHint : undefined;
            resourceInputs["productId"] = state ? state.productId : undefined;
            resourceInputs["reasonRequired"] = state ? state.reasonRequired : undefined;
            resourceInputs["reasonRequiredEnvironments"] = state ? state.reasonRequiredEnvironments : undefined;
            resourceInputs["showVariationId"] = state ? state.showVariationId : undefined;
        } else {
            const args = argsOrState as ProductPreferencesArgs | undefined;
            if ((!args || args.productId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productId'");
            }
            resourceInputs["keyGenerationMode"] = args ? args.keyGenerationMode : undefined;
            resourceInputs["mandatorySettingHint"] = args ? args.mandatorySettingHint : undefined;
            resourceInputs["productId"] = args ? args.productId : undefined;
            resourceInputs["reasonRequired"] = args ? args.reasonRequired : undefined;
            resourceInputs["reasonRequiredEnvironments"] = args ? args.reasonRequiredEnvironments : undefined;
            resourceInputs["showVariationId"] = args ? args.showVariationId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProductPreferences.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProductPreferences resources.
 */
export interface ProductPreferencesState {
    /**
     * Determines the Feature Flag key generation mode. Available values: `camelCase`|`upperCase`|`lowerCase`|`pascalCase`|`kebabCase`. Default: `camelCase`.
     */
    keyGenerationMode?: pulumi.Input<string>;
    /**
     * Indicates whether Feature flags and Settings must have a hint. Default: false.
     */
    mandatorySettingHint?: pulumi.Input<boolean>;
    /**
     * The ID of the Product.
     */
    productId?: pulumi.Input<string>;
    /**
     * Indicates that a mandatory note is required for saving and publishing. Default: false.
     */
    reasonRequired?: pulumi.Input<boolean>;
    /**
     * The environment specific mandatory note map block. Keys are the Environment IDs and the values indicate that a mandatory note is required for saving and publishing.
     */
    reasonRequiredEnvironments?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    /**
     * Indicates whether variation IDs must be shown on the ConfigCat Dashboard. Default: false.
     */
    showVariationId?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ProductPreferences resource.
 */
export interface ProductPreferencesArgs {
    /**
     * Determines the Feature Flag key generation mode. Available values: `camelCase`|`upperCase`|`lowerCase`|`pascalCase`|`kebabCase`. Default: `camelCase`.
     */
    keyGenerationMode?: pulumi.Input<string>;
    /**
     * Indicates whether Feature flags and Settings must have a hint. Default: false.
     */
    mandatorySettingHint?: pulumi.Input<boolean>;
    /**
     * The ID of the Product.
     */
    productId: pulumi.Input<string>;
    /**
     * Indicates that a mandatory note is required for saving and publishing. Default: false.
     */
    reasonRequired?: pulumi.Input<boolean>;
    /**
     * The environment specific mandatory note map block. Keys are the Environment IDs and the values indicate that a mandatory note is required for saving and publishing.
     */
    reasonRequiredEnvironments?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    /**
     * Indicates whether variation IDs must be shown on the ConfigCat Dashboard. Default: false.
     */
    showVariationId?: pulumi.Input<boolean>;
}
