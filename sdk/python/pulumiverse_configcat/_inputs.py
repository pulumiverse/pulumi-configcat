# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'SettingValuePercentageItemArgs',
    'SettingValuePercentageItemArgsDict',
    'SettingValueRolloutRuleArgs',
    'SettingValueRolloutRuleArgsDict',
]

MYPY = False

if not MYPY:
    class SettingValuePercentageItemArgsDict(TypedDict):
        percentage: pulumi.Input[str]
        """
        Any [number](https://configcat.com/docs/advanced/targeting/#-value) between 0 and 100 that represents a randomly allocated fraction of your users.
        """
        value: pulumi.Input[str]
        """
        The exact [value](https://configcat.com/docs/advanced/targeting/#served-value-1) that will be served to the users that fall into that fraction. Type: `string`. It must be compatible with the `setting_type`.
        """
elif False:
    SettingValuePercentageItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingValuePercentageItemArgs:
    def __init__(__self__, *,
                 percentage: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] percentage: Any [number](https://configcat.com/docs/advanced/targeting/#-value) between 0 and 100 that represents a randomly allocated fraction of your users.
        :param pulumi.Input[str] value: The exact [value](https://configcat.com/docs/advanced/targeting/#served-value-1) that will be served to the users that fall into that fraction. Type: `string`. It must be compatible with the `setting_type`.
        """
        pulumi.set(__self__, "percentage", percentage)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def percentage(self) -> pulumi.Input[str]:
        """
        Any [number](https://configcat.com/docs/advanced/targeting/#-value) between 0 and 100 that represents a randomly allocated fraction of your users.
        """
        return pulumi.get(self, "percentage")

    @percentage.setter
    def percentage(self, value: pulumi.Input[str]):
        pulumi.set(self, "percentage", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The exact [value](https://configcat.com/docs/advanced/targeting/#served-value-1) that will be served to the users that fall into that fraction. Type: `string`. It must be compatible with the `setting_type`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class SettingValueRolloutRuleArgsDict(TypedDict):
        value: pulumi.Input[str]
        """
        The exact [value](https://configcat.com/docs/advanced/targeting/#served-value) that will be served to the users who match the targeting rule. Type: `string`. It must be compatible with the `setting_type`.
        """
        comparator: NotRequired[pulumi.Input[str]]
        """
        The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).
        """
        comparison_attribute: NotRequired[pulumi.Input[str]]
        """
        The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute).
        """
        comparison_value: NotRequired[pulumi.Input[str]]
        """
        The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).
        """
        segment_comparator: NotRequired[pulumi.Input[str]]
        """
        The segment_comparator. Possible values: isIn, isNotIn.
        """
        segment_id: NotRequired[pulumi.Input[str]]
        """
        The [Segment's](https://configcat.com/docs/advanced/segments) unique identifier.
        """
elif False:
    SettingValueRolloutRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SettingValueRolloutRuleArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 comparator: Optional[pulumi.Input[str]] = None,
                 comparison_attribute: Optional[pulumi.Input[str]] = None,
                 comparison_value: Optional[pulumi.Input[str]] = None,
                 segment_comparator: Optional[pulumi.Input[str]] = None,
                 segment_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: The exact [value](https://configcat.com/docs/advanced/targeting/#served-value) that will be served to the users who match the targeting rule. Type: `string`. It must be compatible with the `setting_type`.
        :param pulumi.Input[str] comparator: The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).
        :param pulumi.Input[str] comparison_attribute: The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute).
        :param pulumi.Input[str] comparison_value: The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).
        :param pulumi.Input[str] segment_comparator: The segment_comparator. Possible values: isIn, isNotIn.
        :param pulumi.Input[str] segment_id: The [Segment's](https://configcat.com/docs/advanced/segments) unique identifier.
        """
        pulumi.set(__self__, "value", value)
        if comparator is not None:
            pulumi.set(__self__, "comparator", comparator)
        if comparison_attribute is not None:
            pulumi.set(__self__, "comparison_attribute", comparison_attribute)
        if comparison_value is not None:
            pulumi.set(__self__, "comparison_value", comparison_value)
        if segment_comparator is not None:
            pulumi.set(__self__, "segment_comparator", segment_comparator)
        if segment_id is not None:
            pulumi.set(__self__, "segment_id", segment_id)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The exact [value](https://configcat.com/docs/advanced/targeting/#served-value) that will be served to the users who match the targeting rule. Type: `string`. It must be compatible with the `setting_type`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def comparator(self) -> Optional[pulumi.Input[str]]:
        """
        The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter(name="comparisonAttribute")
    def comparison_attribute(self) -> Optional[pulumi.Input[str]]:
        """
        The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute).
        """
        return pulumi.get(self, "comparison_attribute")

    @comparison_attribute.setter
    def comparison_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comparison_attribute", value)

    @property
    @pulumi.getter(name="comparisonValue")
    def comparison_value(self) -> Optional[pulumi.Input[str]]:
        """
        The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).
        """
        return pulumi.get(self, "comparison_value")

    @comparison_value.setter
    def comparison_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comparison_value", value)

    @property
    @pulumi.getter(name="segmentComparator")
    def segment_comparator(self) -> Optional[pulumi.Input[str]]:
        """
        The segment_comparator. Possible values: isIn, isNotIn.
        """
        return pulumi.get(self, "segment_comparator")

    @segment_comparator.setter
    def segment_comparator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_comparator", value)

    @property
    @pulumi.getter(name="segmentId")
    def segment_id(self) -> Optional[pulumi.Input[str]]:
        """
        The [Segment's](https://configcat.com/docs/advanced/segments) unique identifier.
        """
        return pulumi.get(self, "segment_id")

    @segment_id.setter
    def segment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "segment_id", value)


