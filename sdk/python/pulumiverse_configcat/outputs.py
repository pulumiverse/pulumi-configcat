# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'SettingValuePercentageItem',
    'SettingValueRolloutRule',
    'GetConfigurationsConfigResult',
    'GetEnvironmentsEnvironmentResult',
    'GetOrganizationsOrganizationResult',
    'GetPermissionGroupsPermissionGroupResult',
    'GetProductsProductResult',
    'GetSegmentsSegmentResult',
    'GetSettingsSettingResult',
    'GetTagsTagResult',
]

@pulumi.output_type
class SettingValuePercentageItem(dict):
    def __init__(__self__, *,
                 percentage: str,
                 value: str):
        """
        :param str percentage: Any [number](https://configcat.com/docs/advanced/targeting/#-value) between 0 and 100 that represents a randomly allocated fraction of your users.
        :param str value: The exact [value](https://configcat.com/docs/advanced/targeting/#served-value-1) that will be served to the users that fall into that fraction. Type: `string`. It must be compatible with the `setting_type`.
        """
        pulumi.set(__self__, "percentage", percentage)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def percentage(self) -> str:
        """
        Any [number](https://configcat.com/docs/advanced/targeting/#-value) between 0 and 100 that represents a randomly allocated fraction of your users.
        """
        return pulumi.get(self, "percentage")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The exact [value](https://configcat.com/docs/advanced/targeting/#served-value-1) that will be served to the users that fall into that fraction. Type: `string`. It must be compatible with the `setting_type`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SettingValueRolloutRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "comparisonAttribute":
            suggest = "comparison_attribute"
        elif key == "comparisonValue":
            suggest = "comparison_value"
        elif key == "segmentComparator":
            suggest = "segment_comparator"
        elif key == "segmentId":
            suggest = "segment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingValueRolloutRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingValueRolloutRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingValueRolloutRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: str,
                 comparator: Optional[str] = None,
                 comparison_attribute: Optional[str] = None,
                 comparison_value: Optional[str] = None,
                 segment_comparator: Optional[str] = None,
                 segment_id: Optional[str] = None):
        """
        :param str value: The exact [value](https://configcat.com/docs/advanced/targeting/#served-value) that will be served to the users who match the targeting rule. Type: `string`. It must be compatible with the `setting_type`.
        :param str comparator: The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).
        :param str comparison_attribute: The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute).
        :param str comparison_value: The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).
        :param str segment_comparator: The segment_comparator. Possible values: isIn, isNotIn.
        :param str segment_id: The [Segment's](https://configcat.com/docs/advanced/segments) unique identifier.
        """
        pulumi.set(__self__, "value", value)
        if comparator is not None:
            pulumi.set(__self__, "comparator", comparator)
        if comparison_attribute is not None:
            pulumi.set(__self__, "comparison_attribute", comparison_attribute)
        if comparison_value is not None:
            pulumi.set(__self__, "comparison_value", comparison_value)
        if segment_comparator is not None:
            pulumi.set(__self__, "segment_comparator", segment_comparator)
        if segment_id is not None:
            pulumi.set(__self__, "segment_id", segment_id)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The exact [value](https://configcat.com/docs/advanced/targeting/#served-value) that will be served to the users who match the targeting rule. Type: `string`. It must be compatible with the `setting_type`.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def comparator(self) -> Optional[str]:
        """
        The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).
        """
        return pulumi.get(self, "comparator")

    @property
    @pulumi.getter(name="comparisonAttribute")
    def comparison_attribute(self) -> Optional[str]:
        """
        The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute).
        """
        return pulumi.get(self, "comparison_attribute")

    @property
    @pulumi.getter(name="comparisonValue")
    def comparison_value(self) -> Optional[str]:
        """
        The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).
        """
        return pulumi.get(self, "comparison_value")

    @property
    @pulumi.getter(name="segmentComparator")
    def segment_comparator(self) -> Optional[str]:
        """
        The segment_comparator. Possible values: isIn, isNotIn.
        """
        return pulumi.get(self, "segment_comparator")

    @property
    @pulumi.getter(name="segmentId")
    def segment_id(self) -> Optional[str]:
        """
        The [Segment's](https://configcat.com/docs/advanced/segments) unique identifier.
        """
        return pulumi.get(self, "segment_id")


@pulumi.output_type
class GetConfigurationsConfigResult(dict):
    def __init__(__self__, *,
                 config_id: str,
                 description: str,
                 name: str):
        """
        :param str config_id: The unique Config ID.
        :param str description: The description of the Config.
        :param str name: The name of the Config.
        """
        pulumi.set(__self__, "config_id", config_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> str:
        """
        The unique Config ID.
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the Config.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Config.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetEnvironmentsEnvironmentResult(dict):
    def __init__(__self__, *,
                 color: str,
                 description: str,
                 environment_id: str,
                 name: str):
        """
        :param str color: The color of the Environment.
        :param str description: The description of the Environment.
        :param str environment_id: The unique Environment ID.
        :param str name: The name of the Environment.
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def color(self) -> str:
        """
        The color of the Environment.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the Environment.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> str:
        """
        The unique Environment ID.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Environment.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetOrganizationsOrganizationResult(dict):
    def __init__(__self__, *,
                 name: str,
                 organization_id: str):
        """
        :param str name: The name of the Organization.
        :param str organization_id: The unique Organization ID.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "organization_id", organization_id)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Organization.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> str:
        """
        The unique Organization ID.
        """
        return pulumi.get(self, "organization_id")


@pulumi.output_type
class GetPermissionGroupsPermissionGroupResult(dict):
    def __init__(__self__, *,
                 accesstype: str,
                 can_createorupdate_config: bool,
                 can_createorupdate_environment: bool,
                 can_createorupdate_segment: bool,
                 can_createorupdate_setting: bool,
                 can_createorupdate_tag: bool,
                 can_delete_config: bool,
                 can_delete_environment: bool,
                 can_delete_segment: bool,
                 can_delete_setting: bool,
                 can_delete_tag: bool,
                 can_manage_integrations: bool,
                 can_manage_members: bool,
                 can_manage_product_preferences: bool,
                 can_manage_webhook: bool,
                 can_rotate_sdkkey: bool,
                 can_tag_setting: bool,
                 can_use_exportimport: bool,
                 can_view_product_auditlog: bool,
                 can_view_product_statistics: bool,
                 can_view_sdkkey: bool,
                 name: str,
                 new_environment_accesstype: str,
                 permission_group_id: int,
                 environment_accesses: Optional[Mapping[str, str]] = None):
        """
        :param str accesstype: Represent the Feature Management permission. Possible values: readOnly, full, custom
        :param bool can_createorupdate_config: Group members can create/update Configs.
        :param bool can_createorupdate_environment: Group members can create/update Environments.
        :param bool can_createorupdate_setting: Group members can create/update Feature Flags and Settings.
        :param bool can_createorupdate_tag: Group members can create/update Tags.
        :param bool can_delete_config: Group members can delete Configs.
        :param bool can_delete_environment: Group members can delete Environments.
        :param bool can_delete_setting: Group members can delete Feature Flags and Settings.
        :param bool can_delete_tag: Group members can delete Tags.
        :param bool can_manage_integrations: Group members can add and configure integrations.
        :param bool can_manage_members: Group members can manage team members.
        :param bool can_manage_product_preferences: Group members can update Product preferences.
        :param bool can_manage_webhook: Group members can create/update/delete Webhooks.
        :param bool can_rotate_sdkkey: Group members can rotate SDK keys.
        :param bool can_tag_setting: Group members can attach/detach Tags to Feature Flags and Settings.
        :param bool can_use_exportimport: Group members can use the export/import feature.
        :param bool can_view_product_auditlog: Group members has access to audit logs.
        :param bool can_view_product_statistics: Group members has access to product statistics.
        :param bool can_view_sdkkey: Group members has access to SDK keys.
        :param str name: The name of the Permission Group.
        :param str new_environment_accesstype: Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly, none
        :param int permission_group_id: The unique Permission Groups ID.
        :param Mapping[str, str] environment_accesses: The environment specific permissions map block defined as below.
        """
        pulumi.set(__self__, "accesstype", accesstype)
        pulumi.set(__self__, "can_createorupdate_config", can_createorupdate_config)
        pulumi.set(__self__, "can_createorupdate_environment", can_createorupdate_environment)
        pulumi.set(__self__, "can_createorupdate_segment", can_createorupdate_segment)
        pulumi.set(__self__, "can_createorupdate_setting", can_createorupdate_setting)
        pulumi.set(__self__, "can_createorupdate_tag", can_createorupdate_tag)
        pulumi.set(__self__, "can_delete_config", can_delete_config)
        pulumi.set(__self__, "can_delete_environment", can_delete_environment)
        pulumi.set(__self__, "can_delete_segment", can_delete_segment)
        pulumi.set(__self__, "can_delete_setting", can_delete_setting)
        pulumi.set(__self__, "can_delete_tag", can_delete_tag)
        pulumi.set(__self__, "can_manage_integrations", can_manage_integrations)
        pulumi.set(__self__, "can_manage_members", can_manage_members)
        pulumi.set(__self__, "can_manage_product_preferences", can_manage_product_preferences)
        pulumi.set(__self__, "can_manage_webhook", can_manage_webhook)
        pulumi.set(__self__, "can_rotate_sdkkey", can_rotate_sdkkey)
        pulumi.set(__self__, "can_tag_setting", can_tag_setting)
        pulumi.set(__self__, "can_use_exportimport", can_use_exportimport)
        pulumi.set(__self__, "can_view_product_auditlog", can_view_product_auditlog)
        pulumi.set(__self__, "can_view_product_statistics", can_view_product_statistics)
        pulumi.set(__self__, "can_view_sdkkey", can_view_sdkkey)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "new_environment_accesstype", new_environment_accesstype)
        pulumi.set(__self__, "permission_group_id", permission_group_id)
        if environment_accesses is not None:
            pulumi.set(__self__, "environment_accesses", environment_accesses)

    @property
    @pulumi.getter
    def accesstype(self) -> str:
        """
        Represent the Feature Management permission. Possible values: readOnly, full, custom
        """
        return pulumi.get(self, "accesstype")

    @property
    @pulumi.getter(name="canCreateorupdateConfig")
    def can_createorupdate_config(self) -> bool:
        """
        Group members can create/update Configs.
        """
        return pulumi.get(self, "can_createorupdate_config")

    @property
    @pulumi.getter(name="canCreateorupdateEnvironment")
    def can_createorupdate_environment(self) -> bool:
        """
        Group members can create/update Environments.
        """
        return pulumi.get(self, "can_createorupdate_environment")

    @property
    @pulumi.getter(name="canCreateorupdateSegment")
    def can_createorupdate_segment(self) -> bool:
        return pulumi.get(self, "can_createorupdate_segment")

    @property
    @pulumi.getter(name="canCreateorupdateSetting")
    def can_createorupdate_setting(self) -> bool:
        """
        Group members can create/update Feature Flags and Settings.
        """
        return pulumi.get(self, "can_createorupdate_setting")

    @property
    @pulumi.getter(name="canCreateorupdateTag")
    def can_createorupdate_tag(self) -> bool:
        """
        Group members can create/update Tags.
        """
        return pulumi.get(self, "can_createorupdate_tag")

    @property
    @pulumi.getter(name="canDeleteConfig")
    def can_delete_config(self) -> bool:
        """
        Group members can delete Configs.
        """
        return pulumi.get(self, "can_delete_config")

    @property
    @pulumi.getter(name="canDeleteEnvironment")
    def can_delete_environment(self) -> bool:
        """
        Group members can delete Environments.
        """
        return pulumi.get(self, "can_delete_environment")

    @property
    @pulumi.getter(name="canDeleteSegment")
    def can_delete_segment(self) -> bool:
        return pulumi.get(self, "can_delete_segment")

    @property
    @pulumi.getter(name="canDeleteSetting")
    def can_delete_setting(self) -> bool:
        """
        Group members can delete Feature Flags and Settings.
        """
        return pulumi.get(self, "can_delete_setting")

    @property
    @pulumi.getter(name="canDeleteTag")
    def can_delete_tag(self) -> bool:
        """
        Group members can delete Tags.
        """
        return pulumi.get(self, "can_delete_tag")

    @property
    @pulumi.getter(name="canManageIntegrations")
    def can_manage_integrations(self) -> bool:
        """
        Group members can add and configure integrations.
        """
        return pulumi.get(self, "can_manage_integrations")

    @property
    @pulumi.getter(name="canManageMembers")
    def can_manage_members(self) -> bool:
        """
        Group members can manage team members.
        """
        return pulumi.get(self, "can_manage_members")

    @property
    @pulumi.getter(name="canManageProductPreferences")
    def can_manage_product_preferences(self) -> bool:
        """
        Group members can update Product preferences.
        """
        return pulumi.get(self, "can_manage_product_preferences")

    @property
    @pulumi.getter(name="canManageWebhook")
    def can_manage_webhook(self) -> bool:
        """
        Group members can create/update/delete Webhooks.
        """
        return pulumi.get(self, "can_manage_webhook")

    @property
    @pulumi.getter(name="canRotateSdkkey")
    def can_rotate_sdkkey(self) -> bool:
        """
        Group members can rotate SDK keys.
        """
        return pulumi.get(self, "can_rotate_sdkkey")

    @property
    @pulumi.getter(name="canTagSetting")
    def can_tag_setting(self) -> bool:
        """
        Group members can attach/detach Tags to Feature Flags and Settings.
        """
        return pulumi.get(self, "can_tag_setting")

    @property
    @pulumi.getter(name="canUseExportimport")
    def can_use_exportimport(self) -> bool:
        """
        Group members can use the export/import feature.
        """
        return pulumi.get(self, "can_use_exportimport")

    @property
    @pulumi.getter(name="canViewProductAuditlog")
    def can_view_product_auditlog(self) -> bool:
        """
        Group members has access to audit logs.
        """
        return pulumi.get(self, "can_view_product_auditlog")

    @property
    @pulumi.getter(name="canViewProductStatistics")
    def can_view_product_statistics(self) -> bool:
        """
        Group members has access to product statistics.
        """
        return pulumi.get(self, "can_view_product_statistics")

    @property
    @pulumi.getter(name="canViewSdkkey")
    def can_view_sdkkey(self) -> bool:
        """
        Group members has access to SDK keys.
        """
        return pulumi.get(self, "can_view_sdkkey")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Permission Group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="newEnvironmentAccesstype")
    def new_environment_accesstype(self) -> str:
        """
        Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly, none
        """
        return pulumi.get(self, "new_environment_accesstype")

    @property
    @pulumi.getter(name="permissionGroupId")
    def permission_group_id(self) -> int:
        """
        The unique Permission Groups ID.
        """
        return pulumi.get(self, "permission_group_id")

    @property
    @pulumi.getter(name="environmentAccesses")
    def environment_accesses(self) -> Optional[Mapping[str, str]]:
        """
        The environment specific permissions map block defined as below.
        """
        return pulumi.get(self, "environment_accesses")


@pulumi.output_type
class GetProductsProductResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 product_id: str):
        """
        :param str description: The description of the Product.
        :param str name: The name of the Product.
        :param str product_id: The unique Product ID.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "product_id", product_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the Product.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Product.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> str:
        """
        The unique Product ID.
        """
        return pulumi.get(self, "product_id")


@pulumi.output_type
class GetSegmentsSegmentResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 segment_id: str):
        """
        :param str description: The description of the Segment.
        :param str name: The name of the Segment.
        :param str segment_id: The unique Segment ID.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "segment_id", segment_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the Segment.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Segment.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="segmentId")
    def segment_id(self) -> str:
        """
        The unique Segment ID.
        """
        return pulumi.get(self, "segment_id")


@pulumi.output_type
class GetSettingsSettingResult(dict):
    def __init__(__self__, *,
                 hint: str,
                 key: str,
                 name: str,
                 setting_id: str,
                 setting_type: str):
        """
        :param str hint: The hint of the Setting.
        :param str key: The key of the Feature Flag/Setting.
        :param str name: The name of the Setting.
        :param str setting_id: The unique Setting ID.
        :param str setting_type: The Setting's type. Available values: `boolean`|`string`|`int`|`double`.
        """
        pulumi.set(__self__, "hint", hint)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "setting_id", setting_id)
        pulumi.set(__self__, "setting_type", setting_type)

    @property
    @pulumi.getter
    def hint(self) -> str:
        """
        The hint of the Setting.
        """
        return pulumi.get(self, "hint")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the Feature Flag/Setting.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Setting.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="settingId")
    def setting_id(self) -> str:
        """
        The unique Setting ID.
        """
        return pulumi.get(self, "setting_id")

    @property
    @pulumi.getter(name="settingType")
    def setting_type(self) -> str:
        """
        The Setting's type. Available values: `boolean`|`string`|`int`|`double`.
        """
        return pulumi.get(self, "setting_type")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 color: str,
                 name: str,
                 tag_id: str):
        """
        :param str color: The color of the Tag.
        :param str name: The name of the Tag.
        :param str tag_id: The unique Tag ID.
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tag_id", tag_id)

    @property
    @pulumi.getter
    def color(self) -> str:
        """
        The color of the Tag.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Tag.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> str:
        """
        The unique Tag ID.
        """
        return pulumi.get(self, "tag_id")


