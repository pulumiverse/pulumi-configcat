// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Configcat
{
    /// <summary>
    /// Creates and manages a **Webhook**. [What is a Webhook in ConfigCat?](https://configcat.com/docs/advanced/notifications-webhooks/)
    /// 
    /// ## Import
    /// 
    /// Webhooks can be imported using the WebhookId. Get the WebhookId using the [List Webhooks API](https://api.configcat.com/docs/index.html#tag/Webhooks/operation/get-webhooks) for example.
    /// 
    /// It is important to note that webhooks containing secure webhook headers cannot be imported via `pulumi import`.
    /// 
    /// If you want to manage your webhooks that already contain secure webhook headers, you should create brand new configcat_webhook resources in Terraform without importing them. After they are created successfully and managed by Terraform, you can safely delete the old, non Terraform managed webhook from the ConfigCat Dashboard.
    /// 
    /// ```sh
    /// $ pulumi import configcat:index/webhook:Webhook example 1234
    /// ```
    /// </summary>
    [ConfigcatResourceType("configcat:index/webhook:Webhook")]
    public partial class Webhook : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Config.
        /// </summary>
        [Output("configId")]
        public Output<string> ConfigId { get; private set; } = null!;

        /// <summary>
        /// The HTTP body content.
        /// </summary>
        [Output("content")]
        public Output<string?> Content { get; private set; } = null!;

        /// <summary>
        /// The ID of the Environment.
        /// </summary>
        [Output("environmentId")]
        public Output<string> EnvironmentId { get; private set; } = null!;

        /// <summary>
        /// The HTTP method. Available values: `get`|`post`. Default: `get`
        /// </summary>
        [Output("httpMethod")]
        public Output<string> HttpMethod { get; private set; } = null!;

        [Output("secureWebhookHeaders")]
        public Output<ImmutableArray<Outputs.WebhookSecureWebhookHeader>> SecureWebhookHeaders { get; private set; } = null!;

        /// <summary>
        /// The URL of the Webhook.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// List of plain text HTTP headers. The value of a plain text header is always visible for everyone. It also appears in audit logs and on the webhook test UI.
        /// </summary>
        [Output("webhookHeaders")]
        public Output<ImmutableArray<Outputs.WebhookWebhookHeader>> WebhookHeaders { get; private set; } = null!;


        /// <summary>
        /// Create a Webhook resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Webhook(string name, WebhookArgs args, CustomResourceOptions? options = null)
            : base("configcat:index/webhook:Webhook", name, args ?? new WebhookArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Webhook(string name, Input<string> id, WebhookState? state = null, CustomResourceOptions? options = null)
            : base("configcat:index/webhook:Webhook", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "api://github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Webhook resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Webhook Get(string name, Input<string> id, WebhookState? state = null, CustomResourceOptions? options = null)
        {
            return new Webhook(name, id, state, options);
        }
    }

    public sealed class WebhookArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Config.
        /// </summary>
        [Input("configId", required: true)]
        public Input<string> ConfigId { get; set; } = null!;

        /// <summary>
        /// The HTTP body content.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The ID of the Environment.
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        /// <summary>
        /// The HTTP method. Available values: `get`|`post`. Default: `get`
        /// </summary>
        [Input("httpMethod")]
        public Input<string>? HttpMethod { get; set; }

        [Input("secureWebhookHeaders")]
        private InputList<Inputs.WebhookSecureWebhookHeaderArgs>? _secureWebhookHeaders;
        public InputList<Inputs.WebhookSecureWebhookHeaderArgs> SecureWebhookHeaders
        {
            get => _secureWebhookHeaders ?? (_secureWebhookHeaders = new InputList<Inputs.WebhookSecureWebhookHeaderArgs>());
            set => _secureWebhookHeaders = value;
        }

        /// <summary>
        /// The URL of the Webhook.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        [Input("webhookHeaders")]
        private InputList<Inputs.WebhookWebhookHeaderArgs>? _webhookHeaders;

        /// <summary>
        /// List of plain text HTTP headers. The value of a plain text header is always visible for everyone. It also appears in audit logs and on the webhook test UI.
        /// </summary>
        public InputList<Inputs.WebhookWebhookHeaderArgs> WebhookHeaders
        {
            get => _webhookHeaders ?? (_webhookHeaders = new InputList<Inputs.WebhookWebhookHeaderArgs>());
            set => _webhookHeaders = value;
        }

        public WebhookArgs()
        {
        }
        public static new WebhookArgs Empty => new WebhookArgs();
    }

    public sealed class WebhookState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Config.
        /// </summary>
        [Input("configId")]
        public Input<string>? ConfigId { get; set; }

        /// <summary>
        /// The HTTP body content.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The ID of the Environment.
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        /// <summary>
        /// The HTTP method. Available values: `get`|`post`. Default: `get`
        /// </summary>
        [Input("httpMethod")]
        public Input<string>? HttpMethod { get; set; }

        [Input("secureWebhookHeaders")]
        private InputList<Inputs.WebhookSecureWebhookHeaderGetArgs>? _secureWebhookHeaders;
        public InputList<Inputs.WebhookSecureWebhookHeaderGetArgs> SecureWebhookHeaders
        {
            get => _secureWebhookHeaders ?? (_secureWebhookHeaders = new InputList<Inputs.WebhookSecureWebhookHeaderGetArgs>());
            set => _secureWebhookHeaders = value;
        }

        /// <summary>
        /// The URL of the Webhook.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("webhookHeaders")]
        private InputList<Inputs.WebhookWebhookHeaderGetArgs>? _webhookHeaders;

        /// <summary>
        /// List of plain text HTTP headers. The value of a plain text header is always visible for everyone. It also appears in audit logs and on the webhook test UI.
        /// </summary>
        public InputList<Inputs.WebhookWebhookHeaderGetArgs> WebhookHeaders
        {
            get => _webhookHeaders ?? (_webhookHeaders = new InputList<Inputs.WebhookWebhookHeaderGetArgs>());
            set => _webhookHeaders = value;
        }

        public WebhookState()
        {
        }
        public static new WebhookState Empty => new WebhookState();
    }
}
