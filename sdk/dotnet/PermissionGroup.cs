// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Configcat
{
    /// <summary>
    /// ## # configcat.PermissionGroup Resource
    /// 
    /// Creates and manages a **Permission Group**. [What is a Permission Group in ConfigCat?](https://configcat.com/docs/advanced/team-management/team-management-basics/#permissions--permission-groups-product-level)
    /// 
    /// ## Example Usage
    /// 
    /// ### S
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Configcat = Pulumi.Configcat;
    /// using Configcat = Pulumiverse.Configcat;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myProducts = Configcat.GetProducts.Invoke(new()
    ///     {
    ///         NameFilterRegex = "ConfigCat's product",
    ///     });
    /// 
    ///     var myPermissionGroup = new Configcat.PermissionGroup("my_permission_group", new()
    ///     {
    ///         ProductId = myProducts.Apply(getProductsResult =&gt; getProductsResult.Products[0]?.ProductId),
    ///         Name = "Administrators",
    ///         Accesstype = "full",
    ///         CanManageMembers = true,
    ///         CanCreateorupdateConfig = true,
    ///         CanDeleteConfig = true,
    ///         CanCreateorupdateEnvironment = true,
    ///         CanDeleteEnvironment = true,
    ///         CanCreateorupdateSetting = true,
    ///         CanTagSetting = true,
    ///         CanDeleteSetting = true,
    ///         CanCreateorupdateTag = true,
    ///         CanDeleteTag = true,
    ///         CanManageWebhook = true,
    ///         CanUseExportimport = true,
    ///         CanManageProductPreferences = true,
    ///         CanManageIntegrations = true,
    ///         CanViewSdkkey = true,
    ///         CanRotateSdkkey = true,
    ///         CanCreateorupdateSegment = true,
    ///         CanDeleteSegment = true,
    ///         CanViewProductAuditlog = true,
    ///         CanViewProductStatistics = true,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["permissionGroupId"] = myPermissionGroup.Id,
    ///     };
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Configcat = Pulumi.Configcat;
    /// using Configcat = Pulumiverse.Configcat;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myProducts = Configcat.GetProducts.Invoke(new()
    ///     {
    ///         NameFilterRegex = "ConfigCat's product",
    ///     });
    /// 
    ///     var myTestEnvironments = Configcat.GetEnvironments.Invoke(new()
    ///     {
    ///         NameFilterRegex = "Test",
    ///     });
    /// 
    ///     var myProductionEnvironments = Configcat.GetEnvironments.Invoke(new()
    ///     {
    ///         NameFilterRegex = "Production",
    ///     });
    /// 
    ///     var myPermissionGroup = new Configcat.PermissionGroup("my_permission_group", new()
    ///     {
    ///         ProductId = myProducts.Apply(getProductsResult =&gt; getProductsResult.Products[0]?.ProductId),
    ///         Name = "Read only except Test environment",
    ///         Accesstype = "custom",
    ///         EnvironmentAccesses = Output.Tuple(myTestEnvironments, myTestEnvironments).Apply(values =&gt;
    ///         {
    ///             var myTestEnvironments = values.Item1;
    ///             var myTestEnvironments1 = values.Item2;
    ///             return 
    ///             {
    ///                 { myTestEnvironments.Apply(getEnvironmentsResult =&gt; getEnvironmentsResult.Environments[0]?.EnvironmentId), "full" },
    ///                 { myTestEnvironments1.Environments[1]?.EnvironmentId, "readOnly" },
    ///             };
    ///         }),
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["permissionGroupId"] = myPermissionGroup.Id,
    ///     };
    /// });
    /// ```
    /// 
    /// ## Endpoints used
    /// 
    /// * [Get Permission Group](https://api.configcat.com/docs/#tag/Permission-Groups/operation/get-permission-group)
    /// * [Create Permission Group](https://api.configcat.com/docs/#tag/Permission-Groups/operation/create-permission-group)
    /// * [Update Permission Group](https://api.configcat.com/docs/#tag/Permission-Groups/operation/update-permission-group)
    /// * [Delete Permission Group](https://api.configcat.com/docs/#tag/Permission-Groups/operation/delete-permission-group)
    /// 
    /// ## Import
    /// 
    /// Permission Groups can be imported using the PermissionGroupId. Get the PermissionGroupId using the [List Permission Groups API](https://api.configcat.com/docs/#tag/Permission-Groups/operation/get-permission-groups) for example.
    /// 
    /// ```sh
    /// $ pulumi import configcat:index/permissionGroup:PermissionGroup example 123
    /// ```
    /// Read more about importing.
    /// </summary>
    [ConfigcatResourceType("configcat:index/permissionGroup:PermissionGroup")]
    public partial class PermissionGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Represent the Feature Management permission. Possible values: readOnly, full, custom. Default: custom
        /// </summary>
        [Output("accesstype")]
        public Output<string?> Accesstype { get; private set; } = null!;

        /// <summary>
        /// Group members can create/update Configs. Default: false.
        /// </summary>
        [Output("canCreateorupdateConfig")]
        public Output<bool?> CanCreateorupdateConfig { get; private set; } = null!;

        /// <summary>
        /// Group members can create/update Environments. Default: false.
        /// </summary>
        [Output("canCreateorupdateEnvironment")]
        public Output<bool?> CanCreateorupdateEnvironment { get; private set; } = null!;

        [Output("canCreateorupdateSegment")]
        public Output<bool?> CanCreateorupdateSegment { get; private set; } = null!;

        /// <summary>
        /// Group members can create/update Feature Flags and Settings. Default: false.
        /// </summary>
        [Output("canCreateorupdateSetting")]
        public Output<bool?> CanCreateorupdateSetting { get; private set; } = null!;

        /// <summary>
        /// Group members can create/update Tags. Default: false.
        /// </summary>
        [Output("canCreateorupdateTag")]
        public Output<bool?> CanCreateorupdateTag { get; private set; } = null!;

        /// <summary>
        /// Group members can delete Configs. Default: false.
        /// </summary>
        [Output("canDeleteConfig")]
        public Output<bool?> CanDeleteConfig { get; private set; } = null!;

        /// <summary>
        /// Group members can delete Environments. Default: false.
        /// </summary>
        [Output("canDeleteEnvironment")]
        public Output<bool?> CanDeleteEnvironment { get; private set; } = null!;

        [Output("canDeleteSegment")]
        public Output<bool?> CanDeleteSegment { get; private set; } = null!;

        /// <summary>
        /// Group members can delete Feature Flags and Settings. Default: false.
        /// </summary>
        [Output("canDeleteSetting")]
        public Output<bool?> CanDeleteSetting { get; private set; } = null!;

        /// <summary>
        /// Group members can delete Tags. Default: false.
        /// </summary>
        [Output("canDeleteTag")]
        public Output<bool?> CanDeleteTag { get; private set; } = null!;

        /// <summary>
        /// Group members can add and configure integrations. Default: false.
        /// </summary>
        [Output("canManageIntegrations")]
        public Output<bool?> CanManageIntegrations { get; private set; } = null!;

        /// <summary>
        /// Group members can manage team members. Default: false.
        /// </summary>
        [Output("canManageMembers")]
        public Output<bool?> CanManageMembers { get; private set; } = null!;

        /// <summary>
        /// Group members can update Product preferences. Default: false.
        /// </summary>
        [Output("canManageProductPreferences")]
        public Output<bool?> CanManageProductPreferences { get; private set; } = null!;

        /// <summary>
        /// Group members can create/update/delete Webhooks. Default: false.
        /// </summary>
        [Output("canManageWebhook")]
        public Output<bool?> CanManageWebhook { get; private set; } = null!;

        /// <summary>
        /// Group members can rotate SDK keys. Default: false.
        /// </summary>
        [Output("canRotateSdkkey")]
        public Output<bool?> CanRotateSdkkey { get; private set; } = null!;

        /// <summary>
        /// Group members can attach/detach Tags to Feature Flags and Settings. Default: false.
        /// </summary>
        [Output("canTagSetting")]
        public Output<bool?> CanTagSetting { get; private set; } = null!;

        /// <summary>
        /// Group members can use the export/import feature. Default: false.
        /// </summary>
        [Output("canUseExportimport")]
        public Output<bool?> CanUseExportimport { get; private set; } = null!;

        /// <summary>
        /// Group members has access to audit logs. Default: false.
        /// </summary>
        [Output("canViewProductAuditlog")]
        public Output<bool?> CanViewProductAuditlog { get; private set; } = null!;

        /// <summary>
        /// Group members has access to product statistics. Default: false.
        /// </summary>
        [Output("canViewProductStatistics")]
        public Output<bool?> CanViewProductStatistics { get; private set; } = null!;

        /// <summary>
        /// Group members has access to SDK keys. Default: false.
        /// </summary>
        [Output("canViewSdkkey")]
        public Output<bool?> CanViewSdkkey { get; private set; } = null!;

        /// <summary>
        /// The environment specific permissions map block defined as below.
        /// </summary>
        [Output("environmentAccesses")]
        public Output<ImmutableDictionary<string, string>?> EnvironmentAccesses { get; private set; } = null!;

        /// <summary>
        /// The name of the Permission Group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly, none. Default: none.
        /// </summary>
        [Output("newEnvironmentAccesstype")]
        public Output<string?> NewEnvironmentAccesstype { get; private set; } = null!;

        /// <summary>
        /// The ID of the Product.
        /// </summary>
        [Output("productId")]
        public Output<string> ProductId { get; private set; } = null!;


        /// <summary>
        /// Create a PermissionGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PermissionGroup(string name, PermissionGroupArgs args, CustomResourceOptions? options = null)
            : base("configcat:index/permissionGroup:PermissionGroup", name, args ?? new PermissionGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PermissionGroup(string name, Input<string> id, PermissionGroupState? state = null, CustomResourceOptions? options = null)
            : base("configcat:index/permissionGroup:PermissionGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "api://github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PermissionGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PermissionGroup Get(string name, Input<string> id, PermissionGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new PermissionGroup(name, id, state, options);
        }
    }

    public sealed class PermissionGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Represent the Feature Management permission. Possible values: readOnly, full, custom. Default: custom
        /// </summary>
        [Input("accesstype")]
        public Input<string>? Accesstype { get; set; }

        /// <summary>
        /// Group members can create/update Configs. Default: false.
        /// </summary>
        [Input("canCreateorupdateConfig")]
        public Input<bool>? CanCreateorupdateConfig { get; set; }

        /// <summary>
        /// Group members can create/update Environments. Default: false.
        /// </summary>
        [Input("canCreateorupdateEnvironment")]
        public Input<bool>? CanCreateorupdateEnvironment { get; set; }

        [Input("canCreateorupdateSegment")]
        public Input<bool>? CanCreateorupdateSegment { get; set; }

        /// <summary>
        /// Group members can create/update Feature Flags and Settings. Default: false.
        /// </summary>
        [Input("canCreateorupdateSetting")]
        public Input<bool>? CanCreateorupdateSetting { get; set; }

        /// <summary>
        /// Group members can create/update Tags. Default: false.
        /// </summary>
        [Input("canCreateorupdateTag")]
        public Input<bool>? CanCreateorupdateTag { get; set; }

        /// <summary>
        /// Group members can delete Configs. Default: false.
        /// </summary>
        [Input("canDeleteConfig")]
        public Input<bool>? CanDeleteConfig { get; set; }

        /// <summary>
        /// Group members can delete Environments. Default: false.
        /// </summary>
        [Input("canDeleteEnvironment")]
        public Input<bool>? CanDeleteEnvironment { get; set; }

        [Input("canDeleteSegment")]
        public Input<bool>? CanDeleteSegment { get; set; }

        /// <summary>
        /// Group members can delete Feature Flags and Settings. Default: false.
        /// </summary>
        [Input("canDeleteSetting")]
        public Input<bool>? CanDeleteSetting { get; set; }

        /// <summary>
        /// Group members can delete Tags. Default: false.
        /// </summary>
        [Input("canDeleteTag")]
        public Input<bool>? CanDeleteTag { get; set; }

        /// <summary>
        /// Group members can add and configure integrations. Default: false.
        /// </summary>
        [Input("canManageIntegrations")]
        public Input<bool>? CanManageIntegrations { get; set; }

        /// <summary>
        /// Group members can manage team members. Default: false.
        /// </summary>
        [Input("canManageMembers")]
        public Input<bool>? CanManageMembers { get; set; }

        /// <summary>
        /// Group members can update Product preferences. Default: false.
        /// </summary>
        [Input("canManageProductPreferences")]
        public Input<bool>? CanManageProductPreferences { get; set; }

        /// <summary>
        /// Group members can create/update/delete Webhooks. Default: false.
        /// </summary>
        [Input("canManageWebhook")]
        public Input<bool>? CanManageWebhook { get; set; }

        /// <summary>
        /// Group members can rotate SDK keys. Default: false.
        /// </summary>
        [Input("canRotateSdkkey")]
        public Input<bool>? CanRotateSdkkey { get; set; }

        /// <summary>
        /// Group members can attach/detach Tags to Feature Flags and Settings. Default: false.
        /// </summary>
        [Input("canTagSetting")]
        public Input<bool>? CanTagSetting { get; set; }

        /// <summary>
        /// Group members can use the export/import feature. Default: false.
        /// </summary>
        [Input("canUseExportimport")]
        public Input<bool>? CanUseExportimport { get; set; }

        /// <summary>
        /// Group members has access to audit logs. Default: false.
        /// </summary>
        [Input("canViewProductAuditlog")]
        public Input<bool>? CanViewProductAuditlog { get; set; }

        /// <summary>
        /// Group members has access to product statistics. Default: false.
        /// </summary>
        [Input("canViewProductStatistics")]
        public Input<bool>? CanViewProductStatistics { get; set; }

        /// <summary>
        /// Group members has access to SDK keys. Default: false.
        /// </summary>
        [Input("canViewSdkkey")]
        public Input<bool>? CanViewSdkkey { get; set; }

        [Input("environmentAccesses")]
        private InputMap<string>? _environmentAccesses;

        /// <summary>
        /// The environment specific permissions map block defined as below.
        /// </summary>
        public InputMap<string> EnvironmentAccesses
        {
            get => _environmentAccesses ?? (_environmentAccesses = new InputMap<string>());
            set => _environmentAccesses = value;
        }

        /// <summary>
        /// The name of the Permission Group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly, none. Default: none.
        /// </summary>
        [Input("newEnvironmentAccesstype")]
        public Input<string>? NewEnvironmentAccesstype { get; set; }

        /// <summary>
        /// The ID of the Product.
        /// </summary>
        [Input("productId", required: true)]
        public Input<string> ProductId { get; set; } = null!;

        public PermissionGroupArgs()
        {
        }
        public static new PermissionGroupArgs Empty => new PermissionGroupArgs();
    }

    public sealed class PermissionGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Represent the Feature Management permission. Possible values: readOnly, full, custom. Default: custom
        /// </summary>
        [Input("accesstype")]
        public Input<string>? Accesstype { get; set; }

        /// <summary>
        /// Group members can create/update Configs. Default: false.
        /// </summary>
        [Input("canCreateorupdateConfig")]
        public Input<bool>? CanCreateorupdateConfig { get; set; }

        /// <summary>
        /// Group members can create/update Environments. Default: false.
        /// </summary>
        [Input("canCreateorupdateEnvironment")]
        public Input<bool>? CanCreateorupdateEnvironment { get; set; }

        [Input("canCreateorupdateSegment")]
        public Input<bool>? CanCreateorupdateSegment { get; set; }

        /// <summary>
        /// Group members can create/update Feature Flags and Settings. Default: false.
        /// </summary>
        [Input("canCreateorupdateSetting")]
        public Input<bool>? CanCreateorupdateSetting { get; set; }

        /// <summary>
        /// Group members can create/update Tags. Default: false.
        /// </summary>
        [Input("canCreateorupdateTag")]
        public Input<bool>? CanCreateorupdateTag { get; set; }

        /// <summary>
        /// Group members can delete Configs. Default: false.
        /// </summary>
        [Input("canDeleteConfig")]
        public Input<bool>? CanDeleteConfig { get; set; }

        /// <summary>
        /// Group members can delete Environments. Default: false.
        /// </summary>
        [Input("canDeleteEnvironment")]
        public Input<bool>? CanDeleteEnvironment { get; set; }

        [Input("canDeleteSegment")]
        public Input<bool>? CanDeleteSegment { get; set; }

        /// <summary>
        /// Group members can delete Feature Flags and Settings. Default: false.
        /// </summary>
        [Input("canDeleteSetting")]
        public Input<bool>? CanDeleteSetting { get; set; }

        /// <summary>
        /// Group members can delete Tags. Default: false.
        /// </summary>
        [Input("canDeleteTag")]
        public Input<bool>? CanDeleteTag { get; set; }

        /// <summary>
        /// Group members can add and configure integrations. Default: false.
        /// </summary>
        [Input("canManageIntegrations")]
        public Input<bool>? CanManageIntegrations { get; set; }

        /// <summary>
        /// Group members can manage team members. Default: false.
        /// </summary>
        [Input("canManageMembers")]
        public Input<bool>? CanManageMembers { get; set; }

        /// <summary>
        /// Group members can update Product preferences. Default: false.
        /// </summary>
        [Input("canManageProductPreferences")]
        public Input<bool>? CanManageProductPreferences { get; set; }

        /// <summary>
        /// Group members can create/update/delete Webhooks. Default: false.
        /// </summary>
        [Input("canManageWebhook")]
        public Input<bool>? CanManageWebhook { get; set; }

        /// <summary>
        /// Group members can rotate SDK keys. Default: false.
        /// </summary>
        [Input("canRotateSdkkey")]
        public Input<bool>? CanRotateSdkkey { get; set; }

        /// <summary>
        /// Group members can attach/detach Tags to Feature Flags and Settings. Default: false.
        /// </summary>
        [Input("canTagSetting")]
        public Input<bool>? CanTagSetting { get; set; }

        /// <summary>
        /// Group members can use the export/import feature. Default: false.
        /// </summary>
        [Input("canUseExportimport")]
        public Input<bool>? CanUseExportimport { get; set; }

        /// <summary>
        /// Group members has access to audit logs. Default: false.
        /// </summary>
        [Input("canViewProductAuditlog")]
        public Input<bool>? CanViewProductAuditlog { get; set; }

        /// <summary>
        /// Group members has access to product statistics. Default: false.
        /// </summary>
        [Input("canViewProductStatistics")]
        public Input<bool>? CanViewProductStatistics { get; set; }

        /// <summary>
        /// Group members has access to SDK keys. Default: false.
        /// </summary>
        [Input("canViewSdkkey")]
        public Input<bool>? CanViewSdkkey { get; set; }

        [Input("environmentAccesses")]
        private InputMap<string>? _environmentAccesses;

        /// <summary>
        /// The environment specific permissions map block defined as below.
        /// </summary>
        public InputMap<string> EnvironmentAccesses
        {
            get => _environmentAccesses ?? (_environmentAccesses = new InputMap<string>());
            set => _environmentAccesses = value;
        }

        /// <summary>
        /// The name of the Permission Group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly, none. Default: none.
        /// </summary>
        [Input("newEnvironmentAccesstype")]
        public Input<string>? NewEnvironmentAccesstype { get; set; }

        /// <summary>
        /// The ID of the Product.
        /// </summary>
        [Input("productId")]
        public Input<string>? ProductId { get; set; }

        public PermissionGroupState()
        {
        }
        public static new PermissionGroupState Empty => new PermissionGroupState();
    }
}
