{"name":"configcat","displayName":"ConfigCat","version":"5.0.0-alpha.0+dev","description":"A Pulumi package for creating and managing configcat cloud resources.","keywords":["pulumi","configcat","category/cloud"],"homepage":"https://www.pulumi.com","license":"Apache-2.0","attribution":"This Pulumi package is based on the [`configcat` Terraform Provider](https://github.com/configcat/terraform-provider-configcat).","repository":"https://github.com/pulumiverse/pulumi-configcat","logoUrl":"https://raw.githubusercontent.com/pulumiverse/pulumi-configcat/refs/heads/main/docs/configcat-logo.png","pluginDownloadURL":"api://github.com/pulumiverse","publisher":"Pulumiverse","meta":{"moduleFormat":"(.*)(?:/[^/]*)"},"language":{"csharp":{"compatibility":"tfbridge20","rootNamespace":"Pulumiverse","respectSchemaVersion":true},"go":{"importBasePath":"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat","generateResourceContainerTypes":true,"generateExtraInputTypes":true,"respectSchemaVersion":true},"nodejs":{"packageName":"@pulumiverse/configcat","packageDescription":"A Pulumi package for creating and managing configcat cloud resources.","readme":"\u003e This provider is a derived work of the [Terraform Provider](https://github.com/configcat/terraform-provider-configcat)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-configcat` repo](https://github.com/pulumiverse/pulumi-configcat/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-configcat` repo](https://github.com/configcat/terraform-provider-configcat/issues).","devDependencies":{"@types/mime":"^2.0.0","@types/node":"^10.0.0"},"compatibility":"tfbridge20","disableUnionOutputTypes":true,"respectSchemaVersion":true},"python":{"packageName":"pulumiverse_configcat","readme":"\u003e This provider is a derived work of the [Terraform Provider](https://github.com/configcat/terraform-provider-configcat)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-configcat` repo](https://github.com/pulumiverse/pulumi-configcat/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-configcat` repo](https://github.com/configcat/terraform-provider-configcat/issues).","compatibility":"tfbridge20","respectSchemaVersion":true,"pyproject":{"enabled":true}}},"config":{"variables":{"basePath":{"type":"string","description":"ConfigCat Public Management API's `base_path`. Defaults to [https://api.configcat.com](https://api.configcat.com). This\ncan also be sourced from the `CONFIGCAT_BASE_PATH` Environment Variable.\n","defaultInfo":{"environment":["CONFIGCAT_BASE_PATH"]}},"basicAuthPassword":{"type":"string","description":"Get your `basic_auth_password` at [ConfigCat Public API\ncredentials](https://app.configcat.com/my-account/public-api-credentials). This can also be sourced from the\n`CONFIGCAT_BASIC_AUTH_PASSWORD` Environment Variable.\n","defaultInfo":{"environment":["CONFIGCAT_BASIC_AUTH_PASSWORD"]},"secret":true},"basicAuthUsername":{"type":"string","description":"Get your `basic_auth_username` at [ConfigCat Public API\ncredentials](https://app.configcat.com/my-account/public-api-credentials). This can also be sourced from the\n`CONFIGCAT_BASIC_AUTH_USERNAME` Environment Variable.\n","defaultInfo":{"environment":["CONFIGCAT_BASIC_AUTH_USERNAME"]}}}},"types":{"configcat:index/SettingValuePercentageItem:SettingValuePercentageItem":{"properties":{"percentage":{"type":"string","description":"Any [number](https://configcat.com/docs/advanced/targeting/#-value) between 0 and 100 that represents a randomly allocated fraction of your users.\n"},"value":{"type":"string","description":"The exact [value](https://configcat.com/docs/advanced/targeting/#served-value-1) that will be served to the users that fall into that fraction. Type: `string`. It must be compatible with the `setting_type`.\n"}},"type":"object","required":["percentage","value"]},"configcat:index/SettingValueRolloutRule:SettingValueRolloutRule":{"properties":{"comparator":{"type":"string","description":"The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).\n"},"comparisonAttribute":{"type":"string","description":"The [comparison attribute](https://configcat.com/docs/advanced/targeting/#comparison-attribute).\n"},"comparisonValue":{"type":"string","description":"The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).\n"},"segmentComparator":{"type":"string","description":"The segment_comparator. Possible values: isIn, isNotIn.\n"},"segmentId":{"type":"string","description":"The [Segment's](https://configcat.com/docs/advanced/segments) unique identifier.\n"},"value":{"type":"string","description":"The exact [value](https://configcat.com/docs/advanced/targeting/#served-value) that will be served to the users who match the targeting rule. Type: `string`. It must be compatible with the `setting_type`.\n"}},"type":"object","required":["value"],"language":{"nodejs":{"requiredOutputs":["comparator","comparisonAttribute","comparisonValue","segmentComparator","segmentId","value"]}}},"configcat:index/SettingValueV2TargetingRule:SettingValueV2TargetingRule":{"properties":{"conditions":{"type":"array","items":{"$ref":"#/types/configcat:index/SettingValueV2TargetingRuleCondition:SettingValueV2TargetingRuleCondition"},"description":"The conditions that are combined with the AND logical operator.\n"},"percentageOptions":{"type":"array","items":{"$ref":"#/types/configcat:index/SettingValueV2TargetingRulePercentageOption:SettingValueV2TargetingRulePercentageOption"},"description":"The percentage options from where the evaluation process will choose a value based on the flag's percentage evaluation attribute.\n"},"value":{"$ref":"#/types/configcat:index/SettingValueV2TargetingRuleValue:SettingValueV2TargetingRuleValue","description":"Represents the value of a Feature Flag or Setting.\n"}},"type":"object"},"configcat:index/SettingValueV2TargetingRuleCondition:SettingValueV2TargetingRuleCondition":{"properties":{"prerequisiteFlagCondition":{"$ref":"#/types/configcat:index/SettingValueV2TargetingRuleConditionPrerequisiteFlagCondition:SettingValueV2TargetingRuleConditionPrerequisiteFlagCondition","description":"Describes a condition that is based on a prerequisite flag.\n"},"segmentCondition":{"$ref":"#/types/configcat:index/SettingValueV2TargetingRuleConditionSegmentCondition:SettingValueV2TargetingRuleConditionSegmentCondition","description":"Describes a condition that is based on a segment.\n"},"userCondition":{"$ref":"#/types/configcat:index/SettingValueV2TargetingRuleConditionUserCondition:SettingValueV2TargetingRuleConditionUserCondition","description":"Describes a condition that is based on user attributes.\n"}},"type":"object"},"configcat:index/SettingValueV2TargetingRuleConditionPrerequisiteFlagCondition:SettingValueV2TargetingRuleConditionPrerequisiteFlagCondition":{"properties":{"comparator":{"type":"string","description":"Prerequisite flag comparison operator used during the evaluation process. Possible values: `equals`,`doesNotEqual`\n"},"comparisonValue":{"$ref":"#/types/configcat:index/SettingValueV2TargetingRuleConditionPrerequisiteFlagConditionComparisonValue:SettingValueV2TargetingRuleConditionPrerequisiteFlagConditionComparisonValue","description":"Represents the value of a Feature Flag or Setting.\n"},"prerequisiteSettingId":{"type":"string","description":"The prerequisite flag's identifier.\n"}},"type":"object","required":["comparator","comparisonValue","prerequisiteSettingId"]},"configcat:index/SettingValueV2TargetingRuleConditionPrerequisiteFlagConditionComparisonValue:SettingValueV2TargetingRuleConditionPrerequisiteFlagConditionComparisonValue":{"properties":{"boolValue":{"type":"boolean","description":"The boolean representation of the value.\n"},"doubleValue":{"type":"number","description":"The decimal number representation of the value.\n"},"intValue":{"type":"integer","description":"The whole number representation of the value.\n"},"stringValue":{"type":"string","description":"The string representation of the value.\n"}},"type":"object"},"configcat:index/SettingValueV2TargetingRuleConditionSegmentCondition:SettingValueV2TargetingRuleConditionSegmentCondition":{"properties":{"comparator":{"type":"string","description":"The segment comparison operator used during the evaluation process. Possible values: `isIn`,`isNotIn`\n"},"segmentId":{"type":"string","description":"The segment's identifier.\n"}},"type":"object","required":["comparator","segmentId"]},"configcat:index/SettingValueV2TargetingRuleConditionUserCondition:SettingValueV2TargetingRuleConditionUserCondition":{"properties":{"comparator":{"type":"string","description":"The comparison operator which defines the relation between the comparison attribute and the comparison value. For possible values check the [documentation](https://api.configcat.com/docs/index.html#tag/Feature-Flag-and-Setting-values-V2/operation/replace-setting-value-v2).\n"},"comparisonAttribute":{"type":"string","description":"The User Object attribute that the condition is based on.\n"},"comparisonValue":{"$ref":"#/types/configcat:index/SettingValueV2TargetingRuleConditionUserConditionComparisonValue:SettingValueV2TargetingRuleConditionUserConditionComparisonValue","description":"The value that the user object's attribute is compared to.\n"}},"type":"object","required":["comparator","comparisonAttribute","comparisonValue"]},"configcat:index/SettingValueV2TargetingRuleConditionUserConditionComparisonValue:SettingValueV2TargetingRuleConditionUserConditionComparisonValue":{"properties":{"doubleValue":{"type":"number","description":"The number representation of the comparison value.\n"},"listValues":{"type":"array","items":{"$ref":"#/types/configcat:index/SettingValueV2TargetingRuleConditionUserConditionComparisonValueListValue:SettingValueV2TargetingRuleConditionUserConditionComparisonValueListValue"},"description":"The list representation of the comparison value.\n"},"stringValue":{"type":"string","description":"The string representation of the comparison value.\n"}},"type":"object"},"configcat:index/SettingValueV2TargetingRuleConditionUserConditionComparisonValueListValue:SettingValueV2TargetingRuleConditionUserConditionComparisonValueListValue":{"properties":{"hint":{"type":"string","description":"An optional hint for the comparison value.\n"},"value":{"type":"string","description":"The actual comparison value.\n"}},"type":"object","required":["value"]},"configcat:index/SettingValueV2TargetingRulePercentageOption:SettingValueV2TargetingRulePercentageOption":{"properties":{"percentage":{"type":"integer","description":"A number between 0 and 100 that represents a randomly allocated fraction of the users.\n"},"value":{"$ref":"#/types/configcat:index/SettingValueV2TargetingRulePercentageOptionValue:SettingValueV2TargetingRulePercentageOptionValue","description":"Represents the value of a Feature Flag or Setting.\n"}},"type":"object","required":["percentage","value"]},"configcat:index/SettingValueV2TargetingRulePercentageOptionValue:SettingValueV2TargetingRulePercentageOptionValue":{"properties":{"boolValue":{"type":"boolean","description":"The boolean representation of the value.\n"},"doubleValue":{"type":"number","description":"The decimal number representation of the value.\n"},"intValue":{"type":"integer","description":"The whole number representation of the value.\n"},"stringValue":{"type":"string","description":"The string representation of the value.\n"}},"type":"object"},"configcat:index/SettingValueV2TargetingRuleValue:SettingValueV2TargetingRuleValue":{"properties":{"boolValue":{"type":"boolean","description":"The boolean representation of the value.\n"},"doubleValue":{"type":"number","description":"The decimal number representation of the value.\n"},"intValue":{"type":"integer","description":"The whole number representation of the value.\n"},"stringValue":{"type":"string","description":"The string representation of the value.\n"}},"type":"object"},"configcat:index/SettingValueV2Value:SettingValueV2Value":{"properties":{"boolValue":{"type":"boolean","description":"The boolean representation of the value.\n"},"doubleValue":{"type":"number","description":"The decimal number representation of the value.\n"},"intValue":{"type":"integer","description":"The whole number representation of the value.\n"},"stringValue":{"type":"string","description":"The string representation of the value.\n"}},"type":"object"},"configcat:index/WebhookSecureWebhookHeader:WebhookSecureWebhookHeader":{"properties":{"key":{"type":"string","description":"The HTTP header key.\n"},"value":{"type":"string","description":"The HTTP header value.\n","secret":true}},"type":"object","required":["key","value"]},"configcat:index/WebhookWebhookHeader:WebhookWebhookHeader":{"properties":{"key":{"type":"string","description":"The HTTP header key.\n"},"value":{"type":"string","description":"The HTTP header value.\n"}},"type":"object","required":["key","value"]},"configcat:index/getConfigurationsConfig:getConfigurationsConfig":{"properties":{"configId":{"type":"string","description":"The unique Config ID.\n"},"description":{"type":"string","description":"The description of the Config.\n"},"evaluationVersion":{"type":"string","description":"The evaluation version of the Config. Possible values: `v1`|`v2`\n"},"name":{"type":"string","description":"The name of the Config.\n"},"order":{"type":"integer","description":"The order of the Config within a Product (zero-based).\n"}},"type":"object","required":["configId","description","evaluationVersion","name","order"],"language":{"nodejs":{"requiredInputs":[]}}},"configcat:index/getEnvironmentsEnvironment:getEnvironmentsEnvironment":{"properties":{"color":{"type":"string","description":"The color of the Environment.\n"},"description":{"type":"string","description":"The description of the Environment.\n"},"environmentId":{"type":"string","description":"The unique Environment ID.\n"},"name":{"type":"string","description":"The name of the Environment.\n"},"order":{"type":"integer","description":"The order of the Environment within a Product (zero-based).\n"}},"type":"object","required":["color","description","environmentId","name","order"],"language":{"nodejs":{"requiredInputs":[]}}},"configcat:index/getOrganizationsOrganization:getOrganizationsOrganization":{"properties":{"name":{"type":"string","description":"The name of the Organization.\n"},"organizationId":{"type":"string","description":"The unique Organization ID.\n"}},"type":"object","required":["name","organizationId"],"language":{"nodejs":{"requiredInputs":[]}}},"configcat:index/getPermissionGroupsPermissionGroup:getPermissionGroupsPermissionGroup":{"properties":{"accesstype":{"type":"string","description":"Represent the Feature Management permission. Possible values: readOnly, full, custom\n"},"canCreateorupdateConfig":{"type":"boolean","description":"Group members can create/update Configs.\n"},"canCreateorupdateEnvironment":{"type":"boolean","description":"Group members can create/update Environments.\n"},"canCreateorupdateSegment":{"type":"boolean","description":"Group members can create/update Segments.\n"},"canCreateorupdateSetting":{"type":"boolean","description":"Group members can create/update Feature Flags and Settings.\n"},"canCreateorupdateTag":{"type":"boolean","description":"Group members can create/update Tags.\n"},"canDeleteConfig":{"type":"boolean","description":"Group members can delete Configs.\n"},"canDeleteEnvironment":{"type":"boolean","description":"Group members can delete Environments.\n"},"canDeleteSegment":{"type":"boolean","description":"Group members can delete Segments.\n"},"canDeleteSetting":{"type":"boolean","description":"Group members can delete Feature Flags and Settings.\n"},"canDeleteTag":{"type":"boolean","description":"Group members can delete Tags.\n"},"canDisable2fa":{"type":"boolean","description":"Group members can disable two-factor authentication for other members.\n"},"canManageIntegrations":{"type":"boolean","description":"Group members can add and configure integrations.\n"},"canManageMembers":{"type":"boolean","description":"Group members can manage team members.\n"},"canManageProductPreferences":{"type":"boolean","description":"Group members can update Product preferences.\n"},"canManageWebhook":{"type":"boolean","description":"Group members can create/update/delete Webhooks.\n"},"canRotateSdkkey":{"type":"boolean","description":"Group members can rotate SDK keys.\n"},"canTagSetting":{"type":"boolean","description":"Group members can attach/detach Tags to Feature Flags and Settings.\n"},"canUseExportimport":{"type":"boolean","description":"Group members can use the export/import feature.\n"},"canViewProductAuditlog":{"type":"boolean","description":"Group members has access to audit logs.\n"},"canViewProductStatistics":{"type":"boolean","description":"Group members has access to product statistics.\n"},"canViewSdkkey":{"type":"boolean","description":"Group members has access to SDK keys.\n"},"environmentAccesses":{"type":"object","additionalProperties":{"type":"string"},"description":"The environment specific permissions map block. Keys are the Environment IDs and the values represent the environment specific Feature Management permission. Possible values: full, readOnly\n"},"name":{"type":"string","description":"The name of the Permission Group.\n"},"newEnvironmentAccesstype":{"type":"string","description":"Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly, none\n"},"permissionGroupId":{"type":"integer","description":"The unique Permission Group ID.\n"}},"type":"object","required":["accesstype","canCreateorupdateConfig","canCreateorupdateEnvironment","canCreateorupdateSegment","canCreateorupdateSetting","canCreateorupdateTag","canDeleteConfig","canDeleteEnvironment","canDeleteSegment","canDeleteSetting","canDeleteTag","canDisable2fa","canManageIntegrations","canManageMembers","canManageProductPreferences","canManageWebhook","canRotateSdkkey","canTagSetting","canUseExportimport","canViewProductAuditlog","canViewProductStatistics","canViewSdkkey","environmentAccesses","name","newEnvironmentAccesstype","permissionGroupId"],"language":{"nodejs":{"requiredInputs":[]}}},"configcat:index/getProductsProduct:getProductsProduct":{"properties":{"description":{"type":"string","description":"The description of the Product.\n"},"name":{"type":"string","description":"The name of the Product.\n"},"order":{"type":"integer","description":"The order of the Product within a Product (zero-based).\n"},"productId":{"type":"string","description":"The unique Product ID.\n"}},"type":"object","required":["description","name","order","productId"],"language":{"nodejs":{"requiredInputs":[]}}},"configcat:index/getSegmentsSegment:getSegmentsSegment":{"properties":{"description":{"type":"string","description":"The description of the Segment.\n"},"name":{"type":"string","description":"The name of the Segment.\n"},"segmentId":{"type":"string","description":"The unique Segment ID.\n"}},"type":"object","required":["description","name","segmentId"],"language":{"nodejs":{"requiredInputs":[]}}},"configcat:index/getSettingsSetting:getSettingsSetting":{"properties":{"hint":{"type":"string","description":"The hint of the Feature Flag or Setting.\n"},"key":{"type":"string","description":"The key of the Feature Flag or Setting.\n"},"name":{"type":"string","description":"The name of the Feature Flag or Setting.\n"},"order":{"type":"integer","description":"The order of the Feature Flag or Setting within a Config (zero-based).\n"},"settingId":{"type":"string","description":"The unique Feature Flag or Setting ID.\n"},"settingType":{"type":"string","description":"The Feature Flag or Setting's type. Available values: `boolean`|`string`|`int`|`double`.\n"}},"type":"object","required":["hint","key","name","order","settingId","settingType"],"language":{"nodejs":{"requiredInputs":[]}}},"configcat:index/getTagsTag:getTagsTag":{"properties":{"color":{"type":"string","description":"The color of the Tag.\n"},"name":{"type":"string","description":"The name of the Tag.\n"},"tagId":{"type":"string","description":"The unique Tag ID.\n"}},"type":"object","required":["color","name","tagId"],"language":{"nodejs":{"requiredInputs":[]}}}},"provider":{"description":"The provider type for the configcat package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n","properties":{"basePath":{"type":"string","description":"ConfigCat Public Management API's `base_path`. Defaults to [https://api.configcat.com](https://api.configcat.com). This\ncan also be sourced from the `CONFIGCAT_BASE_PATH` Environment Variable.\n"},"basicAuthPassword":{"type":"string","description":"Get your `basic_auth_password` at [ConfigCat Public API\ncredentials](https://app.configcat.com/my-account/public-api-credentials). This can also be sourced from the\n`CONFIGCAT_BASIC_AUTH_PASSWORD` Environment Variable.\n","secret":true},"basicAuthUsername":{"type":"string","description":"Get your `basic_auth_username` at [ConfigCat Public API\ncredentials](https://app.configcat.com/my-account/public-api-credentials). This can also be sourced from the\n`CONFIGCAT_BASIC_AUTH_USERNAME` Environment Variable.\n"}},"inputProperties":{"basePath":{"type":"string","description":"ConfigCat Public Management API's `base_path`. Defaults to [https://api.configcat.com](https://api.configcat.com). This\ncan also be sourced from the `CONFIGCAT_BASE_PATH` Environment Variable.\n","defaultInfo":{"environment":["CONFIGCAT_BASE_PATH"]}},"basicAuthPassword":{"type":"string","description":"Get your `basic_auth_password` at [ConfigCat Public API\ncredentials](https://app.configcat.com/my-account/public-api-credentials). This can also be sourced from the\n`CONFIGCAT_BASIC_AUTH_PASSWORD` Environment Variable.\n","defaultInfo":{"environment":["CONFIGCAT_BASIC_AUTH_PASSWORD"]},"secret":true},"basicAuthUsername":{"type":"string","description":"Get your `basic_auth_username` at [ConfigCat Public API\ncredentials](https://app.configcat.com/my-account/public-api-credentials). This can also be sourced from the\n`CONFIGCAT_BASIC_AUTH_USERNAME` Environment Variable.\n","defaultInfo":{"environment":["CONFIGCAT_BASIC_AUTH_USERNAME"]}}}},"resources":{"configcat:index/configuration:Configuration":{"description":"Creates and manages a **Config**. [What is a Config in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst config = new pulumi.Config();\nconst productId = config.require(\"productId\");\nconst myConfig = new configcat.Configuration(\"my_config\", {\n    productId: productId,\n    name: \"My config\",\n    description: \"My config description\",\n    order: 0,\n    evaluationVersion: \"v1\",\n});\nexport const configId = myConfig.id;\n```\n```python\nimport pulumi\nimport pulumiverse_configcat as configcat\n\nconfig = pulumi.Config()\nproduct_id = config.require(\"productId\")\nmy_config = configcat.Configuration(\"my_config\",\n    product_id=product_id,\n    name=\"My config\",\n    description=\"My config description\",\n    order=0,\n    evaluation_version=\"v1\")\npulumi.export(\"configId\", my_config.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var productId = config.Require(\"productId\");\n    var myConfig = new Configcat.Configuration(\"my_config\", new()\n    {\n        ProductId = productId,\n        Name = \"My config\",\n        Description = \"My config description\",\n        Order = 0,\n        EvaluationVersion = \"v1\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"configId\"] = myConfig.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tproductId := cfg.Require(\"productId\")\n\t\tmyConfig, err := configcat.NewConfiguration(ctx, \"my_config\", \u0026configcat.ConfigurationArgs{\n\t\t\tProductId:         pulumi.String(productId),\n\t\t\tName:              pulumi.String(\"My config\"),\n\t\t\tDescription:       pulumi.String(\"My config description\"),\n\t\t\tOrder:             pulumi.Int(0),\n\t\t\tEvaluationVersion: pulumi.String(\"v1\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"configId\", myConfig.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.Configuration;\nimport com.pulumi.configcat.ConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var productId = config.get(\"productId\");\n        var myConfig = new Configuration(\"myConfig\", ConfigurationArgs.builder()\n            .productId(productId)\n            .name(\"My config\")\n            .description(\"My config description\")\n            .order(0)\n            .evaluationVersion(\"v1\")\n            .build());\n\n        ctx.export(\"configId\", myConfig.id());\n    }\n}\n```\n```yaml\nconfiguration:\n  productId:\n    type: string\nresources:\n  myConfig:\n    type: configcat:Configuration\n    name: my_config\n    properties:\n      productId: ${productId}\n      name: My config\n      description: My config description\n      order: 0\n      evaluationVersion: v1\noutputs:\n  configId: ${myConfig.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nConfigs can be imported using the ConfigId. Get the ConfigId using the [List Configs API](https://api.configcat.com/docs/#tag/Configs/operation/get-configs) for example.\n\n```sh\n$ pulumi import configcat:index/configuration:Configuration example 08d86d63-2726-47cd-8bfc-59608ecb91e2\n```\n\n","properties":{"description":{"type":"string","description":"The description of the Config.\n"},"evaluationVersion":{"type":"string","description":"The evaluation version of the Config. Possible values: `v1`, `v2`. Default value: `v1`. Using `v2` enables the new features of [Config V2](https://configcat.com/docs/advanced/config-v2).\n"},"name":{"type":"string","description":"The name of the Config.\n"},"order":{"type":"integer","description":"The order of the Config within a Product (zero-based). If multiple Configs has the same order, they are displayed in alphabetical order.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"required":["description","evaluationVersion","name","order","productId"],"inputProperties":{"description":{"type":"string","description":"The description of the Config.\n"},"evaluationVersion":{"type":"string","description":"The evaluation version of the Config. Possible values: `v1`, `v2`. Default value: `v1`. Using `v2` enables the new features of [Config V2](https://configcat.com/docs/advanced/config-v2).\n"},"name":{"type":"string","description":"The name of the Config.\n"},"order":{"type":"integer","description":"The order of the Config within a Product (zero-based). If multiple Configs has the same order, they are displayed in alphabetical order.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"requiredInputs":["order","productId"],"stateInputs":{"description":"Input properties used for looking up and filtering Configuration resources.\n","properties":{"description":{"type":"string","description":"The description of the Config.\n"},"evaluationVersion":{"type":"string","description":"The evaluation version of the Config. Possible values: `v1`, `v2`. Default value: `v1`. Using `v2` enables the new features of [Config V2](https://configcat.com/docs/advanced/config-v2).\n"},"name":{"type":"string","description":"The name of the Config.\n"},"order":{"type":"integer","description":"The order of the Config within a Product (zero-based). If multiple Configs has the same order, they are displayed in alphabetical order.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"type":"object"}},"configcat:index/environment:Environment":{"description":"Creates and manages an **Environment**. [What is an Environment in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst config = new pulumi.Config();\nconst productId = config.require(\"productId\");\nconst myEnvironment = new configcat.Environment(\"my_environment\", {\n    productId: productId,\n    name: \"Staging\",\n    description: \"Staging description\",\n    color: \"blue\",\n    order: 0,\n});\nexport const environmentId = myEnvironment.id;\n```\n```python\nimport pulumi\nimport pulumiverse_configcat as configcat\n\nconfig = pulumi.Config()\nproduct_id = config.require(\"productId\")\nmy_environment = configcat.Environment(\"my_environment\",\n    product_id=product_id,\n    name=\"Staging\",\n    description=\"Staging description\",\n    color=\"blue\",\n    order=0)\npulumi.export(\"environmentId\", my_environment.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var productId = config.Require(\"productId\");\n    var myEnvironment = new Configcat.Environment(\"my_environment\", new()\n    {\n        ProductId = productId,\n        Name = \"Staging\",\n        Description = \"Staging description\",\n        Color = \"blue\",\n        Order = 0,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"environmentId\"] = myEnvironment.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tproductId := cfg.Require(\"productId\")\n\t\tmyEnvironment, err := configcat.NewEnvironment(ctx, \"my_environment\", \u0026configcat.EnvironmentArgs{\n\t\t\tProductId:   pulumi.String(productId),\n\t\t\tName:        pulumi.String(\"Staging\"),\n\t\t\tDescription: pulumi.String(\"Staging description\"),\n\t\t\tColor:       pulumi.String(\"blue\"),\n\t\t\tOrder:       pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"environmentId\", myEnvironment.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.Environment;\nimport com.pulumi.configcat.EnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var productId = config.get(\"productId\");\n        var myEnvironment = new Environment(\"myEnvironment\", EnvironmentArgs.builder()\n            .productId(productId)\n            .name(\"Staging\")\n            .description(\"Staging description\")\n            .color(\"blue\")\n            .order(0)\n            .build());\n\n        ctx.export(\"environmentId\", myEnvironment.id());\n    }\n}\n```\n```yaml\nconfiguration:\n  productId:\n    type: string\nresources:\n  myEnvironment:\n    type: configcat:Environment\n    name: my_environment\n    properties:\n      productId: ${productId}\n      name: Staging\n      description: Staging description\n      color: blue\n      order: 0\noutputs:\n  environmentId: ${myEnvironment.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nEnvironments can be imported using the EnvironmentId. Get the EnvironmentId using the [List Environments API](https://api.configcat.com/docs/#tag/Environments/operation/get-environments) for example.\n\n```sh\n$ pulumi import configcat:index/environment:Environment example 08d86d63-2726-47cd-8bfc-59608ecb91e2\n```\n\n","properties":{"color":{"type":"string","description":"The color of the Environment.\n"},"description":{"type":"string","description":"The description of the Environment.\n"},"name":{"type":"string","description":"The name of the Environment.\n"},"order":{"type":"integer","description":"The order of the Environment within a Product (zero-based). If multiple Environments has the same order, they are displayed in alphabetical order.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"required":["color","description","name","order","productId"],"inputProperties":{"color":{"type":"string","description":"The color of the Environment.\n"},"description":{"type":"string","description":"The description of the Environment.\n"},"name":{"type":"string","description":"The name of the Environment.\n"},"order":{"type":"integer","description":"The order of the Environment within a Product (zero-based). If multiple Environments has the same order, they are displayed in alphabetical order.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"requiredInputs":["order","productId"],"stateInputs":{"description":"Input properties used for looking up and filtering Environment resources.\n","properties":{"color":{"type":"string","description":"The color of the Environment.\n"},"description":{"type":"string","description":"The description of the Environment.\n"},"name":{"type":"string","description":"The name of the Environment.\n"},"order":{"type":"integer","description":"The order of the Environment within a Product (zero-based). If multiple Environments has the same order, they are displayed in alphabetical order.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"type":"object"}},"configcat:index/integration:Integration":{"description":"Creates and manages an **Integration**. [Read more about Integrations in ConfigCat](https://configcat.com/docs/integrations/overview/)\n\n## Import\n\nIntegrations can be imported using the IntegrationId. Get the IntegrationId using the [List Integrations API](https://api.configcat.com/docs/index.html#tag/Integrations/operation/get-integrations) for example.\n\n```sh\n$ pulumi import configcat:index/integration:Integration example 08d86d63-2726-47cd-8bfc-59608ecb91e2\n```\n\n","properties":{"configs":{"type":"array","items":{"type":"string"},"description":"List of Config IDs that are connected with this Integration. If the list is empty, all of the Configs are connected.\n"},"environments":{"type":"array","items":{"type":"string"},"description":"List of Environment IDs that are connected with this Integration. If the list is empty, all of the Environments are connected.\n"},"integrationType":{"type":"string","description":"The integration type of the Integration. Possible values: `dataDog`, `slack`, `amplitude`, `mixPanel`, `segment`, `pubNub`.\n"},"name":{"type":"string","description":"The name of the Integration.\n"},"parameters":{"type":"object","additionalProperties":{"type":"string"},"description":"Parameters of the integration. The Parameters dictionary differs for each IntegrationType. See available options per integration type at the Example usage section.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"required":["configs","environments","integrationType","name","parameters","productId"],"inputProperties":{"configs":{"type":"array","items":{"type":"string"},"description":"List of Config IDs that are connected with this Integration. If the list is empty, all of the Configs are connected.\n"},"environments":{"type":"array","items":{"type":"string"},"description":"List of Environment IDs that are connected with this Integration. If the list is empty, all of the Environments are connected.\n"},"integrationType":{"type":"string","description":"The integration type of the Integration. Possible values: `dataDog`, `slack`, `amplitude`, `mixPanel`, `segment`, `pubNub`.\n"},"name":{"type":"string","description":"The name of the Integration.\n"},"parameters":{"type":"object","additionalProperties":{"type":"string"},"description":"Parameters of the integration. The Parameters dictionary differs for each IntegrationType. See available options per integration type at the Example usage section.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"requiredInputs":["integrationType","productId"],"stateInputs":{"description":"Input properties used for looking up and filtering Integration resources.\n","properties":{"configs":{"type":"array","items":{"type":"string"},"description":"List of Config IDs that are connected with this Integration. If the list is empty, all of the Configs are connected.\n"},"environments":{"type":"array","items":{"type":"string"},"description":"List of Environment IDs that are connected with this Integration. If the list is empty, all of the Environments are connected.\n"},"integrationType":{"type":"string","description":"The integration type of the Integration. Possible values: `dataDog`, `slack`, `amplitude`, `mixPanel`, `segment`, `pubNub`.\n"},"name":{"type":"string","description":"The name of the Integration.\n"},"parameters":{"type":"object","additionalProperties":{"type":"string"},"description":"Parameters of the integration. The Parameters dictionary differs for each IntegrationType. See available options per integration type at the Example usage section.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"type":"object"}},"configcat:index/permissionGroup:PermissionGroup":{"description":"Creates and manages a **Permission Group**. [What is a Permission Group in ConfigCat?](https://configcat.com/docs/advanced/team-management/team-management-basics/#permissions--permission-groups-product-level)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst config = new pulumi.Config();\nconst productId = config.require(\"productId\");\nconst testEnvironmentId = config.require(\"testEnvironmentId\");\nconst productuctionEnvironmentId = config.require(\"productuctionEnvironmentId\");\nconst adminPermissionGroup = new configcat.PermissionGroup(\"admin_permission_group\", {\n    productId: productId,\n    name: \"Administrators\",\n    accesstype: \"full\",\n    canManageMembers: true,\n    canCreateorupdateConfig: true,\n    canDeleteConfig: true,\n    canCreateorupdateEnvironment: true,\n    canDeleteEnvironment: true,\n    canCreateorupdateSetting: true,\n    canTagSetting: true,\n    canDeleteSetting: true,\n    canCreateorupdateTag: true,\n    canDeleteTag: true,\n    canManageWebhook: true,\n    canUseExportimport: true,\n    canManageProductPreferences: true,\n    canManageIntegrations: true,\n    canViewSdkkey: true,\n    canRotateSdkkey: true,\n    canCreateorupdateSegment: true,\n    canDeleteSegment: true,\n    canViewProductAuditlog: true,\n    canViewProductStatistics: true,\n});\nconst customPermissionGroup = new configcat.PermissionGroup(\"custom_permission_group\", {\n    productId: productId,\n    name: \"Read only except Test environment\",\n    accesstype: \"custom\",\n    environmentAccesses: {\n        [testEnvironmentId]: \"full\",\n        [productuctionEnvironmentId]: \"readOnly\",\n    },\n});\nexport const adminPermissionGroupId = adminPermissionGroup.id;\nexport const customPermissionGroupId = customPermissionGroup.id;\n```\n```python\nimport pulumi\nimport pulumiverse_configcat as configcat\n\nconfig = pulumi.Config()\nproduct_id = config.require(\"productId\")\ntest_environment_id = config.require(\"testEnvironmentId\")\nproductuction_environment_id = config.require(\"productuctionEnvironmentId\")\nadmin_permission_group = configcat.PermissionGroup(\"admin_permission_group\",\n    product_id=product_id,\n    name=\"Administrators\",\n    accesstype=\"full\",\n    can_manage_members=True,\n    can_createorupdate_config=True,\n    can_delete_config=True,\n    can_createorupdate_environment=True,\n    can_delete_environment=True,\n    can_createorupdate_setting=True,\n    can_tag_setting=True,\n    can_delete_setting=True,\n    can_createorupdate_tag=True,\n    can_delete_tag=True,\n    can_manage_webhook=True,\n    can_use_exportimport=True,\n    can_manage_product_preferences=True,\n    can_manage_integrations=True,\n    can_view_sdkkey=True,\n    can_rotate_sdkkey=True,\n    can_createorupdate_segment=True,\n    can_delete_segment=True,\n    can_view_product_auditlog=True,\n    can_view_product_statistics=True)\ncustom_permission_group = configcat.PermissionGroup(\"custom_permission_group\",\n    product_id=product_id,\n    name=\"Read only except Test environment\",\n    accesstype=\"custom\",\n    environment_accesses={\n        test_environment_id: \"full\",\n        productuction_environment_id: \"readOnly\",\n    })\npulumi.export(\"adminPermissionGroupId\", admin_permission_group.id)\npulumi.export(\"customPermissionGroupId\", custom_permission_group.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var productId = config.Require(\"productId\");\n    var testEnvironmentId = config.Require(\"testEnvironmentId\");\n    var productuctionEnvironmentId = config.Require(\"productuctionEnvironmentId\");\n    var adminPermissionGroup = new Configcat.PermissionGroup(\"admin_permission_group\", new()\n    {\n        ProductId = productId,\n        Name = \"Administrators\",\n        Accesstype = \"full\",\n        CanManageMembers = true,\n        CanCreateorupdateConfig = true,\n        CanDeleteConfig = true,\n        CanCreateorupdateEnvironment = true,\n        CanDeleteEnvironment = true,\n        CanCreateorupdateSetting = true,\n        CanTagSetting = true,\n        CanDeleteSetting = true,\n        CanCreateorupdateTag = true,\n        CanDeleteTag = true,\n        CanManageWebhook = true,\n        CanUseExportimport = true,\n        CanManageProductPreferences = true,\n        CanManageIntegrations = true,\n        CanViewSdkkey = true,\n        CanRotateSdkkey = true,\n        CanCreateorupdateSegment = true,\n        CanDeleteSegment = true,\n        CanViewProductAuditlog = true,\n        CanViewProductStatistics = true,\n    });\n\n    var customPermissionGroup = new Configcat.PermissionGroup(\"custom_permission_group\", new()\n    {\n        ProductId = productId,\n        Name = \"Read only except Test environment\",\n        Accesstype = \"custom\",\n        EnvironmentAccesses = \n        {\n            { testEnvironmentId, \"full\" },\n            { productuctionEnvironmentId, \"readOnly\" },\n        },\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"adminPermissionGroupId\"] = adminPermissionGroup.Id,\n        [\"customPermissionGroupId\"] = customPermissionGroup.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tproductId := cfg.Require(\"productId\")\n\t\ttestEnvironmentId := cfg.Require(\"testEnvironmentId\")\n\t\tproductuctionEnvironmentId := cfg.Require(\"productuctionEnvironmentId\")\n\t\tadminPermissionGroup, err := configcat.NewPermissionGroup(ctx, \"admin_permission_group\", \u0026configcat.PermissionGroupArgs{\n\t\t\tProductId:                    pulumi.String(productId),\n\t\t\tName:                         pulumi.String(\"Administrators\"),\n\t\t\tAccesstype:                   pulumi.String(\"full\"),\n\t\t\tCanManageMembers:             pulumi.Bool(true),\n\t\t\tCanCreateorupdateConfig:      pulumi.Bool(true),\n\t\t\tCanDeleteConfig:              pulumi.Bool(true),\n\t\t\tCanCreateorupdateEnvironment: pulumi.Bool(true),\n\t\t\tCanDeleteEnvironment:         pulumi.Bool(true),\n\t\t\tCanCreateorupdateSetting:     pulumi.Bool(true),\n\t\t\tCanTagSetting:                pulumi.Bool(true),\n\t\t\tCanDeleteSetting:             pulumi.Bool(true),\n\t\t\tCanCreateorupdateTag:         pulumi.Bool(true),\n\t\t\tCanDeleteTag:                 pulumi.Bool(true),\n\t\t\tCanManageWebhook:             pulumi.Bool(true),\n\t\t\tCanUseExportimport:           pulumi.Bool(true),\n\t\t\tCanManageProductPreferences:  pulumi.Bool(true),\n\t\t\tCanManageIntegrations:        pulumi.Bool(true),\n\t\t\tCanViewSdkkey:                pulumi.Bool(true),\n\t\t\tCanRotateSdkkey:              pulumi.Bool(true),\n\t\t\tCanCreateorupdateSegment:     pulumi.Bool(true),\n\t\t\tCanDeleteSegment:             pulumi.Bool(true),\n\t\t\tCanViewProductAuditlog:       pulumi.Bool(true),\n\t\t\tCanViewProductStatistics:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcustomPermissionGroup, err := configcat.NewPermissionGroup(ctx, \"custom_permission_group\", \u0026configcat.PermissionGroupArgs{\n\t\t\tProductId:  pulumi.String(productId),\n\t\t\tName:       pulumi.String(\"Read only except Test environment\"),\n\t\t\tAccesstype: pulumi.String(\"custom\"),\n\t\t\tEnvironmentAccesses: pulumi.StringMap{\n\t\t\t\ttestEnvironmentId:          pulumi.String(\"full\"),\n\t\t\t\tproductuctionEnvironmentId: pulumi.String(\"readOnly\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"adminPermissionGroupId\", adminPermissionGroup.ID())\n\t\tctx.Export(\"customPermissionGroupId\", customPermissionGroup.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.PermissionGroup;\nimport com.pulumi.configcat.PermissionGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var productId = config.get(\"productId\");\n        final var testEnvironmentId = config.get(\"testEnvironmentId\");\n        final var productuctionEnvironmentId = config.get(\"productuctionEnvironmentId\");\n        var adminPermissionGroup = new PermissionGroup(\"adminPermissionGroup\", PermissionGroupArgs.builder()\n            .productId(productId)\n            .name(\"Administrators\")\n            .accesstype(\"full\")\n            .canManageMembers(true)\n            .canCreateorupdateConfig(true)\n            .canDeleteConfig(true)\n            .canCreateorupdateEnvironment(true)\n            .canDeleteEnvironment(true)\n            .canCreateorupdateSetting(true)\n            .canTagSetting(true)\n            .canDeleteSetting(true)\n            .canCreateorupdateTag(true)\n            .canDeleteTag(true)\n            .canManageWebhook(true)\n            .canUseExportimport(true)\n            .canManageProductPreferences(true)\n            .canManageIntegrations(true)\n            .canViewSdkkey(true)\n            .canRotateSdkkey(true)\n            .canCreateorupdateSegment(true)\n            .canDeleteSegment(true)\n            .canViewProductAuditlog(true)\n            .canViewProductStatistics(true)\n            .build());\n\n        var customPermissionGroup = new PermissionGroup(\"customPermissionGroup\", PermissionGroupArgs.builder()\n            .productId(productId)\n            .name(\"Read only except Test environment\")\n            .accesstype(\"custom\")\n            .environmentAccesses(Map.ofEntries(\n                Map.entry(testEnvironmentId, \"full\"),\n                Map.entry(productuctionEnvironmentId, \"readOnly\")\n            ))\n            .build());\n\n        ctx.export(\"adminPermissionGroupId\", adminPermissionGroup.id());\n        ctx.export(\"customPermissionGroupId\", customPermissionGroup.id());\n    }\n}\n```\n```yaml\nconfiguration:\n  productId:\n    type: string\n  testEnvironmentId:\n    type: string\n  productuctionEnvironmentId:\n    type: string\nresources:\n  adminPermissionGroup:\n    type: configcat:PermissionGroup\n    name: admin_permission_group\n    properties:\n      productId: ${productId}\n      name: Administrators\n      accesstype: full\n      canManageMembers: true\n      canCreateorupdateConfig: true\n      canDeleteConfig: true\n      canCreateorupdateEnvironment: true\n      canDeleteEnvironment: true\n      canCreateorupdateSetting: true\n      canTagSetting: true\n      canDeleteSetting: true\n      canCreateorupdateTag: true\n      canDeleteTag: true\n      canManageWebhook: true\n      canUseExportimport: true\n      canManageProductPreferences: true\n      canManageIntegrations: true\n      canViewSdkkey: true\n      canRotateSdkkey: true\n      canCreateorupdateSegment: true\n      canDeleteSegment: true\n      canViewProductAuditlog: true\n      canViewProductStatistics: true\n  customPermissionGroup:\n    type: configcat:PermissionGroup\n    name: custom_permission_group\n    properties:\n      productId: ${productId}\n      name: Read only except Test environment\n      accesstype: custom\n      environmentAccesses:\n        ${testEnvironmentId}: full\n        ${productuctionEnvironmentId}: readOnly\noutputs:\n  adminPermissionGroupId: ${adminPermissionGroup.id}\n  customPermissionGroupId: ${customPermissionGroup.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nPermission Groups can be imported using the PermissionGroupId. Get the PermissionGroupId using the [List Permission Groups API](https://api.configcat.com/docs/#tag/Permission-Groups/operation/get-permission-groups) for example.\n\n```sh\n$ pulumi import configcat:index/permissionGroup:PermissionGroup example 123\n```\n\n","properties":{"accesstype":{"type":"string","description":"Represent the Feature Management permission. Possible values: readOnly, full, custom\n"},"canCreateorupdateConfig":{"type":"boolean","description":"Group members can create/update Configs.\n"},"canCreateorupdateEnvironment":{"type":"boolean","description":"Group members can create/update Environments.\n"},"canCreateorupdateSegment":{"type":"boolean","description":"Group members can create/update Segments.\n"},"canCreateorupdateSetting":{"type":"boolean","description":"Group members can create/update Feature Flags and Settings.\n"},"canCreateorupdateTag":{"type":"boolean","description":"Group members can create/update Tags.\n"},"canDeleteConfig":{"type":"boolean","description":"Group members can delete Configs.\n"},"canDeleteEnvironment":{"type":"boolean","description":"Group members can delete Environments.\n"},"canDeleteSegment":{"type":"boolean","description":"Group members can delete Segments.\n"},"canDeleteSetting":{"type":"boolean","description":"Group members can delete Feature Flags and Settings.\n"},"canDeleteTag":{"type":"boolean","description":"Group members can delete Tags.\n"},"canDisable2fa":{"type":"boolean","description":"Group members can disable two-factor authentication for other members.\n"},"canManageIntegrations":{"type":"boolean","description":"Group members can add and configure integrations.\n"},"canManageMembers":{"type":"boolean","description":"Group members can manage team members.\n"},"canManageProductPreferences":{"type":"boolean","description":"Group members can update Product preferences.\n"},"canManageWebhook":{"type":"boolean","description":"Group members can create/update/delete Webhooks.\n"},"canRotateSdkkey":{"type":"boolean","description":"Group members can rotate SDK keys.\n"},"canTagSetting":{"type":"boolean","description":"Group members can attach/detach Tags to Feature Flags and Settings.\n"},"canUseExportimport":{"type":"boolean","description":"Group members can use the export/import feature.\n"},"canViewProductAuditlog":{"type":"boolean","description":"Group members has access to audit logs.\n"},"canViewProductStatistics":{"type":"boolean","description":"Group members has access to product statistics.\n"},"canViewSdkkey":{"type":"boolean","description":"Group members has access to SDK keys.\n"},"environmentAccesses":{"type":"object","additionalProperties":{"type":"string"},"description":"The environment specific permissions map block. Keys are the Environment IDs and the values represent the environment specific Feature Management permission. Possible values: full, readOnly\n"},"name":{"type":"string","description":"The name of the Permission Group.\n"},"newEnvironmentAccesstype":{"type":"string","description":"Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly, none\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"required":["accesstype","canCreateorupdateConfig","canCreateorupdateEnvironment","canCreateorupdateSegment","canCreateorupdateSetting","canCreateorupdateTag","canDeleteConfig","canDeleteEnvironment","canDeleteSegment","canDeleteSetting","canDeleteTag","canDisable2fa","canManageIntegrations","canManageMembers","canManageProductPreferences","canManageWebhook","canRotateSdkkey","canTagSetting","canUseExportimport","canViewProductAuditlog","canViewProductStatistics","canViewSdkkey","environmentAccesses","name","newEnvironmentAccesstype","productId"],"inputProperties":{"accesstype":{"type":"string","description":"Represent the Feature Management permission. Possible values: readOnly, full, custom\n"},"canCreateorupdateConfig":{"type":"boolean","description":"Group members can create/update Configs.\n"},"canCreateorupdateEnvironment":{"type":"boolean","description":"Group members can create/update Environments.\n"},"canCreateorupdateSegment":{"type":"boolean","description":"Group members can create/update Segments.\n"},"canCreateorupdateSetting":{"type":"boolean","description":"Group members can create/update Feature Flags and Settings.\n"},"canCreateorupdateTag":{"type":"boolean","description":"Group members can create/update Tags.\n"},"canDeleteConfig":{"type":"boolean","description":"Group members can delete Configs.\n"},"canDeleteEnvironment":{"type":"boolean","description":"Group members can delete Environments.\n"},"canDeleteSegment":{"type":"boolean","description":"Group members can delete Segments.\n"},"canDeleteSetting":{"type":"boolean","description":"Group members can delete Feature Flags and Settings.\n"},"canDeleteTag":{"type":"boolean","description":"Group members can delete Tags.\n"},"canDisable2fa":{"type":"boolean","description":"Group members can disable two-factor authentication for other members.\n"},"canManageIntegrations":{"type":"boolean","description":"Group members can add and configure integrations.\n"},"canManageMembers":{"type":"boolean","description":"Group members can manage team members.\n"},"canManageProductPreferences":{"type":"boolean","description":"Group members can update Product preferences.\n"},"canManageWebhook":{"type":"boolean","description":"Group members can create/update/delete Webhooks.\n"},"canRotateSdkkey":{"type":"boolean","description":"Group members can rotate SDK keys.\n"},"canTagSetting":{"type":"boolean","description":"Group members can attach/detach Tags to Feature Flags and Settings.\n"},"canUseExportimport":{"type":"boolean","description":"Group members can use the export/import feature.\n"},"canViewProductAuditlog":{"type":"boolean","description":"Group members has access to audit logs.\n"},"canViewProductStatistics":{"type":"boolean","description":"Group members has access to product statistics.\n"},"canViewSdkkey":{"type":"boolean","description":"Group members has access to SDK keys.\n"},"environmentAccesses":{"type":"object","additionalProperties":{"type":"string"},"description":"The environment specific permissions map block. Keys are the Environment IDs and the values represent the environment specific Feature Management permission. Possible values: full, readOnly\n"},"name":{"type":"string","description":"The name of the Permission Group.\n"},"newEnvironmentAccesstype":{"type":"string","description":"Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly, none\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"requiredInputs":["productId"],"stateInputs":{"description":"Input properties used for looking up and filtering PermissionGroup resources.\n","properties":{"accesstype":{"type":"string","description":"Represent the Feature Management permission. Possible values: readOnly, full, custom\n"},"canCreateorupdateConfig":{"type":"boolean","description":"Group members can create/update Configs.\n"},"canCreateorupdateEnvironment":{"type":"boolean","description":"Group members can create/update Environments.\n"},"canCreateorupdateSegment":{"type":"boolean","description":"Group members can create/update Segments.\n"},"canCreateorupdateSetting":{"type":"boolean","description":"Group members can create/update Feature Flags and Settings.\n"},"canCreateorupdateTag":{"type":"boolean","description":"Group members can create/update Tags.\n"},"canDeleteConfig":{"type":"boolean","description":"Group members can delete Configs.\n"},"canDeleteEnvironment":{"type":"boolean","description":"Group members can delete Environments.\n"},"canDeleteSegment":{"type":"boolean","description":"Group members can delete Segments.\n"},"canDeleteSetting":{"type":"boolean","description":"Group members can delete Feature Flags and Settings.\n"},"canDeleteTag":{"type":"boolean","description":"Group members can delete Tags.\n"},"canDisable2fa":{"type":"boolean","description":"Group members can disable two-factor authentication for other members.\n"},"canManageIntegrations":{"type":"boolean","description":"Group members can add and configure integrations.\n"},"canManageMembers":{"type":"boolean","description":"Group members can manage team members.\n"},"canManageProductPreferences":{"type":"boolean","description":"Group members can update Product preferences.\n"},"canManageWebhook":{"type":"boolean","description":"Group members can create/update/delete Webhooks.\n"},"canRotateSdkkey":{"type":"boolean","description":"Group members can rotate SDK keys.\n"},"canTagSetting":{"type":"boolean","description":"Group members can attach/detach Tags to Feature Flags and Settings.\n"},"canUseExportimport":{"type":"boolean","description":"Group members can use the export/import feature.\n"},"canViewProductAuditlog":{"type":"boolean","description":"Group members has access to audit logs.\n"},"canViewProductStatistics":{"type":"boolean","description":"Group members has access to product statistics.\n"},"canViewSdkkey":{"type":"boolean","description":"Group members has access to SDK keys.\n"},"environmentAccesses":{"type":"object","additionalProperties":{"type":"string"},"description":"The environment specific permissions map block. Keys are the Environment IDs and the values represent the environment specific Feature Management permission. Possible values: full, readOnly\n"},"name":{"type":"string","description":"The name of the Permission Group.\n"},"newEnvironmentAccesstype":{"type":"string","description":"Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly, none\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"type":"object"}},"configcat:index/product:Product":{"description":"Creates and manages a **Product**. [What is a Product in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst config = new pulumi.Config();\nconst organizationId = config.require(\"organizationId\");\nconst myConfig = new configcat.Product(\"my_config\", {\n    organizationId: organizationId,\n    name: \"My product\",\n    description: \"My product description\",\n    order: 0,\n});\nexport const productId = myProduct.id;\n```\n```python\nimport pulumi\nimport pulumiverse_configcat as configcat\n\nconfig = pulumi.Config()\norganization_id = config.require(\"organizationId\")\nmy_config = configcat.Product(\"my_config\",\n    organization_id=organization_id,\n    name=\"My product\",\n    description=\"My product description\",\n    order=0)\npulumi.export(\"productId\", my_product[\"id\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var organizationId = config.Require(\"organizationId\");\n    var myConfig = new Configcat.Product(\"my_config\", new()\n    {\n        OrganizationId = organizationId,\n        Name = \"My product\",\n        Description = \"My product description\",\n        Order = 0,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"productId\"] = myProduct.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\torganizationId := cfg.Require(\"organizationId\")\n\t\t_, err := configcat.NewProduct(ctx, \"my_config\", \u0026configcat.ProductArgs{\n\t\t\tOrganizationId: pulumi.String(organizationId),\n\t\t\tName:           pulumi.String(\"My product\"),\n\t\t\tDescription:    pulumi.String(\"My product description\"),\n\t\t\tOrder:          pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"productId\", myProduct.Id)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.Product;\nimport com.pulumi.configcat.ProductArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var organizationId = config.get(\"organizationId\");\n        var myConfig = new Product(\"myConfig\", ProductArgs.builder()\n            .organizationId(organizationId)\n            .name(\"My product\")\n            .description(\"My product description\")\n            .order(0)\n            .build());\n\n        ctx.export(\"productId\", myProduct.id());\n    }\n}\n```\n```yaml\nconfiguration:\n  organizationId:\n    type: string\nresources:\n  myConfig:\n    type: configcat:Product\n    name: my_config\n    properties:\n      organizationId: ${organizationId}\n      name: My product\n      description: My product description\n      order: 0\noutputs:\n  productId: ${myProduct.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nProducts can be imported using the ProductId. Get the ProductId using the [List Products API](https://api.configcat.com/docs/#tag/Products/operation/get-products) for example.\n\n```sh\n$ pulumi import configcat:index/product:Product example 08d86d63-2726-47cd-8bfc-59608ecb91e2\n```\n\n","properties":{"description":{"type":"string","description":"The description of the Product.\n"},"name":{"type":"string","description":"The name of the Product.\n"},"order":{"type":"integer","description":"The order of the Product within a Organization (zero-based). If multiple Products has the same order, they are displayed in alphabetical order.\n"},"organizationId":{"type":"string","description":"The ID of the Organization.\n"}},"required":["description","name","order","organizationId"],"inputProperties":{"description":{"type":"string","description":"The description of the Product.\n"},"name":{"type":"string","description":"The name of the Product.\n"},"order":{"type":"integer","description":"The order of the Product within a Organization (zero-based). If multiple Products has the same order, they are displayed in alphabetical order.\n"},"organizationId":{"type":"string","description":"The ID of the Organization.\n"}},"requiredInputs":["order","organizationId"],"stateInputs":{"description":"Input properties used for looking up and filtering Product resources.\n","properties":{"description":{"type":"string","description":"The description of the Product.\n"},"name":{"type":"string","description":"The name of the Product.\n"},"order":{"type":"integer","description":"The order of the Product within a Organization (zero-based). If multiple Products has the same order, they are displayed in alphabetical order.\n"},"organizationId":{"type":"string","description":"The ID of the Organization.\n"}},"type":"object"}},"configcat:index/productPreferences:ProductPreferences":{"description":"Manages the **Product Preferences**.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst config = new pulumi.Config();\nconst organizationId = config.require(\"organizationId\");\nconst product = new configcat.Product(\"product\", {\n    organizationId: organizationId,\n    name: \"My product\",\n    order: 0,\n});\nconst test = new configcat.Environment(\"test\", {\n    productId: product.id,\n    name: \"Test\",\n    order: 0,\n});\nconst production = new configcat.Environment(\"production\", {\n    productId: product.id,\n    name: \"Production\",\n    order: 1,\n});\nconst preferences = new configcat.ProductPreferences(\"preferences\", {\n    productId: product.id,\n    keyGenerationMode: \"kebabCase\",\n    mandatorySettingHint: true,\n    showVariationId: false,\n    reasonRequired: false,\n    reasonRequiredEnvironments: pulumi.all([test.id, production.id]).apply(([testId, productionId]) =\u003e {\n        [testId]: false,\n        [productionId]: true,\n    }),\n});\n```\n```python\nimport pulumi\nimport pulumiverse_configcat as configcat\n\nconfig = pulumi.Config()\norganization_id = config.require(\"organizationId\")\nproduct = configcat.Product(\"product\",\n    organization_id=organization_id,\n    name=\"My product\",\n    order=0)\ntest = configcat.Environment(\"test\",\n    product_id=product.id,\n    name=\"Test\",\n    order=0)\nproduction = configcat.Environment(\"production\",\n    product_id=product.id,\n    name=\"Production\",\n    order=1)\npreferences = configcat.ProductPreferences(\"preferences\",\n    product_id=product.id,\n    key_generation_mode=\"kebabCase\",\n    mandatory_setting_hint=True,\n    show_variation_id=False,\n    reason_required=False,\n    reason_required_environments=pulumi.Output.all(\n        testId=test.id,\n        productionId=production.id\n).apply(lambda resolved_outputs: {\n        resolved_outputs['testId']: False,\n        resolved_outputs['productionId']: True,\n    })\n)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var organizationId = config.Require(\"organizationId\");\n    var product = new Configcat.Product(\"product\", new()\n    {\n        OrganizationId = organizationId,\n        Name = \"My product\",\n        Order = 0,\n    });\n\n    var test = new Configcat.Environment(\"test\", new()\n    {\n        ProductId = product.Id,\n        Name = \"Test\",\n        Order = 0,\n    });\n\n    var production = new Configcat.Environment(\"production\", new()\n    {\n        ProductId = product.Id,\n        Name = \"Production\",\n        Order = 1,\n    });\n\n    var preferences = new Configcat.ProductPreferences(\"preferences\", new()\n    {\n        ProductId = product.Id,\n        KeyGenerationMode = \"kebabCase\",\n        MandatorySettingHint = true,\n        ShowVariationId = false,\n        ReasonRequired = false,\n        ReasonRequiredEnvironments = Output.Tuple(test.Id, production.Id).Apply(values =\u003e\n        {\n            var testId = values.Item1;\n            var productionId = values.Item2;\n            return \n            {\n                { testId, false },\n                { productionId, true },\n            };\n        }),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\nfunc main() {\npulumi.Run(func(ctx *pulumi.Context) error {\ncfg := config.New(ctx, \"\")\norganizationId := cfg.Require(\"organizationId\")\nproduct, err := configcat.NewProduct(ctx, \"product\", \u0026configcat.ProductArgs{\nOrganizationId: pulumi.String(organizationId),\nName: pulumi.String(\"My product\"),\nOrder: pulumi.Int(0),\n})\nif err != nil {\nreturn err\n}\ntest, err := configcat.NewEnvironment(ctx, \"test\", \u0026configcat.EnvironmentArgs{\nProductId: product.ID(),\nName: pulumi.String(\"Test\"),\nOrder: pulumi.Int(0),\n})\nif err != nil {\nreturn err\n}\nproduction, err := configcat.NewEnvironment(ctx, \"production\", \u0026configcat.EnvironmentArgs{\nProductId: product.ID(),\nName: pulumi.String(\"Production\"),\nOrder: pulumi.Int(1),\n})\nif err != nil {\nreturn err\n}\n_, err = configcat.NewProductPreferences(ctx, \"preferences\", \u0026configcat.ProductPreferencesArgs{\nProductId: product.ID(),\nKeyGenerationMode: pulumi.String(\"kebabCase\"),\nMandatorySettingHint: pulumi.Bool(true),\nShowVariationId: pulumi.Bool(false),\nReasonRequired: pulumi.Bool(false),\nReasonRequiredEnvironments: pulumi.BoolMap(pulumi.All(test.ID(),production.ID()).ApplyT(func(_args []interface{}) (map[string]bool, error) {\ntestId := _args[0].(string)\nproductionId := _args[1].(string)\nreturn map[string]bool{\ntestId: false,\nproductionId: true,\n}, nil\n}).(pulumi.Map[string]boolOutput)),\n})\nif err != nil {\nreturn err\n}\nreturn nil\n})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.Product;\nimport com.pulumi.configcat.ProductArgs;\nimport com.pulumi.configcat.Environment;\nimport com.pulumi.configcat.EnvironmentArgs;\nimport com.pulumi.configcat.ProductPreferences;\nimport com.pulumi.configcat.ProductPreferencesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var organizationId = config.get(\"organizationId\");\n        var product = new Product(\"product\", ProductArgs.builder()\n            .organizationId(organizationId)\n            .name(\"My product\")\n            .order(0)\n            .build());\n\n        var test = new Environment(\"test\", EnvironmentArgs.builder()\n            .productId(product.id())\n            .name(\"Test\")\n            .order(0)\n            .build());\n\n        var production = new Environment(\"production\", EnvironmentArgs.builder()\n            .productId(product.id())\n            .name(\"Production\")\n            .order(1)\n            .build());\n\n        var preferences = new ProductPreferences(\"preferences\", ProductPreferencesArgs.builder()\n            .productId(product.id())\n            .keyGenerationMode(\"kebabCase\")\n            .mandatorySettingHint(true)\n            .showVariationId(false)\n            .reasonRequired(false)\n            .reasonRequiredEnvironments(Output.tuple(test.id(), production.id()).applyValue(values -\u003e {\n                var testId = values.t1;\n                var productionId = values.t2;\n                return Map.ofEntries(\n                    Map.entry(testId, false),\n                    Map.entry(productionId, true)\n                );\n            }))\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  organizationId:\n    type: string\nresources:\n  product:\n    type: configcat:Product\n    properties:\n      organizationId: ${organizationId}\n      name: My product\n      order: 0\n  test:\n    type: configcat:Environment\n    properties:\n      productId: ${product.id}\n      name: Test\n      order: 0\n  production:\n    type: configcat:Environment\n    properties:\n      productId: ${product.id}\n      name: Production\n      order: 1\n  preferences:\n    type: configcat:ProductPreferences\n    properties:\n      productId: ${product.id}\n      keyGenerationMode: kebabCase\n      mandatorySettingHint: true\n      showVariationId: false\n      reasonRequired: false\n      reasonRequiredEnvironments:\n        ${test.id}: false\n        ${production.id}: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nProduct preferences can be imported using the ProductId. Get the ProductId using the [List Products API](https://api.configcat.com/docs/#tag/Products/operation/get-products) for example.\n\n```sh\n$ pulumi import configcat:index/productPreferences:ProductPreferences example 08d86d63-2726-47cd-8bfc-59608ecb91e2\n```\n\n","properties":{"keyGenerationMode":{"type":"string","description":"Determines the Feature Flag key generation mode. Available values: `camelCase`|`upperCase`|`lowerCase`|`pascalCase`|`kebabCase`. Default: `camelCase`.\n"},"mandatorySettingHint":{"type":"boolean","description":"Indicates whether Feature flags and Settings must have a hint. Default: false.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"},"reasonRequired":{"type":"boolean","description":"Indicates that a mandatory note is required for saving and publishing. Default: false.\n"},"reasonRequiredEnvironments":{"type":"object","additionalProperties":{"type":"boolean"},"description":"The environment specific mandatory note map block. Keys are the Environment IDs and the values indicate that a mandatory note is required for saving and publishing.\n"},"showVariationId":{"type":"boolean","description":"Indicates whether variation IDs must be shown on the ConfigCat Dashboard. Default: false.\n"}},"required":["keyGenerationMode","mandatorySettingHint","productId","reasonRequired","reasonRequiredEnvironments","showVariationId"],"inputProperties":{"keyGenerationMode":{"type":"string","description":"Determines the Feature Flag key generation mode. Available values: `camelCase`|`upperCase`|`lowerCase`|`pascalCase`|`kebabCase`. Default: `camelCase`.\n"},"mandatorySettingHint":{"type":"boolean","description":"Indicates whether Feature flags and Settings must have a hint. Default: false.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"},"reasonRequired":{"type":"boolean","description":"Indicates that a mandatory note is required for saving and publishing. Default: false.\n"},"reasonRequiredEnvironments":{"type":"object","additionalProperties":{"type":"boolean"},"description":"The environment specific mandatory note map block. Keys are the Environment IDs and the values indicate that a mandatory note is required for saving and publishing.\n"},"showVariationId":{"type":"boolean","description":"Indicates whether variation IDs must be shown on the ConfigCat Dashboard. Default: false.\n"}},"requiredInputs":["productId"],"stateInputs":{"description":"Input properties used for looking up and filtering ProductPreferences resources.\n","properties":{"keyGenerationMode":{"type":"string","description":"Determines the Feature Flag key generation mode. Available values: `camelCase`|`upperCase`|`lowerCase`|`pascalCase`|`kebabCase`. Default: `camelCase`.\n"},"mandatorySettingHint":{"type":"boolean","description":"Indicates whether Feature flags and Settings must have a hint. Default: false.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"},"reasonRequired":{"type":"boolean","description":"Indicates that a mandatory note is required for saving and publishing. Default: false.\n"},"reasonRequiredEnvironments":{"type":"object","additionalProperties":{"type":"boolean"},"description":"The environment specific mandatory note map block. Keys are the Environment IDs and the values indicate that a mandatory note is required for saving and publishing.\n"},"showVariationId":{"type":"boolean","description":"Indicates whether variation IDs must be shown on the ConfigCat Dashboard. Default: false.\n"}},"type":"object"}},"configcat:index/segment:Segment":{"description":"Creates and manages a **Segment**. [What is a Segment in ConfigCat?](https://configcat.com/docs/advanced/segments)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst config = new pulumi.Config();\nconst productId = config.require(\"productId\");\nconst mySegment = new configcat.Segment(\"my_segment\", {\n    productId: productId,\n    name: \"Beta users\",\n    description: \"Beta users' description\",\n    comparisonAttribute: \"email\",\n    comparator: \"sensitiveIsOneOf\",\n    comparisonValue: \"betauser1@example.com,betauser2@example.com\",\n});\nexport const segmentId = mySegment.id;\n```\n```python\nimport pulumi\nimport pulumiverse_configcat as configcat\n\nconfig = pulumi.Config()\nproduct_id = config.require(\"productId\")\nmy_segment = configcat.Segment(\"my_segment\",\n    product_id=product_id,\n    name=\"Beta users\",\n    description=\"Beta users' description\",\n    comparison_attribute=\"email\",\n    comparator=\"sensitiveIsOneOf\",\n    comparison_value=\"betauser1@example.com,betauser2@example.com\")\npulumi.export(\"segmentId\", my_segment.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var productId = config.Require(\"productId\");\n    var mySegment = new Configcat.Segment(\"my_segment\", new()\n    {\n        ProductId = productId,\n        Name = \"Beta users\",\n        Description = \"Beta users' description\",\n        ComparisonAttribute = \"email\",\n        Comparator = \"sensitiveIsOneOf\",\n        ComparisonValue = \"betauser1@example.com,betauser2@example.com\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"segmentId\"] = mySegment.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tproductId := cfg.Require(\"productId\")\n\t\tmySegment, err := configcat.NewSegment(ctx, \"my_segment\", \u0026configcat.SegmentArgs{\n\t\t\tProductId:           pulumi.String(productId),\n\t\t\tName:                pulumi.String(\"Beta users\"),\n\t\t\tDescription:         pulumi.String(\"Beta users' description\"),\n\t\t\tComparisonAttribute: pulumi.String(\"email\"),\n\t\t\tComparator:          pulumi.String(\"sensitiveIsOneOf\"),\n\t\t\tComparisonValue:     pulumi.String(\"betauser1@example.com,betauser2@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"segmentId\", mySegment.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.Segment;\nimport com.pulumi.configcat.SegmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var productId = config.get(\"productId\");\n        var mySegment = new Segment(\"mySegment\", SegmentArgs.builder()\n            .productId(productId)\n            .name(\"Beta users\")\n            .description(\"Beta users' description\")\n            .comparisonAttribute(\"email\")\n            .comparator(\"sensitiveIsOneOf\")\n            .comparisonValue(\"betauser1@example.com,betauser2@example.com\")\n            .build());\n\n        ctx.export(\"segmentId\", mySegment.id());\n    }\n}\n```\n```yaml\nconfiguration:\n  productId:\n    type: string\nresources:\n  mySegment:\n    type: configcat:Segment\n    name: my_segment\n    properties:\n      productId: ${productId}\n      name: Beta users\n      description: Beta users' description\n      comparisonAttribute: email\n      comparator: sensitiveIsOneOf\n      comparisonValue: betauser1@example.com,betauser2@example.com\noutputs:\n  segmentId: ${mySegment.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSegments can be imported using the SegmentId. Get the SegmentId using the [List Segments API](https://api.configcat.com/docs/#tag/Segments/operation/get-segments) for example.\n\n```sh\n$ pulumi import configcat:index/segment:Segment example 08d86d63-2726-47cd-8bfc-59608ecb91e2\n```\n\n","properties":{"comparator":{"type":"string","description":"The [comparator](https://configcat.com/docs/advanced/targeting/#comparator) of the Segment.\n"},"comparisonAttribute":{"type":"string","description":"The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute) of the Segment.\n"},"comparisonValue":{"type":"string","description":"The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value) of the Segment.\n"},"description":{"type":"string","description":"The description of the Segment.\n"},"name":{"type":"string","description":"The name of the Segment.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"required":["comparator","comparisonAttribute","comparisonValue","description","name","productId"],"inputProperties":{"comparator":{"type":"string","description":"The [comparator](https://configcat.com/docs/advanced/targeting/#comparator) of the Segment.\n"},"comparisonAttribute":{"type":"string","description":"The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute) of the Segment.\n"},"comparisonValue":{"type":"string","description":"The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value) of the Segment.\n"},"description":{"type":"string","description":"The description of the Segment.\n"},"name":{"type":"string","description":"The name of the Segment.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"requiredInputs":["comparator","comparisonAttribute","comparisonValue","productId"],"stateInputs":{"description":"Input properties used for looking up and filtering Segment resources.\n","properties":{"comparator":{"type":"string","description":"The [comparator](https://configcat.com/docs/advanced/targeting/#comparator) of the Segment.\n"},"comparisonAttribute":{"type":"string","description":"The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute) of the Segment.\n"},"comparisonValue":{"type":"string","description":"The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value) of the Segment.\n"},"description":{"type":"string","description":"The description of the Segment.\n"},"name":{"type":"string","description":"The name of the Segment.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"type":"object"}},"configcat:index/setting:Setting":{"description":"Creates and manages a **Feature Flag or Setting**. [What is a Feature Flag or Setting in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst config = new pulumi.Config();\nconst configId = config.require(\"configId\");\nconst mySetting = new configcat.Setting(\"my_setting\", {\n    configId: configId,\n    key: \"isAwesomeFeatureEnabled\",\n    name: \"My awesome feature flag\",\n    hint: \"This is the hint for my awesome feature flag\",\n    settingType: \"boolean\",\n    order: 0,\n});\nexport const settingId = mySetting.id;\n```\n```python\nimport pulumi\nimport pulumiverse_configcat as configcat\n\nconfig = pulumi.Config()\nconfig_id = config.require(\"configId\")\nmy_setting = configcat.Setting(\"my_setting\",\n    config_id=config_id,\n    key=\"isAwesomeFeatureEnabled\",\n    name=\"My awesome feature flag\",\n    hint=\"This is the hint for my awesome feature flag\",\n    setting_type=\"boolean\",\n    order=0)\npulumi.export(\"settingId\", my_setting.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var configId = config.Require(\"configId\");\n    var mySetting = new Configcat.Setting(\"my_setting\", new()\n    {\n        ConfigId = configId,\n        Key = \"isAwesomeFeatureEnabled\",\n        Name = \"My awesome feature flag\",\n        Hint = \"This is the hint for my awesome feature flag\",\n        SettingType = \"boolean\",\n        Order = 0,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"settingId\"] = mySetting.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tconfigId := cfg.Require(\"configId\")\n\t\tmySetting, err := configcat.NewSetting(ctx, \"my_setting\", \u0026configcat.SettingArgs{\n\t\t\tConfigId:    pulumi.String(configId),\n\t\t\tKey:         pulumi.String(\"isAwesomeFeatureEnabled\"),\n\t\t\tName:        pulumi.String(\"My awesome feature flag\"),\n\t\t\tHint:        pulumi.String(\"This is the hint for my awesome feature flag\"),\n\t\t\tSettingType: pulumi.String(\"boolean\"),\n\t\t\tOrder:       pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"settingId\", mySetting.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.Setting;\nimport com.pulumi.configcat.SettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var configId = config.get(\"configId\");\n        var mySetting = new Setting(\"mySetting\", SettingArgs.builder()\n            .configId(configId)\n            .key(\"isAwesomeFeatureEnabled\")\n            .name(\"My awesome feature flag\")\n            .hint(\"This is the hint for my awesome feature flag\")\n            .settingType(\"boolean\")\n            .order(0)\n            .build());\n\n        ctx.export(\"settingId\", mySetting.id());\n    }\n}\n```\n```yaml\nconfiguration:\n  configId:\n    type: string\nresources:\n  mySetting:\n    type: configcat:Setting\n    name: my_setting\n    properties:\n      configId: ${configId}\n      key: isAwesomeFeatureEnabled\n      name: My awesome feature flag\n      hint: This is the hint for my awesome feature flag\n      settingType: boolean\n      order: 0\noutputs:\n  settingId: ${mySetting.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nFeature Flags/Settings can be imported using the SettingId. Get the SettingId using e.g. the [List Flags API](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/get-settings).\n\n```sh\n$ pulumi import configcat:index/setting:Setting example 1234\n```\n\n","properties":{"configId":{"type":"string","description":"The ID of the Config.\n"},"hint":{"type":"string","description":"The hint of the Feature Flag or Setting.\n"},"key":{"type":"string","description":"The key of the Feature Flag or Setting.\n"},"name":{"type":"string","description":"The name of the Feature Flag or Setting.\n"},"order":{"type":"integer","description":"The order of the Feature Flag or Setting within a Product (zero-based). If multiple Feature Flags or Settings has the same order, they are displayed in alphabetical order.\n"},"settingType":{"type":"string","description":"The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`. Default: `boolean`.\n"}},"required":["configId","hint","key","name","order","settingType"],"inputProperties":{"configId":{"type":"string","description":"The ID of the Config.\n"},"hint":{"type":"string","description":"The hint of the Feature Flag or Setting.\n"},"key":{"type":"string","description":"The key of the Feature Flag or Setting.\n"},"name":{"type":"string","description":"The name of the Feature Flag or Setting.\n"},"order":{"type":"integer","description":"The order of the Feature Flag or Setting within a Product (zero-based). If multiple Feature Flags or Settings has the same order, they are displayed in alphabetical order.\n"},"settingType":{"type":"string","description":"The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`. Default: `boolean`.\n"}},"requiredInputs":["configId","key","order"],"stateInputs":{"description":"Input properties used for looking up and filtering Setting resources.\n","properties":{"configId":{"type":"string","description":"The ID of the Config.\n"},"hint":{"type":"string","description":"The hint of the Feature Flag or Setting.\n"},"key":{"type":"string","description":"The key of the Feature Flag or Setting.\n"},"name":{"type":"string","description":"The name of the Feature Flag or Setting.\n"},"order":{"type":"integer","description":"The order of the Feature Flag or Setting within a Product (zero-based). If multiple Feature Flags or Settings has the same order, they are displayed in alphabetical order.\n"},"settingType":{"type":"string","description":"The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`. Default: `boolean`.\n"}},"type":"object"}},"configcat:index/settingTag:SettingTag":{"description":"Adds/Removes **Tags** to/from **Feature Flags or Settings**.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst config = new pulumi.Config();\nconst settingId = config.require(\"settingId\");\nconst tagId = config.require(\"tagId\");\nconst mySettingTag = new configcat.SettingTag(\"my_setting_tag\", {\n    settingId: settingId,\n    tagId: tagId,\n});\n```\n```python\nimport pulumi\nimport pulumiverse_configcat as configcat\n\nconfig = pulumi.Config()\nsetting_id = config.require(\"settingId\")\ntag_id = config.require(\"tagId\")\nmy_setting_tag = configcat.SettingTag(\"my_setting_tag\",\n    setting_id=setting_id,\n    tag_id=tag_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var settingId = config.Require(\"settingId\");\n    var tagId = config.Require(\"tagId\");\n    var mySettingTag = new Configcat.SettingTag(\"my_setting_tag\", new()\n    {\n        SettingId = settingId,\n        TagId = tagId,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tsettingId := cfg.Require(\"settingId\")\n\t\ttagId := cfg.Require(\"tagId\")\n\t\t_, err := configcat.NewSettingTag(ctx, \"my_setting_tag\", \u0026configcat.SettingTagArgs{\n\t\t\tSettingId: pulumi.String(settingId),\n\t\t\tTagId:     pulumi.String(tagId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.SettingTag;\nimport com.pulumi.configcat.SettingTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var settingId = config.get(\"settingId\");\n        final var tagId = config.get(\"tagId\");\n        var mySettingTag = new SettingTag(\"mySettingTag\", SettingTagArgs.builder()\n            .settingId(settingId)\n            .tagId(tagId)\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  settingId:\n    type: string\n  tagId:\n    type: string\nresources:\n  mySettingTag:\n    type: configcat:SettingTag\n    name: my_setting_tag\n    properties:\n      settingId: ${settingId}\n      tagId: ${tagId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nSetting Tags can be imported using a combined SettingId:TagId ID.  \n\nGet the SettingId using e.g. the [List Flags API](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/get-settings).  \n\nGet the TagId using e.g. the [List Tags API](https://api.configcat.com/docs/#tag/Tags/operation/get-tags).  \n\n```sh\n$ pulumi import configcat:index/settingTag:SettingTag example 1234:5678\n```\n\n","properties":{"settingId":{"type":"string","description":"The ID of the Feature Flag or Setting.\n"},"tagId":{"type":"string","description":"The ID of the Tag.\n"}},"required":["settingId","tagId"],"inputProperties":{"settingId":{"type":"string","description":"The ID of the Feature Flag or Setting.\n"},"tagId":{"type":"string","description":"The ID of the Tag.\n"}},"requiredInputs":["settingId","tagId"],"stateInputs":{"description":"Input properties used for looking up and filtering SettingTag resources.\n","properties":{"settingId":{"type":"string","description":"The ID of the Feature Flag or Setting.\n"},"tagId":{"type":"string","description":"The ID of the Tag.\n"}},"type":"object"}},"configcat:index/settingValue:SettingValue":{"description":"Initializes and updates **Feature Flag or Setting** values for V1 configs. [Read more about the anatomy of a Feature Flag or Setting.](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst config = new pulumi.Config();\nconst environmentId = config.require(\"environmentId\");\nconst settingId = config.require(\"settingId\");\nconst mySettingValue = new configcat.SettingValue(\"my_setting_value\", {\n    environmentId: environmentId,\n    settingId: settingId,\n    mandatoryNotes: \"mandatory notes\",\n    value: \"true\",\n    rolloutRules: [\n        {\n            comparisonAttribute: \"Email\",\n            comparator: \"contains\",\n            comparisonValue: \"@mycompany.com\",\n            value: \"true\",\n        },\n        {\n            comparisonAttribute: \"custom\",\n            comparator: \"isOneOf\",\n            comparisonValue: \"red\",\n            value: \"false\",\n        },\n    ],\n    percentageItems: [\n        {\n            percentage: \"20\",\n            value: \"true\",\n        },\n        {\n            percentage: \"80\",\n            value: \"false\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumiverse_configcat as configcat\n\nconfig = pulumi.Config()\nenvironment_id = config.require(\"environmentId\")\nsetting_id = config.require(\"settingId\")\nmy_setting_value = configcat.SettingValue(\"my_setting_value\",\n    environment_id=environment_id,\n    setting_id=setting_id,\n    mandatory_notes=\"mandatory notes\",\n    value=\"true\",\n    rollout_rules=[\n        {\n            \"comparison_attribute\": \"Email\",\n            \"comparator\": \"contains\",\n            \"comparison_value\": \"@mycompany.com\",\n            \"value\": \"true\",\n        },\n        {\n            \"comparison_attribute\": \"custom\",\n            \"comparator\": \"isOneOf\",\n            \"comparison_value\": \"red\",\n            \"value\": \"false\",\n        },\n    ],\n    percentage_items=[\n        {\n            \"percentage\": \"20\",\n            \"value\": \"true\",\n        },\n        {\n            \"percentage\": \"80\",\n            \"value\": \"false\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var environmentId = config.Require(\"environmentId\");\n    var settingId = config.Require(\"settingId\");\n    var mySettingValue = new Configcat.SettingValue(\"my_setting_value\", new()\n    {\n        EnvironmentId = environmentId,\n        SettingId = settingId,\n        MandatoryNotes = \"mandatory notes\",\n        Value = \"true\",\n        RolloutRules = new[]\n        {\n            new Configcat.Inputs.SettingValueRolloutRuleArgs\n            {\n                ComparisonAttribute = \"Email\",\n                Comparator = \"contains\",\n                ComparisonValue = \"@mycompany.com\",\n                Value = \"true\",\n            },\n            new Configcat.Inputs.SettingValueRolloutRuleArgs\n            {\n                ComparisonAttribute = \"custom\",\n                Comparator = \"isOneOf\",\n                ComparisonValue = \"red\",\n                Value = \"false\",\n            },\n        },\n        PercentageItems = new[]\n        {\n            new Configcat.Inputs.SettingValuePercentageItemArgs\n            {\n                Percentage = \"20\",\n                Value = \"true\",\n            },\n            new Configcat.Inputs.SettingValuePercentageItemArgs\n            {\n                Percentage = \"80\",\n                Value = \"false\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tenvironmentId := cfg.Require(\"environmentId\")\n\t\tsettingId := cfg.Require(\"settingId\")\n\t\t_, err := configcat.NewSettingValue(ctx, \"my_setting_value\", \u0026configcat.SettingValueArgs{\n\t\t\tEnvironmentId:  pulumi.String(environmentId),\n\t\t\tSettingId:      pulumi.String(settingId),\n\t\t\tMandatoryNotes: pulumi.String(\"mandatory notes\"),\n\t\t\tValue:          pulumi.String(\"true\"),\n\t\t\tRolloutRules: configcat.SettingValueRolloutRuleArray{\n\t\t\t\t\u0026configcat.SettingValueRolloutRuleArgs{\n\t\t\t\t\tComparisonAttribute: pulumi.String(\"Email\"),\n\t\t\t\t\tComparator:          pulumi.String(\"contains\"),\n\t\t\t\t\tComparisonValue:     pulumi.String(\"@mycompany.com\"),\n\t\t\t\t\tValue:               pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t\t\u0026configcat.SettingValueRolloutRuleArgs{\n\t\t\t\t\tComparisonAttribute: pulumi.String(\"custom\"),\n\t\t\t\t\tComparator:          pulumi.String(\"isOneOf\"),\n\t\t\t\t\tComparisonValue:     pulumi.String(\"red\"),\n\t\t\t\t\tValue:               pulumi.String(\"false\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPercentageItems: configcat.SettingValuePercentageItemArray{\n\t\t\t\t\u0026configcat.SettingValuePercentageItemArgs{\n\t\t\t\t\tPercentage: pulumi.String(\"20\"),\n\t\t\t\t\tValue:      pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t\t\u0026configcat.SettingValuePercentageItemArgs{\n\t\t\t\t\tPercentage: pulumi.String(\"80\"),\n\t\t\t\t\tValue:      pulumi.String(\"false\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.SettingValue;\nimport com.pulumi.configcat.SettingValueArgs;\nimport com.pulumi.configcat.inputs.SettingValueRolloutRuleArgs;\nimport com.pulumi.configcat.inputs.SettingValuePercentageItemArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var environmentId = config.get(\"environmentId\");\n        final var settingId = config.get(\"settingId\");\n        var mySettingValue = new SettingValue(\"mySettingValue\", SettingValueArgs.builder()\n            .environmentId(environmentId)\n            .settingId(settingId)\n            .mandatoryNotes(\"mandatory notes\")\n            .value(\"true\")\n            .rolloutRules(            \n                SettingValueRolloutRuleArgs.builder()\n                    .comparisonAttribute(\"Email\")\n                    .comparator(\"contains\")\n                    .comparisonValue(\"@mycompany.com\")\n                    .value(\"true\")\n                    .build(),\n                SettingValueRolloutRuleArgs.builder()\n                    .comparisonAttribute(\"custom\")\n                    .comparator(\"isOneOf\")\n                    .comparisonValue(\"red\")\n                    .value(\"false\")\n                    .build())\n            .percentageItems(            \n                SettingValuePercentageItemArgs.builder()\n                    .percentage(20)\n                    .value(\"true\")\n                    .build(),\n                SettingValuePercentageItemArgs.builder()\n                    .percentage(80)\n                    .value(\"false\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  environmentId:\n    type: string\n  settingId:\n    type: string\nresources:\n  mySettingValue:\n    type: configcat:SettingValue\n    name: my_setting_value\n    properties:\n      environmentId: ${environmentId}\n      settingId: ${settingId}\n      mandatoryNotes: mandatory notes\n      value: 'true'\n      rolloutRules:\n        - comparisonAttribute: Email\n          comparator: contains\n          comparisonValue: '@mycompany.com'\n          value: 'true'\n        - comparisonAttribute: custom\n          comparator: isOneOf\n          comparisonValue: red\n          value: 'false'\n      percentageItems:\n        - percentage: 20\n          value: 'true'\n        - percentage: 80\n          value: 'false'\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nFeature Flag/Setting values (V1) can be imported using a combined EnvironmentID:SettingId ID.  \n\nGet the EnvironmentId using e.g. the [List Environments API](https://api.configcat.com/docs/#tag/Environments/operation/get-environments).  \n\nGet the SettingId using e.g. the [List Flags API](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/get-settings).  \n\n```sh\n$ pulumi import configcat:index/settingValue:SettingValue example 08d86d63-2726-47cd-8bfc-59608ecb91e2:1234\n```\n\n","properties":{"environmentId":{"type":"string","description":"The ID of the Environment.\n"},"initOnly":{"type":"boolean"},"mandatoryNotes":{"type":"string","description":"If the Product's \"Mandatory notes\" preference is turned on for the Environment the Mandatory note must be passed.\n"},"percentageItems":{"type":"array","items":{"$ref":"#/types/configcat:index/SettingValuePercentageItem:SettingValuePercentageItem"}},"rolloutRules":{"type":"array","items":{"$ref":"#/types/configcat:index/SettingValueRolloutRule:SettingValueRolloutRule"}},"settingId":{"type":"string","description":"The ID of the Feature Flag or Setting.\n"},"settingType":{"type":"string","description":"The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`.\n"},"value":{"type":"string","description":"The Feature Flag or Setting's value. Type: `string`. It must be compatible with the `setting_type`.\n"}},"required":["environmentId","initOnly","settingId","settingType","value"],"inputProperties":{"environmentId":{"type":"string","description":"The ID of the Environment.\n"},"initOnly":{"type":"boolean"},"mandatoryNotes":{"type":"string","description":"If the Product's \"Mandatory notes\" preference is turned on for the Environment the Mandatory note must be passed.\n"},"percentageItems":{"type":"array","items":{"$ref":"#/types/configcat:index/SettingValuePercentageItem:SettingValuePercentageItem"}},"rolloutRules":{"type":"array","items":{"$ref":"#/types/configcat:index/SettingValueRolloutRule:SettingValueRolloutRule"}},"settingId":{"type":"string","description":"The ID of the Feature Flag or Setting.\n"},"value":{"type":"string","description":"The Feature Flag or Setting's value. Type: `string`. It must be compatible with the `setting_type`.\n"}},"requiredInputs":["environmentId","settingId","value"],"stateInputs":{"description":"Input properties used for looking up and filtering SettingValue resources.\n","properties":{"environmentId":{"type":"string","description":"The ID of the Environment.\n"},"initOnly":{"type":"boolean"},"mandatoryNotes":{"type":"string","description":"If the Product's \"Mandatory notes\" preference is turned on for the Environment the Mandatory note must be passed.\n"},"percentageItems":{"type":"array","items":{"$ref":"#/types/configcat:index/SettingValuePercentageItem:SettingValuePercentageItem"}},"rolloutRules":{"type":"array","items":{"$ref":"#/types/configcat:index/SettingValueRolloutRule:SettingValueRolloutRule"}},"settingId":{"type":"string","description":"The ID of the Feature Flag or Setting.\n"},"settingType":{"type":"string","description":"The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`.\n"},"value":{"type":"string","description":"The Feature Flag or Setting's value. Type: `string`. It must be compatible with the `setting_type`.\n"}},"type":"object"}},"configcat:index/settingValueV2:SettingValueV2":{"description":"Initializes and updates **Feature Flag or Setting** values for V2 configs. [Read more about the anatomy of a Feature Flag or Setting.](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.Setting;\nimport com.pulumi.configcat.SettingArgs;\nimport com.pulumi.configcat.SettingValueV2;\nimport com.pulumi.configcat.SettingValueV2Args;\nimport com.pulumi.configcat.inputs.SettingValueV2ValueArgs;\nimport com.pulumi.configcat.inputs.SettingValueV2TargetingRuleArgs;\nimport com.pulumi.configcat.inputs.SettingValueV2TargetingRuleValueArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var configId = config.get(\"configId\");\n        final var environmentId = config.get(\"environmentId\");\n        final var betaSegmentId = config.get(\"betaSegmentId\");\n        var bool = new Setting(\"bool\", SettingArgs.builder()\n            .configId(configId)\n            .key(\"BoolSettingKey\")\n            .name(\"Bool feature flag\")\n            .order(1)\n            .build());\n\n        var string = new Setting(\"string\", SettingArgs.builder()\n            .configId(configId)\n            .key(\"StringSettingKey\")\n            .name(\"String setting\")\n            .order(2)\n            .settingType(\"string\")\n            .build());\n\n        var boolSettingValue = new SettingValueV2(\"boolSettingValue\", SettingValueV2Args.builder()\n            .environmentId(environmentId)\n            .settingId(bool.id())\n            .mandatoryNotes(\"mandatory notes\")\n            .value(SettingValueV2ValueArgs.builder()\n                .bool_value(true)\n                .build())\n            .targetingRules(            \n                SettingValueV2TargetingRuleArgs.builder()\n                    .conditions(                    \n                        SettingValueV2TargetingRuleConditionArgs.builder()\n                            .userCondition(SettingValueV2TargetingRuleConditionUserConditionArgs.builder()\n                                .comparisonAttribute(\"email\")\n                                .comparator(\"sensitiveTextEquals\")\n                                .comparisonValue(SettingValueV2TargetingRuleConditionUserConditionComparisonValueArgs.builder()\n                                    .stringValue(\"@configcat.com\")\n                                    .build())\n                                .build())\n                            .build(),\n                        SettingValueV2TargetingRuleConditionArgs.builder()\n                            .userCondition(SettingValueV2TargetingRuleConditionUserConditionArgs.builder()\n                                .comparisonAttribute(\"color\")\n                                .comparator(\"isOneOf\")\n                                .comparisonValue(SettingValueV2TargetingRuleConditionUserConditionComparisonValueArgs.builder()\n                                    .listValues(                                    \n                                        SettingValueV2TargetingRuleConditionUserConditionComparisonValueListValueArgs.builder()\n                                            .value(\"#000000\")\n                                            .hint(\"black\")\n                                            .build(),\n                                        SettingValueV2TargetingRuleConditionUserConditionComparisonValueListValueArgs.builder()\n                                            .value(\"red\")\n                                            .build())\n                                    .build())\n                                .build())\n                            .build(),\n                        SettingValueV2TargetingRuleConditionArgs.builder()\n                            .segmentCondition(SettingValueV2TargetingRuleConditionSegmentConditionArgs.builder()\n                                .segmentId(betaSegmentId)\n                                .comparator(\"isIn\")\n                                .build())\n                            .build(),\n                        SettingValueV2TargetingRuleConditionArgs.builder()\n                            .prerequisiteFlagCondition(SettingValueV2TargetingRuleConditionPrerequisiteFlagConditionArgs.builder()\n                                .prerequisiteSettingId(string.id())\n                                .comparator(\"doesNotEqual\")\n                                .comparisonValue(SettingValueV2TargetingRuleConditionPrerequisiteFlagConditionComparisonValueArgs.builder()\n                                    .stringValue(\"test\")\n                                    .build())\n                                .build())\n                            .build())\n                    .value(SettingValueV2TargetingRuleValueArgs.builder()\n                        .boolValue(true)\n                        .build())\n                    .build(),\n                SettingValueV2TargetingRuleArgs.builder()\n                    .conditions(SettingValueV2TargetingRuleConditionArgs.builder()\n                        .userCondition(SettingValueV2TargetingRuleConditionUserConditionArgs.builder()\n                            .comparisonAttribute(\"county\")\n                            .comparator(\"sensitiveTextEquals\")\n                            .comparisonValue(SettingValueV2TargetingRuleConditionUserConditionComparisonValueArgs.builder()\n                                .stringValue(\"Hungary\")\n                                .build())\n                            .build())\n                        .build())\n                    .percentage_options(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build(),\n                SettingValueV2TargetingRuleArgs.builder()\n                    .percentage_options(                    \n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                        %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n                    .build())\n            .build());\n\n        var stringSettingValue = new SettingValueV2(\"stringSettingValue\", SettingValueV2Args.builder()\n            .environmentId(environmentId)\n            .settingId(string.id())\n            .value(SettingValueV2ValueArgs.builder()\n                .string_value(\"test\")\n                .build())\n            .targetingRules(SettingValueV2TargetingRuleArgs.builder()\n                .conditions(SettingValueV2TargetingRuleConditionArgs.builder()\n                    .userCondition(SettingValueV2TargetingRuleConditionUserConditionArgs.builder()\n                        .comparisonAttribute(\"email\")\n                        .comparator(\"sensitiveTextEquals\")\n                        .comparisonValue(SettingValueV2TargetingRuleConditionUserConditionComparisonValueArgs.builder()\n                            .stringValue(\"@configcat.com\")\n                            .build())\n                        .build())\n                    .build())\n                .value(SettingValueV2TargetingRuleValueArgs.builder()\n                    .stringValue(\"custom\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  configId:\n    type: string\n  environmentId:\n    type: string\n  betaSegmentId:\n    type: string\nresources:\n  bool:\n    type: configcat:Setting\n    properties:\n      configId: ${configId}\n      key: BoolSettingKey\n      name: Bool feature flag\n      order: 1\n  string:\n    type: configcat:Setting\n    properties:\n      configId: ${configId}\n      key: StringSettingKey\n      name: String setting\n      order: 2\n      settingType: string\n  boolSettingValue:\n    type: configcat:SettingValueV2\n    name: bool_setting_value\n    properties:\n      environmentId: ${environmentId}\n      settingId: ${bool.id}\n      mandatoryNotes: mandatory notes\n      value:\n        bool_value: true\n      targetingRules:\n        - conditions:\n            - userCondition:\n                comparisonAttribute: email\n                comparator: sensitiveTextEquals\n                comparisonValue:\n                  stringValue: '@configcat.com'\n            - userCondition:\n                comparisonAttribute: color\n                comparator: isOneOf\n                comparisonValue:\n                  listValues:\n                    - value: '#000000'\n                      hint: black\n                    - value: red\n            - segmentCondition:\n                segmentId: ${betaSegmentId}\n                comparator: isIn\n            - prerequisiteFlagCondition:\n                prerequisiteSettingId: ${string.id}\n                comparator: doesNotEqual\n                comparisonValue:\n                  stringValue: test\n          value:\n            boolValue: true\n        - conditions:\n            - userCondition:\n                comparisonAttribute: county\n                comparator: sensitiveTextEquals\n                comparisonValue:\n                  stringValue: Hungary\n          percentage_options:\n            - percentage: 50\n              value:\n                boolValue: true\n            - percentage: 50\n              value:\n                boolValue: false\n        - percentage_options:\n            - percentage: 30\n              value:\n                boolValue: true\n            - percentage: 70\n              value:\n                boolValue: false\n  stringSettingValue:\n    type: configcat:SettingValueV2\n    name: string_setting_value\n    properties:\n      environmentId: ${environmentId}\n      settingId: ${string.id}\n      value:\n        string_value: test\n      targetingRules:\n        - conditions:\n            - userCondition:\n                comparisonAttribute: email\n                comparator: sensitiveTextEquals\n                comparisonValue:\n                  stringValue: '@configcat.com'\n          value:\n            stringValue: custom\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nFeature Flag/Setting values (V2) can be imported using a combined EnvironmentID:SettingId ID.  \n\nGet the EnvironmentId using e.g. the [List Environments API](https://api.configcat.com/docs/#tag/Environments/operation/get-environments).  \n\nGet the SettingId using e.g. the [List Flags API](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/get-settings).  \n\n```sh\n$ pulumi import configcat:index/settingValueV2:SettingValueV2 example 08d86d63-2726-47cd-8bfc-59608ecb91e2:1234\n```\n\n","properties":{"environmentId":{"type":"string","description":"The ID of the Environment.\n"},"initOnly":{"type":"boolean"},"mandatoryNotes":{"type":"string","description":"If the Product's \"Mandatory notes\" preference is turned on for the Environment the Mandatory note must be passed.\n"},"percentageEvaluationAttribute":{"type":"string","description":"The user attribute used for percentage evaluation. If not set, it defaults to the Identifier user object attribute.\n"},"settingId":{"type":"string","description":"The ID of the Feature Flag or Setting.\n"},"settingType":{"type":"string","description":"The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`.\n"},"targetingRules":{"type":"array","items":{"$ref":"#/types/configcat:index/SettingValueV2TargetingRule:SettingValueV2TargetingRule"},"description":"The targeting rules of the Feature Flag or Setting\n"},"value":{"$ref":"#/types/configcat:index/SettingValueV2Value:SettingValueV2Value","description":"Represents the value of a Feature Flag or Setting.\n"}},"required":["environmentId","initOnly","settingId","settingType","value"],"inputProperties":{"environmentId":{"type":"string","description":"The ID of the Environment.\n"},"initOnly":{"type":"boolean"},"mandatoryNotes":{"type":"string","description":"If the Product's \"Mandatory notes\" preference is turned on for the Environment the Mandatory note must be passed.\n"},"percentageEvaluationAttribute":{"type":"string","description":"The user attribute used for percentage evaluation. If not set, it defaults to the Identifier user object attribute.\n"},"settingId":{"type":"string","description":"The ID of the Feature Flag or Setting.\n"},"targetingRules":{"type":"array","items":{"$ref":"#/types/configcat:index/SettingValueV2TargetingRule:SettingValueV2TargetingRule"},"description":"The targeting rules of the Feature Flag or Setting\n"},"value":{"$ref":"#/types/configcat:index/SettingValueV2Value:SettingValueV2Value","description":"Represents the value of a Feature Flag or Setting.\n"}},"requiredInputs":["environmentId","settingId","value"],"stateInputs":{"description":"Input properties used for looking up and filtering SettingValueV2 resources.\n","properties":{"environmentId":{"type":"string","description":"The ID of the Environment.\n"},"initOnly":{"type":"boolean"},"mandatoryNotes":{"type":"string","description":"If the Product's \"Mandatory notes\" preference is turned on for the Environment the Mandatory note must be passed.\n"},"percentageEvaluationAttribute":{"type":"string","description":"The user attribute used for percentage evaluation. If not set, it defaults to the Identifier user object attribute.\n"},"settingId":{"type":"string","description":"The ID of the Feature Flag or Setting.\n"},"settingType":{"type":"string","description":"The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`.\n"},"targetingRules":{"type":"array","items":{"$ref":"#/types/configcat:index/SettingValueV2TargetingRule:SettingValueV2TargetingRule"},"description":"The targeting rules of the Feature Flag or Setting\n"},"value":{"$ref":"#/types/configcat:index/SettingValueV2Value:SettingValueV2Value","description":"Represents the value of a Feature Flag or Setting.\n"}},"type":"object"}},"configcat:index/tag:Tag":{"description":"Creates and manages a **Tag**.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst config = new pulumi.Config();\nconst productId = config.require(\"productId\");\nconst myTag = new configcat.Tag(\"my_tag\", {\n    productId: productId,\n    name: \"Created by Terraform\",\n    color: \"panther\",\n});\nexport const tagId = myTag.id;\n```\n```python\nimport pulumi\nimport pulumiverse_configcat as configcat\n\nconfig = pulumi.Config()\nproduct_id = config.require(\"productId\")\nmy_tag = configcat.Tag(\"my_tag\",\n    product_id=product_id,\n    name=\"Created by Terraform\",\n    color=\"panther\")\npulumi.export(\"tagId\", my_tag.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var productId = config.Require(\"productId\");\n    var myTag = new Configcat.Tag(\"my_tag\", new()\n    {\n        ProductId = productId,\n        Name = \"Created by Terraform\",\n        Color = \"panther\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"tagId\"] = myTag.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tproductId := cfg.Require(\"productId\")\n\t\tmyTag, err := configcat.NewTag(ctx, \"my_tag\", \u0026configcat.TagArgs{\n\t\t\tProductId: pulumi.String(productId),\n\t\t\tName:      pulumi.String(\"Created by Terraform\"),\n\t\t\tColor:     pulumi.String(\"panther\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"tagId\", myTag.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.Tag;\nimport com.pulumi.configcat.TagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var productId = config.get(\"productId\");\n        var myTag = new Tag(\"myTag\", TagArgs.builder()\n            .productId(productId)\n            .name(\"Created by Terraform\")\n            .color(\"panther\")\n            .build());\n\n        ctx.export(\"tagId\", myTag.id());\n    }\n}\n```\n```yaml\nconfiguration:\n  productId:\n    type: string\nresources:\n  myTag:\n    type: configcat:Tag\n    name: my_tag\n    properties:\n      productId: ${productId}\n      name: Created by Terraform\n      color: panther\noutputs:\n  tagId: ${myTag.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nTags can be imported using the TagId. Get the TagId using e.g. the [List Tags API](https://api.configcat.com/docs/#tag/Tags/operation/get-tags).\n\n```sh\n$ pulumi import configcat:index/tag:Tag example 1234\n```\n\n","properties":{"color":{"type":"string","description":"The color of the Tag. Default value. `panther`. Valid values: `panther`|`whale`|`salmon`|`lizard`|`canary`|`koala`.\n"},"name":{"type":"string","description":"The name of the Tag.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"required":["color","name","productId"],"inputProperties":{"color":{"type":"string","description":"The color of the Tag. Default value. `panther`. Valid values: `panther`|`whale`|`salmon`|`lizard`|`canary`|`koala`.\n"},"name":{"type":"string","description":"The name of the Tag.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"requiredInputs":["productId"],"stateInputs":{"description":"Input properties used for looking up and filtering Tag resources.\n","properties":{"color":{"type":"string","description":"The color of the Tag. Default value. `panther`. Valid values: `panther`|`whale`|`salmon`|`lizard`|`canary`|`koala`.\n"},"name":{"type":"string","description":"The name of the Tag.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"type":"object"}},"configcat:index/webhook:Webhook":{"description":"Creates and manages a **Webhook**. [What is a Webhook in ConfigCat?](https://configcat.com/docs/advanced/notifications-webhooks/)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.Webhook;\nimport com.pulumi.configcat.WebhookArgs;\nimport com.pulumi.configcat.inputs.WebhookWebhookHeaderArgs;\nimport com.pulumi.configcat.inputs.WebhookSecureWebhookHeaderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var configId = config.get(\"configId\");\n        final var environmentId = config.get(\"environmentId\");\n        var myWebhook = new Webhook(\"myWebhook\", WebhookArgs.builder()\n            .configId(configId)\n            .environmentId(environmentId)\n            .url(\"https://example.com\")\n            .httpMethod(\"post\")\n            .content(\"The HTTP body content.\")\n            .webhookHeaders(WebhookWebhookHeaderArgs.builder()\n%!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression))\n                .secureWebhookHeaders(WebhookSecureWebhookHeaderArgs.builder()\n%!v(PANIC=Format method: interface conversion: model.Expression is *model.TemplateExpression, not *model.LiteralValueExpression))\n                    .build());\n\n                ctx.export(\"webhookId\", myWebhook.id());\n            }\n}\n```\n```yaml\nconfiguration:\n  configId:\n    type: string\n  environmentId:\n    type: string\nresources:\n  myWebhook:\n    type: configcat:Webhook\n    name: my_webhook\n    properties:\n      configId: ${configId}\n      environmentId: ${environmentId}\n      url: https://example.com\n      httpMethod: post\n      content: The HTTP body content.\n      webhookHeaders:\n        - webhookheaderkey: webhookheadervalue\n      secureWebhookHeaders:\n        - securewebhookheaderkey: securewebhookheadervalue\noutputs:\n  webhookId: ${myWebhook.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nWebhooks can be imported using the WebhookId. Get the WebhookId using the [List Webhooks API](https://api.configcat.com/docs/index.html#tag/Webhooks/operation/get-webhooks) for example.\n\nIt is important to note that webhooks containing secure webhook headers cannot be imported via `pulumi import`.\n\nIf you want to manage your webhooks that already contain secure webhook headers, you should create brand new configcat_webhook resources in Terraform without importing them. After they are created successfully and managed by Terraform, you can safely delete the old, non Terraform managed webhook from the ConfigCat Dashboard.\n\n```sh\n$ pulumi import configcat:index/webhook:Webhook example 1234\n```\n\n","properties":{"configId":{"type":"string","description":"The ID of the Config.\n"},"content":{"type":"string","description":"The HTTP body content.\n"},"environmentId":{"type":"string","description":"The ID of the Environment.\n"},"httpMethod":{"type":"string","description":"The HTTP method. Available values: `get`|`post`. Default: `get`\n"},"secureWebhookHeaders":{"type":"array","items":{"$ref":"#/types/configcat:index/WebhookSecureWebhookHeader:WebhookSecureWebhookHeader"}},"url":{"type":"string","description":"The URL of the Webhook.\n"},"webhookHeaders":{"type":"array","items":{"$ref":"#/types/configcat:index/WebhookWebhookHeader:WebhookWebhookHeader"},"description":"List of plain text HTTP headers. The value of a plain text header is always visible for everyone. It also appears in audit logs and on the webhook test UI.\n"}},"required":["configId","environmentId","httpMethod","url"],"inputProperties":{"configId":{"type":"string","description":"The ID of the Config.\n"},"content":{"type":"string","description":"The HTTP body content.\n"},"environmentId":{"type":"string","description":"The ID of the Environment.\n"},"httpMethod":{"type":"string","description":"The HTTP method. Available values: `get`|`post`. Default: `get`\n"},"secureWebhookHeaders":{"type":"array","items":{"$ref":"#/types/configcat:index/WebhookSecureWebhookHeader:WebhookSecureWebhookHeader"}},"url":{"type":"string","description":"The URL of the Webhook.\n"},"webhookHeaders":{"type":"array","items":{"$ref":"#/types/configcat:index/WebhookWebhookHeader:WebhookWebhookHeader"},"description":"List of plain text HTTP headers. The value of a plain text header is always visible for everyone. It also appears in audit logs and on the webhook test UI.\n"}},"requiredInputs":["configId","environmentId","url"],"stateInputs":{"description":"Input properties used for looking up and filtering Webhook resources.\n","properties":{"configId":{"type":"string","description":"The ID of the Config.\n"},"content":{"type":"string","description":"The HTTP body content.\n"},"environmentId":{"type":"string","description":"The ID of the Environment.\n"},"httpMethod":{"type":"string","description":"The HTTP method. Available values: `get`|`post`. Default: `get`\n"},"secureWebhookHeaders":{"type":"array","items":{"$ref":"#/types/configcat:index/WebhookSecureWebhookHeader:WebhookSecureWebhookHeader"}},"url":{"type":"string","description":"The URL of the Webhook.\n"},"webhookHeaders":{"type":"array","items":{"$ref":"#/types/configcat:index/WebhookWebhookHeader:WebhookWebhookHeader"},"description":"List of plain text HTTP headers. The value of a plain text header is always visible for everyone. It also appears in audit logs and on the webhook test UI.\n"}},"type":"object"}}},"functions":{"configcat:index/getConfigurations:getConfigurations":{"description":"Use this data source to access information about existing **Configs**. [What is a Config in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst config = new pulumi.Config();\nconst productId = config.require(\"productId\");\nconst myConfigs = configcat.getConfigurations({\n    productId: productId,\n    nameFilterRegex: \"Main Config\",\n});\nexport const configId = myConfigs.then(myConfigs =\u003e myConfigs.configs?.[0]?.configId);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nconfig = pulumi.Config()\nproduct_id = config.require(\"productId\")\nmy_configs = configcat.get_configurations(product_id=product_id,\n    name_filter_regex=\"Main Config\")\npulumi.export(\"configId\", my_configs.configs[0].config_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var productId = config.Require(\"productId\");\n    var myConfigs = Configcat.GetConfigurations.Invoke(new()\n    {\n        ProductId = productId,\n        NameFilterRegex = \"Main Config\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"configId\"] = myConfigs.Apply(getConfigurationsResult =\u003e getConfigurationsResult.Configs[0]?.ConfigId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tproductId := cfg.Require(\"productId\")\n\t\tmyConfigs, err := configcat.GetConfigurations(ctx, \u0026configcat.GetConfigurationsArgs{\n\t\t\tProductId:       productId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Main Config\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"configId\", myConfigs.Configs[0].ConfigId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetConfigurationsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var productId = config.get(\"productId\");\n        final var myConfigs = ConfigcatFunctions.getConfigurations(GetConfigurationsArgs.builder()\n            .productId(productId)\n            .nameFilterRegex(\"Main Config\")\n            .build());\n\n        ctx.export(\"configId\", myConfigs.applyValue(getConfigurationsResult -\u003e getConfigurationsResult.configs()[0].configId()));\n    }\n}\n```\n```yaml\nconfiguration:\n  productId:\n    type: string\nvariables:\n  myConfigs:\n    fn::invoke:\n      function: configcat:getConfigurations\n      arguments:\n        productId: ${productId}\n        nameFilterRegex: Main Config\noutputs:\n  configId: ${myConfigs.configs[0].configId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n","inputs":{"description":"A collection of arguments for invoking getConfigurations.\n","properties":{"nameFilterRegex":{"type":"string","description":"Filter the Configs by name.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"type":"object","required":["productId"]},"outputs":{"description":"A collection of values returned by getConfigurations.\n","properties":{"configs":{"items":{"$ref":"#/types/configcat:index/getConfigurationsConfig:getConfigurationsConfig"},"type":"array"},"id":{"description":"Internal ID of the data source. Do not use.\n","type":"string"},"nameFilterRegex":{"description":"Filter the Configs by name.\n","type":"string"},"productId":{"description":"The ID of the Product.\n","type":"string"}},"required":["configs","id","productId"],"type":"object"}},"configcat:index/getEnvironments:getEnvironments":{"description":"Use this data source to access information about existing **Environments**. [What is an Environment in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst config = new pulumi.Config();\nconst productId = config.require(\"productId\");\nconst myEnvironments = configcat.getEnvironments({\n    productId: productId,\n    nameFilterRegex: \"Test\",\n});\nexport const environmentId = myEnvironments.then(myEnvironments =\u003e myEnvironments.environments?.[0]?.environmentId);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nconfig = pulumi.Config()\nproduct_id = config.require(\"productId\")\nmy_environments = configcat.get_environments(product_id=product_id,\n    name_filter_regex=\"Test\")\npulumi.export(\"environmentId\", my_environments.environments[0].environment_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var productId = config.Require(\"productId\");\n    var myEnvironments = Configcat.GetEnvironments.Invoke(new()\n    {\n        ProductId = productId,\n        NameFilterRegex = \"Test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"environmentId\"] = myEnvironments.Apply(getEnvironmentsResult =\u003e getEnvironmentsResult.Environments[0]?.EnvironmentId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tproductId := cfg.Require(\"productId\")\n\t\tmyEnvironments, err := configcat.GetEnvironments(ctx, \u0026configcat.GetEnvironmentsArgs{\n\t\t\tProductId:       productId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"environmentId\", myEnvironments.Environments[0].EnvironmentId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetEnvironmentsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var productId = config.get(\"productId\");\n        final var myEnvironments = ConfigcatFunctions.getEnvironments(GetEnvironmentsArgs.builder()\n            .productId(productId)\n            .nameFilterRegex(\"Test\")\n            .build());\n\n        ctx.export(\"environmentId\", myEnvironments.applyValue(getEnvironmentsResult -\u003e getEnvironmentsResult.environments()[0].environmentId()));\n    }\n}\n```\n```yaml\nconfiguration:\n  productId:\n    type: string\nvariables:\n  myEnvironments:\n    fn::invoke:\n      function: configcat:getEnvironments\n      arguments:\n        productId: ${productId}\n        nameFilterRegex: Test\noutputs:\n  environmentId: ${myEnvironments.environments[0].environmentId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n","inputs":{"description":"A collection of arguments for invoking getEnvironments.\n","properties":{"nameFilterRegex":{"type":"string","description":"Filter the Environments by name.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"type":"object","required":["productId"]},"outputs":{"description":"A collection of values returned by getEnvironments.\n","properties":{"environments":{"items":{"$ref":"#/types/configcat:index/getEnvironmentsEnvironment:getEnvironmentsEnvironment"},"type":"array"},"id":{"description":"Internal ID of the data source. Do not use.\n","type":"string"},"nameFilterRegex":{"description":"Filter the Environments by name.\n","type":"string"},"productId":{"description":"The ID of the Product.\n","type":"string"}},"required":["environments","id","productId"],"type":"object"}},"configcat:index/getOrganizations:getOrganizations":{"description":"Use this data source to access information about existing **Organizations**. [What is an Organization in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst myOrganizations = configcat.getOrganizations({\n    nameFilterRegex: \"ConfigCat\",\n});\nexport const organizationId = myOrganizations.then(myOrganizations =\u003e myOrganizations.organizations?.[0]?.organizationId);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nmy_organizations = configcat.get_organizations(name_filter_regex=\"ConfigCat\")\npulumi.export(\"organizationId\", my_organizations.organizations[0].organization_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myOrganizations = Configcat.GetOrganizations.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"organizationId\"] = myOrganizations.Apply(getOrganizationsResult =\u003e getOrganizationsResult.Organizations[0]?.OrganizationId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyOrganizations, err := configcat.GetOrganizations(ctx, \u0026configcat.GetOrganizationsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"organizationId\", myOrganizations.Organizations[0].OrganizationId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetOrganizationsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myOrganizations = ConfigcatFunctions.getOrganizations(GetOrganizationsArgs.builder()\n            .nameFilterRegex(\"ConfigCat\")\n            .build());\n\n        ctx.export(\"organizationId\", myOrganizations.applyValue(getOrganizationsResult -\u003e getOrganizationsResult.organizations()[0].organizationId()));\n    }\n}\n```\n```yaml\nvariables:\n  myOrganizations:\n    fn::invoke:\n      function: configcat:getOrganizations\n      arguments:\n        nameFilterRegex: ConfigCat\noutputs:\n  organizationId: ${myOrganizations.organizations[0].organizationId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n","inputs":{"description":"A collection of arguments for invoking getOrganizations.\n","properties":{"nameFilterRegex":{"type":"string","description":"Filter the Organizations by name.\n"}},"type":"object"},"outputs":{"description":"A collection of values returned by getOrganizations.\n","properties":{"id":{"description":"Internal ID of the data source. Do not use.\n","type":"string"},"nameFilterRegex":{"description":"Filter the Organizations by name.\n","type":"string"},"organizations":{"items":{"$ref":"#/types/configcat:index/getOrganizationsOrganization:getOrganizationsOrganization"},"type":"array"}},"required":["id","organizations"],"type":"object"}},"configcat:index/getPermissionGroups:getPermissionGroups":{"description":"Use this data source to access information about existing **Permission Groups**. [What is a Permission Group in ConfigCat?](https://configcat.com/docs/advanced/team-management/team-management-basics/#permissions--permission-groups-product-level)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst config = new pulumi.Config();\nconst productId = config.require(\"productId\");\nconst myPermissionGroups = configcat.getPermissionGroups({\n    productId: productId,\n    nameFilterRegex: \"Administrators\",\n});\nexport const permissionGroupId = myPermissionGroups.then(myPermissionGroups =\u003e myPermissionGroups.permissionGroups?.[0]?.permissionGroupId);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nconfig = pulumi.Config()\nproduct_id = config.require(\"productId\")\nmy_permission_groups = configcat.get_permission_groups(product_id=product_id,\n    name_filter_regex=\"Administrators\")\npulumi.export(\"permissionGroupId\", my_permission_groups.permission_groups[0].permission_group_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var productId = config.Require(\"productId\");\n    var myPermissionGroups = Configcat.GetPermissionGroups.Invoke(new()\n    {\n        ProductId = productId,\n        NameFilterRegex = \"Administrators\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"permissionGroupId\"] = myPermissionGroups.Apply(getPermissionGroupsResult =\u003e getPermissionGroupsResult.PermissionGroups[0]?.PermissionGroupId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tproductId := cfg.Require(\"productId\")\n\t\tmyPermissionGroups, err := configcat.GetPermissionGroups(ctx, \u0026configcat.GetPermissionGroupsArgs{\n\t\t\tProductId:       productId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Administrators\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"permissionGroupId\", myPermissionGroups.PermissionGroups[0].PermissionGroupId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetPermissionGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var productId = config.get(\"productId\");\n        final var myPermissionGroups = ConfigcatFunctions.getPermissionGroups(GetPermissionGroupsArgs.builder()\n            .productId(productId)\n            .nameFilterRegex(\"Administrators\")\n            .build());\n\n        ctx.export(\"permissionGroupId\", myPermissionGroups.applyValue(getPermissionGroupsResult -\u003e getPermissionGroupsResult.permissionGroups()[0].permissionGroupId()));\n    }\n}\n```\n```yaml\nconfiguration:\n  productId:\n    type: string\nvariables:\n  myPermissionGroups:\n    fn::invoke:\n      function: configcat:getPermissionGroups\n      arguments:\n        productId: ${productId}\n        nameFilterRegex: Administrators\noutputs:\n  permissionGroupId: ${myPermissionGroups.permissionGroups[0].permissionGroupId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n","inputs":{"description":"A collection of arguments for invoking getPermissionGroups.\n","properties":{"nameFilterRegex":{"type":"string","description":"Filter the Permission Groups by name.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"type":"object","required":["productId"]},"outputs":{"description":"A collection of values returned by getPermissionGroups.\n","properties":{"id":{"description":"Internal ID of the data source. Do not use.\n","type":"string"},"nameFilterRegex":{"description":"Filter the Permission Groups by name.\n","type":"string"},"permissionGroups":{"items":{"$ref":"#/types/configcat:index/getPermissionGroupsPermissionGroup:getPermissionGroupsPermissionGroup"},"type":"array"},"productId":{"description":"The ID of the Product.\n","type":"string"}},"required":["id","permissionGroups","productId"],"type":"object"}},"configcat:index/getProducts:getProducts":{"description":"Use this data source to access information about existing **Products**. [What is a Product in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nexport const productId = myProducts.then(myProducts =\u003e myProducts.products?.[0]?.productId);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\npulumi.export(\"productId\", my_products.products[0].product_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"productId\"] = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"productId\", myProducts.Products[0].ProductId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        ctx.export(\"productId\", myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()));\n    }\n}\n```\n```yaml\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\noutputs:\n  productId: ${myProducts.products[0].productId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n","inputs":{"description":"A collection of arguments for invoking getProducts.\n","properties":{"nameFilterRegex":{"type":"string","description":"Filter the Products by name.\n"}},"type":"object"},"outputs":{"description":"A collection of values returned by getProducts.\n","properties":{"id":{"description":"Internal ID of the data source. Do not use.\n","type":"string"},"nameFilterRegex":{"description":"Filter the Products by name.\n","type":"string"},"products":{"items":{"$ref":"#/types/configcat:index/getProductsProduct:getProductsProduct"},"type":"array"}},"required":["id","products"],"type":"object"}},"configcat:index/getSdkKeys:getSdkKeys":{"description":"Use this data source to access information about existing **SDK Keys**.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst config = new pulumi.Config();\nconst configId = config.require(\"configId\");\nconst environmentId = config.require(\"environmentId\");\nconst mySdkkey = configcat.getSdkKeys({\n    configId: configId,\n    environmentId: environmentId,\n});\nexport const primarySdkkey = mySdkkey.then(mySdkkey =\u003e mySdkkey.primary);\nexport const secondarySdkkey = mySdkkey.then(mySdkkey =\u003e mySdkkey.secondary);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nconfig = pulumi.Config()\nconfig_id = config.require(\"configId\")\nenvironment_id = config.require(\"environmentId\")\nmy_sdkkey = configcat.get_sdk_keys(config_id=config_id,\n    environment_id=environment_id)\npulumi.export(\"primarySdkkey\", my_sdkkey.primary)\npulumi.export(\"secondarySdkkey\", my_sdkkey.secondary)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var configId = config.Require(\"configId\");\n    var environmentId = config.Require(\"environmentId\");\n    var mySdkkey = Configcat.GetSdkKeys.Invoke(new()\n    {\n        ConfigId = configId,\n        EnvironmentId = environmentId,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"primarySdkkey\"] = mySdkkey.Apply(getSdkKeysResult =\u003e getSdkKeysResult.Primary),\n        [\"secondarySdkkey\"] = mySdkkey.Apply(getSdkKeysResult =\u003e getSdkKeysResult.Secondary),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tconfigId := cfg.Require(\"configId\")\n\t\tenvironmentId := cfg.Require(\"environmentId\")\n\t\tmySdkkey, err := configcat.GetSdkKeys(ctx, \u0026configcat.GetSdkKeysArgs{\n\t\t\tConfigId:      configId,\n\t\t\tEnvironmentId: environmentId,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"primarySdkkey\", mySdkkey.Primary)\n\t\tctx.Export(\"secondarySdkkey\", mySdkkey.Secondary)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetSdkKeysArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var configId = config.get(\"configId\");\n        final var environmentId = config.get(\"environmentId\");\n        final var mySdkkey = ConfigcatFunctions.getSdkKeys(GetSdkKeysArgs.builder()\n            .configId(configId)\n            .environmentId(environmentId)\n            .build());\n\n        ctx.export(\"primarySdkkey\", mySdkkey.applyValue(getSdkKeysResult -\u003e getSdkKeysResult.primary()));\n        ctx.export(\"secondarySdkkey\", mySdkkey.applyValue(getSdkKeysResult -\u003e getSdkKeysResult.secondary()));\n    }\n}\n```\n```yaml\nconfiguration:\n  configId:\n    type: string\n  environmentId:\n    type: string\nvariables:\n  mySdkkey:\n    fn::invoke:\n      function: configcat:getSdkKeys\n      arguments:\n        configId: ${configId}\n        environmentId: ${environmentId}\noutputs:\n  primarySdkkey: ${mySdkkey.primary}\n  secondarySdkkey: ${mySdkkey.secondary}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n","inputs":{"description":"A collection of arguments for invoking getSdkKeys.\n","properties":{"configId":{"type":"string","description":"The ID of the Config.\n"},"environmentId":{"type":"string","description":"The ID of the Environment.\n"}},"type":"object","required":["configId","environmentId"]},"outputs":{"description":"A collection of values returned by getSdkKeys.\n","properties":{"configId":{"description":"The ID of the Config.\n","type":"string"},"environmentId":{"description":"The ID of the Environment.\n","type":"string"},"id":{"description":"Internal ID of the data source. Do not use.\n","type":"string"},"primary":{"description":"The primary SDK Key associated with your **Config** and **Environment**.\n","type":"string"},"secondary":{"description":"The secondary SDK Key associated with your **Config** and **Environment**.\n","type":"string"}},"required":["configId","environmentId","id","primary","secondary"],"type":"object"}},"configcat:index/getSegments:getSegments":{"description":"Use this data source to access information about existing **Segments**. [What is a Segment in ConfigCat?](https://configcat.com/docs/advanced/segments)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst config = new pulumi.Config();\nconst productId = config.require(\"productId\");\nconst mySegments = configcat.getSegments({\n    productId: productId,\n    nameFilterRegex: \"Beta users\",\n});\nexport const segmentId = mySegments.then(mySegments =\u003e mySegments.segments?.[0]?.segmentId);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nconfig = pulumi.Config()\nproduct_id = config.require(\"productId\")\nmy_segments = configcat.get_segments(product_id=product_id,\n    name_filter_regex=\"Beta users\")\npulumi.export(\"segmentId\", my_segments.segments[0].segment_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var productId = config.Require(\"productId\");\n    var mySegments = Configcat.GetSegments.Invoke(new()\n    {\n        ProductId = productId,\n        NameFilterRegex = \"Beta users\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"segmentId\"] = mySegments.Apply(getSegmentsResult =\u003e getSegmentsResult.Segments[0]?.SegmentId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tproductId := cfg.Require(\"productId\")\n\t\tmySegments, err := configcat.GetSegments(ctx, \u0026configcat.GetSegmentsArgs{\n\t\t\tProductId:       productId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Beta users\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"segmentId\", mySegments.Segments[0].SegmentId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetSegmentsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var productId = config.get(\"productId\");\n        final var mySegments = ConfigcatFunctions.getSegments(GetSegmentsArgs.builder()\n            .productId(productId)\n            .nameFilterRegex(\"Beta users\")\n            .build());\n\n        ctx.export(\"segmentId\", mySegments.applyValue(getSegmentsResult -\u003e getSegmentsResult.segments()[0].segmentId()));\n    }\n}\n```\n```yaml\nconfiguration:\n  productId:\n    type: string\nvariables:\n  mySegments:\n    fn::invoke:\n      function: configcat:getSegments\n      arguments:\n        productId: ${productId}\n        nameFilterRegex: Beta users\noutputs:\n  segmentId: ${mySegments.segments[0].segmentId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n","inputs":{"description":"A collection of arguments for invoking getSegments.\n","properties":{"nameFilterRegex":{"type":"string","description":"Filter the Segments by name.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"type":"object","required":["productId"]},"outputs":{"description":"A collection of values returned by getSegments.\n","properties":{"id":{"description":"Internal ID of the data source. Do not use.\n","type":"string"},"nameFilterRegex":{"description":"Filter the Segments by name.\n","type":"string"},"productId":{"description":"The ID of the Product.\n","type":"string"},"segments":{"items":{"$ref":"#/types/configcat:index/getSegmentsSegment:getSegmentsSegment"},"type":"array"}},"required":["id","productId","segments"],"type":"object"}},"configcat:index/getSettings:getSettings":{"description":"Use this data source to access information about existing **Feature Flags or Settings**. [What is a Feature Flag or Setting in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst config = new pulumi.Config();\nconst configId = config.require(\"configId\");\nconst settings = configcat.getSettings({\n    configId: configId,\n    keyFilterRegex: \"isAwesomeFeatureEnabled\",\n});\nexport const settingId = settings.then(settings =\u003e settings.settings?.[0]?.settingId);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nconfig = pulumi.Config()\nconfig_id = config.require(\"configId\")\nsettings = configcat.get_settings(config_id=config_id,\n    key_filter_regex=\"isAwesomeFeatureEnabled\")\npulumi.export(\"settingId\", settings.settings[0].setting_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var configId = config.Require(\"configId\");\n    var settings = Configcat.GetSettings.Invoke(new()\n    {\n        ConfigId = configId,\n        KeyFilterRegex = \"isAwesomeFeatureEnabled\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"settingId\"] = settings.Apply(getSettingsResult =\u003e getSettingsResult.Settings[0]?.SettingId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tconfigId := cfg.Require(\"configId\")\n\t\tsettings, err := configcat.GetSettings(ctx, \u0026configcat.GetSettingsArgs{\n\t\t\tConfigId:       configId,\n\t\t\tKeyFilterRegex: pulumi.StringRef(\"isAwesomeFeatureEnabled\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"settingId\", settings.Settings[0].SettingId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var configId = config.get(\"configId\");\n        final var settings = ConfigcatFunctions.getSettings(GetSettingsArgs.builder()\n            .configId(configId)\n            .keyFilterRegex(\"isAwesomeFeatureEnabled\")\n            .build());\n\n        ctx.export(\"settingId\", settings.applyValue(getSettingsResult -\u003e getSettingsResult.settings()[0].settingId()));\n    }\n}\n```\n```yaml\nconfiguration:\n  configId:\n    type: string\nvariables:\n  settings:\n    fn::invoke:\n      function: configcat:getSettings\n      arguments:\n        configId: ${configId}\n        keyFilterRegex: isAwesomeFeatureEnabled\noutputs:\n  settingId: ${settings.settings[0].settingId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n","inputs":{"description":"A collection of arguments for invoking getSettings.\n","properties":{"configId":{"type":"string","description":"The ID of the Config.\n"},"keyFilterRegex":{"type":"string","description":"Filter the Feature Flags or Settingss by key.\n"}},"type":"object","required":["configId"]},"outputs":{"description":"A collection of values returned by getSettings.\n","properties":{"configId":{"description":"The ID of the Config.\n","type":"string"},"id":{"description":"Internal ID of the data source. Do not use.\n","type":"string"},"keyFilterRegex":{"description":"Filter the Feature Flags or Settingss by key.\n","type":"string"},"settings":{"items":{"$ref":"#/types/configcat:index/getSettingsSetting:getSettingsSetting"},"type":"array"}},"required":["configId","id","settings"],"type":"object"}},"configcat:index/getTags:getTags":{"description":"Use this data source to access information about existing **Tags**. [What is a Tag in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst config = new pulumi.Config();\nconst productId = config.require(\"productId\");\nconst myTags = configcat.getTags({\n    productId: productId,\n    nameFilterRegex: \"Test\",\n});\nexport const tagId = myTags.then(myTags =\u003e myTags.tags?.[0]?.tagId);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nconfig = pulumi.Config()\nproduct_id = config.require(\"productId\")\nmy_tags = configcat.get_tags(product_id=product_id,\n    name_filter_regex=\"Test\")\npulumi.export(\"tagId\", my_tags.tags[0].tag_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var productId = config.Require(\"productId\");\n    var myTags = Configcat.GetTags.Invoke(new()\n    {\n        ProductId = productId,\n        NameFilterRegex = \"Test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"tagId\"] = myTags.Apply(getTagsResult =\u003e getTagsResult.Tags[0]?.TagId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tproductId := cfg.Require(\"productId\")\n\t\tmyTags, err := configcat.GetTags(ctx, \u0026configcat.GetTagsArgs{\n\t\t\tProductId:       productId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"tagId\", myTags.Tags[0].TagId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetTagsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var productId = config.get(\"productId\");\n        final var myTags = ConfigcatFunctions.getTags(GetTagsArgs.builder()\n            .productId(productId)\n            .nameFilterRegex(\"Test\")\n            .build());\n\n        ctx.export(\"tagId\", myTags.applyValue(getTagsResult -\u003e getTagsResult.tags()[0].tagId()));\n    }\n}\n```\n```yaml\nconfiguration:\n  productId:\n    type: string\nvariables:\n  myTags:\n    fn::invoke:\n      function: configcat:getTags\n      arguments:\n        productId: ${productId}\n        nameFilterRegex: Test\noutputs:\n  tagId: ${myTags.tags[0].tagId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n","inputs":{"description":"A collection of arguments for invoking getTags.\n","properties":{"nameFilterRegex":{"type":"string","description":"Filter the Tags by name.\n"},"productId":{"type":"string","description":"The ID of the Product.\n"}},"type":"object","required":["productId"]},"outputs":{"description":"A collection of values returned by getTags.\n","properties":{"id":{"description":"Internal ID of the data source. Do not use.\n","type":"string"},"nameFilterRegex":{"description":"Filter the Tags by name.\n","type":"string"},"productId":{"description":"The ID of the Product.\n","type":"string"},"tags":{"items":{"$ref":"#/types/configcat:index/getTagsTag:getTagsTag"},"type":"array"}},"required":["id","productId","tags"],"type":"object"}},"configcat:index/getWebhookSigningKeys:getWebhookSigningKeys":{"description":"Use this data source to access information about **Webhook Signing Keys**. [What is a Webhook in ConfigCat?](https://configcat.com/docs/advanced/notifications-webhooks/)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst config = new pulumi.Config();\nconst webhookId = config.requireNumber(\"webhookId\");\nconst test = configcat.getWebhookSigningKeys({\n    webhookId: webhookId,\n});\nexport const key1 = test.then(test =\u003e test.key1);\nexport const key2 = test.then(test =\u003e test.key2);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nconfig = pulumi.Config()\nwebhook_id = config.require_float(\"webhookId\")\ntest = configcat.get_webhook_signing_keys(webhook_id=webhook_id)\npulumi.export(\"key1\", test.key1)\npulumi.export(\"key2\", test.key2)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var webhookId = config.RequireDouble(\"webhookId\");\n    var test = Configcat.GetWebhookSigningKeys.Invoke(new()\n    {\n        WebhookId = webhookId,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"key1\"] = test.Apply(getWebhookSigningKeysResult =\u003e getWebhookSigningKeysResult.Key1),\n        [\"key2\"] = test.Apply(getWebhookSigningKeysResult =\u003e getWebhookSigningKeysResult.Key2),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\twebhookId := cfg.RequireFloat64(\"webhookId\")\n\t\ttest, err := configcat.GetWebhookSigningKeys(ctx, \u0026configcat.GetWebhookSigningKeysArgs{\n\t\t\tWebhookId: webhookId,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"key1\", test.Key1)\n\t\tctx.Export(\"key2\", test.Key2)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetWebhookSigningKeysArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var webhookId = config.get(\"webhookId\");\n        final var test = ConfigcatFunctions.getWebhookSigningKeys(GetWebhookSigningKeysArgs.builder()\n            .webhookId(webhookId)\n            .build());\n\n        ctx.export(\"key1\", test.applyValue(getWebhookSigningKeysResult -\u003e getWebhookSigningKeysResult.key1()));\n        ctx.export(\"key2\", test.applyValue(getWebhookSigningKeysResult -\u003e getWebhookSigningKeysResult.key2()));\n    }\n}\n```\n```yaml\nconfiguration:\n  webhookId:\n    type: number\nvariables:\n  test:\n    fn::invoke:\n      function: configcat:getWebhookSigningKeys\n      arguments:\n        webhookId: ${webhookId}\noutputs:\n  key1: ${test.key1}\n  key2: ${test.key2}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n","inputs":{"description":"A collection of arguments for invoking getWebhookSigningKeys.\n","properties":{"webhookId":{"type":"integer","description":"The ID of the Webhook.\n"}},"type":"object","required":["webhookId"]},"outputs":{"description":"A collection of values returned by getWebhookSigningKeys.\n","properties":{"id":{"description":"Internal ID of the data source. Do not use.\n","type":"string"},"key1":{"description":"The first signing key.\n","type":"string"},"key2":{"description":"The second signing key.\n","type":"string"},"webhookId":{"description":"The ID of the Webhook.\n","type":"integer"}},"required":["id","key1","key2","webhookId"],"type":"object"}}}}