{
    "name": "configcat",
    "displayName": "ConfigCat",
    "description": "A Pulumi package for creating and managing configcat cloud resources.",
    "keywords": [
        "pulumi",
        "configcat",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`configcat` Terraform Provider](https://github.com/configcat/terraform-provider-configcat).",
    "repository": "https://github.com/pulumiverse/pulumi-configcat",
    "logoUrl": "https://raw.githubusercontent.com/pulumiverse/pulumi-configcat/refs/heads/main/docs/configcat-logo.png",
    "pluginDownloadURL": "api://github.com/pulumiverse",
    "publisher": "Pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-configcat/sdk/v5/go/configcat",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageName": "@pulumiverse/configcat",
            "packageDescription": "A Pulumi package for creating and managing configcat cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/configcat/terraform-provider-configcat)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-configcat` repo](https://github.com/pulumiverse/pulumi-configcat/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-configcat` repo](https://github.com/configcat/terraform-provider-configcat/issues).",
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "packageName": "pulumiverse_configcat",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/configcat/terraform-provider-configcat)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-configcat` repo](https://github.com/pulumiverse/pulumi-configcat/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-configcat` repo](https://github.com/configcat/terraform-provider-configcat/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "basePath": {
                "type": "string",
                "description": "ConfigCat Public Management API's `base_path`. Defaults to [https://api.configcat.com](https://api.configcat.com). This\ncan also be sourced from the `CONFIGCAT_BASE_PATH` Environment Variable.\n",
                "defaultInfo": {
                    "environment": [
                        "CONFIGCAT_BASE_PATH"
                    ]
                }
            },
            "basicAuthPassword": {
                "type": "string",
                "description": "Get your `basic_auth_password` at [ConfigCat Public API\ncredentials](https://app.configcat.com/my-account/public-api-credentials). This can also be sourced from the\n`CONFIGCAT_BASIC_AUTH_PASSWORD` Environment Variable.\n",
                "defaultInfo": {
                    "environment": [
                        "CONFIGCAT_BASIC_AUTH_PASSWORD"
                    ]
                },
                "secret": true
            },
            "basicAuthUsername": {
                "type": "string",
                "description": "Get your `basic_auth_username` at [ConfigCat Public API\ncredentials](https://app.configcat.com/my-account/public-api-credentials). This can also be sourced from the\n`CONFIGCAT_BASIC_AUTH_USERNAME` Environment Variable.\n",
                "defaultInfo": {
                    "environment": [
                        "CONFIGCAT_BASIC_AUTH_USERNAME"
                    ]
                }
            }
        }
    },
    "types": {
        "configcat:index/SettingValuePercentageItem:SettingValuePercentageItem": {
            "properties": {
                "percentage": {
                    "type": "string",
                    "description": "Any [number](https://configcat.com/docs/advanced/targeting/#-value) between 0 and 100 that represents a randomly allocated fraction of your users.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The exact [value](https://configcat.com/docs/advanced/targeting/#served-value-1) that will be served to the users that fall into that fraction. Type: `string`. It must be compatible with the `setting_type`.\n"
                }
            },
            "type": "object",
            "required": [
                "percentage",
                "value"
            ]
        },
        "configcat:index/SettingValueRolloutRule:SettingValueRolloutRule": {
            "properties": {
                "comparator": {
                    "type": "string",
                    "description": "The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).\n"
                },
                "comparisonAttribute": {
                    "type": "string",
                    "description": "The [comparison attribute](https://configcat.com/docs/advanced/targeting/#comparison-attribute).\n"
                },
                "comparisonValue": {
                    "type": "string",
                    "description": "The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).\n"
                },
                "segmentComparator": {
                    "type": "string",
                    "description": "The segment_comparator. Possible values: isIn, isNotIn.\n"
                },
                "segmentId": {
                    "type": "string",
                    "description": "The [Segment's](https://configcat.com/docs/advanced/segments) unique identifier.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The exact [value](https://configcat.com/docs/advanced/targeting/#served-value) that will be served to the users who match the targeting rule. Type: `string`. It must be compatible with the `setting_type`.\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comparator",
                        "comparisonAttribute",
                        "comparisonValue",
                        "segmentComparator",
                        "segmentId",
                        "value"
                    ]
                }
            }
        },
        "configcat:index/SettingValueV2TargetingRule:SettingValueV2TargetingRule": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/SettingValueV2TargetingRuleCondition:SettingValueV2TargetingRuleCondition"
                    },
                    "description": "The conditions that are combined with the AND logical operator.\n"
                },
                "percentageOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/SettingValueV2TargetingRulePercentageOption:SettingValueV2TargetingRulePercentageOption"
                    },
                    "description": "The percentage options from where the evaluation process will choose a value based on the flag's percentage evaluation attribute.\n"
                },
                "value": {
                    "$ref": "#/types/configcat:index/SettingValueV2TargetingRuleValue:SettingValueV2TargetingRuleValue",
                    "description": "Represents the value of a Feature Flag or Setting.\n"
                }
            },
            "type": "object"
        },
        "configcat:index/SettingValueV2TargetingRuleCondition:SettingValueV2TargetingRuleCondition": {
            "properties": {
                "prerequisiteFlagCondition": {
                    "$ref": "#/types/configcat:index/SettingValueV2TargetingRuleConditionPrerequisiteFlagCondition:SettingValueV2TargetingRuleConditionPrerequisiteFlagCondition",
                    "description": "Describes a condition that is based on a prerequisite flag.\n"
                },
                "segmentCondition": {
                    "$ref": "#/types/configcat:index/SettingValueV2TargetingRuleConditionSegmentCondition:SettingValueV2TargetingRuleConditionSegmentCondition",
                    "description": "Describes a condition that is based on a segment.\n"
                },
                "userCondition": {
                    "$ref": "#/types/configcat:index/SettingValueV2TargetingRuleConditionUserCondition:SettingValueV2TargetingRuleConditionUserCondition",
                    "description": "Describes a condition that is based on user attributes.\n"
                }
            },
            "type": "object"
        },
        "configcat:index/SettingValueV2TargetingRuleConditionPrerequisiteFlagCondition:SettingValueV2TargetingRuleConditionPrerequisiteFlagCondition": {
            "properties": {
                "comparator": {
                    "type": "string",
                    "description": "Prerequisite flag comparison operator used during the evaluation process. Possible values: `equals`,`doesNotEqual`\n"
                },
                "comparisonValue": {
                    "$ref": "#/types/configcat:index/SettingValueV2TargetingRuleConditionPrerequisiteFlagConditionComparisonValue:SettingValueV2TargetingRuleConditionPrerequisiteFlagConditionComparisonValue",
                    "description": "Represents the value of a Feature Flag or Setting.\n"
                },
                "prerequisiteSettingId": {
                    "type": "string",
                    "description": "The prerequisite flag's identifier.\n"
                }
            },
            "type": "object",
            "required": [
                "comparator",
                "comparisonValue",
                "prerequisiteSettingId"
            ]
        },
        "configcat:index/SettingValueV2TargetingRuleConditionPrerequisiteFlagConditionComparisonValue:SettingValueV2TargetingRuleConditionPrerequisiteFlagConditionComparisonValue": {
            "properties": {
                "boolValue": {
                    "type": "boolean",
                    "description": "The boolean representation of the value.\n"
                },
                "doubleValue": {
                    "type": "number",
                    "description": "The decimal number representation of the value.\n"
                },
                "intValue": {
                    "type": "integer",
                    "description": "The whole number representation of the value.\n"
                },
                "stringValue": {
                    "type": "string",
                    "description": "The string representation of the value.\n"
                }
            },
            "type": "object"
        },
        "configcat:index/SettingValueV2TargetingRuleConditionSegmentCondition:SettingValueV2TargetingRuleConditionSegmentCondition": {
            "properties": {
                "comparator": {
                    "type": "string",
                    "description": "The segment comparison operator used during the evaluation process. Possible values: `isIn`,`isNotIn`\n"
                },
                "segmentId": {
                    "type": "string",
                    "description": "The segment's identifier.\n"
                }
            },
            "type": "object",
            "required": [
                "comparator",
                "segmentId"
            ]
        },
        "configcat:index/SettingValueV2TargetingRuleConditionUserCondition:SettingValueV2TargetingRuleConditionUserCondition": {
            "properties": {
                "comparator": {
                    "type": "string",
                    "description": "The comparison operator which defines the relation between the comparison attribute and the comparison value. For possible values check the [documentation](https://api.configcat.com/docs/index.html#tag/Feature-Flag-and-Setting-values-V2/operation/replace-setting-value-v2).\n"
                },
                "comparisonAttribute": {
                    "type": "string",
                    "description": "The User Object attribute that the condition is based on.\n"
                },
                "comparisonValue": {
                    "$ref": "#/types/configcat:index/SettingValueV2TargetingRuleConditionUserConditionComparisonValue:SettingValueV2TargetingRuleConditionUserConditionComparisonValue",
                    "description": "The value that the user object's attribute is compared to.\n"
                }
            },
            "type": "object",
            "required": [
                "comparator",
                "comparisonAttribute",
                "comparisonValue"
            ]
        },
        "configcat:index/SettingValueV2TargetingRuleConditionUserConditionComparisonValue:SettingValueV2TargetingRuleConditionUserConditionComparisonValue": {
            "properties": {
                "doubleValue": {
                    "type": "number",
                    "description": "The number representation of the comparison value.\n"
                },
                "listValues": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/SettingValueV2TargetingRuleConditionUserConditionComparisonValueListValue:SettingValueV2TargetingRuleConditionUserConditionComparisonValueListValue"
                    },
                    "description": "The list representation of the comparison value.\n"
                },
                "stringValue": {
                    "type": "string",
                    "description": "The string representation of the comparison value.\n"
                }
            },
            "type": "object"
        },
        "configcat:index/SettingValueV2TargetingRuleConditionUserConditionComparisonValueListValue:SettingValueV2TargetingRuleConditionUserConditionComparisonValueListValue": {
            "properties": {
                "hint": {
                    "type": "string",
                    "description": "An optional hint for the comparison value.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The actual comparison value.\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "configcat:index/SettingValueV2TargetingRulePercentageOption:SettingValueV2TargetingRulePercentageOption": {
            "properties": {
                "percentage": {
                    "type": "integer",
                    "description": "A number between 0 and 100 that represents a randomly allocated fraction of the users.\n"
                },
                "value": {
                    "$ref": "#/types/configcat:index/SettingValueV2TargetingRulePercentageOptionValue:SettingValueV2TargetingRulePercentageOptionValue",
                    "description": "Represents the value of a Feature Flag or Setting.\n"
                }
            },
            "type": "object",
            "required": [
                "percentage",
                "value"
            ]
        },
        "configcat:index/SettingValueV2TargetingRulePercentageOptionValue:SettingValueV2TargetingRulePercentageOptionValue": {
            "properties": {
                "boolValue": {
                    "type": "boolean",
                    "description": "The boolean representation of the value.\n"
                },
                "doubleValue": {
                    "type": "number",
                    "description": "The decimal number representation of the value.\n"
                },
                "intValue": {
                    "type": "integer",
                    "description": "The whole number representation of the value.\n"
                },
                "stringValue": {
                    "type": "string",
                    "description": "The string representation of the value.\n"
                }
            },
            "type": "object"
        },
        "configcat:index/SettingValueV2TargetingRuleValue:SettingValueV2TargetingRuleValue": {
            "properties": {
                "boolValue": {
                    "type": "boolean",
                    "description": "The boolean representation of the value.\n"
                },
                "doubleValue": {
                    "type": "number",
                    "description": "The decimal number representation of the value.\n"
                },
                "intValue": {
                    "type": "integer",
                    "description": "The whole number representation of the value.\n"
                },
                "stringValue": {
                    "type": "string",
                    "description": "The string representation of the value.\n"
                }
            },
            "type": "object"
        },
        "configcat:index/SettingValueV2Value:SettingValueV2Value": {
            "properties": {
                "boolValue": {
                    "type": "boolean",
                    "description": "The boolean representation of the value.\n"
                },
                "doubleValue": {
                    "type": "number",
                    "description": "The decimal number representation of the value.\n"
                },
                "intValue": {
                    "type": "integer",
                    "description": "The whole number representation of the value.\n"
                },
                "stringValue": {
                    "type": "string",
                    "description": "The string representation of the value.\n"
                }
            },
            "type": "object"
        },
        "configcat:index/WebhookSecureWebhookHeader:WebhookSecureWebhookHeader": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The HTTP header key.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The HTTP header value.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "configcat:index/WebhookWebhookHeader:WebhookWebhookHeader": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The HTTP header key.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The HTTP header value.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "configcat:index/getConfigurationsConfig:getConfigurationsConfig": {
            "properties": {
                "configId": {
                    "type": "string",
                    "description": "The unique Config ID.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Config.\n"
                },
                "evaluationVersion": {
                    "type": "string",
                    "description": "The evaluation version of the Config. Possible values: `v1`|`v2`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Config.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Config within a Product (zero-based).\n"
                }
            },
            "type": "object",
            "required": [
                "configId",
                "description",
                "evaluationVersion",
                "name",
                "order"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "configcat:index/getEnvironmentsEnvironment:getEnvironmentsEnvironment": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color of the Environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Environment.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "The unique Environment ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Environment.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Environment within a Product (zero-based).\n"
                }
            },
            "type": "object",
            "required": [
                "color",
                "description",
                "environmentId",
                "name",
                "order"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "configcat:index/getOrganizationsOrganization:getOrganizationsOrganization": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Organization.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The unique Organization ID.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "organizationId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "configcat:index/getPermissionGroupsPermissionGroup:getPermissionGroupsPermissionGroup": {
            "properties": {
                "accesstype": {
                    "type": "string",
                    "description": "Represent the Feature Management permission. Possible values: readOnly, full, custom\n"
                },
                "canCreateorupdateConfig": {
                    "type": "boolean",
                    "description": "Group members can create/update Configs.\n"
                },
                "canCreateorupdateEnvironment": {
                    "type": "boolean",
                    "description": "Group members can create/update Environments.\n"
                },
                "canCreateorupdateSegment": {
                    "type": "boolean",
                    "description": "Group members can create/update Segments.\n"
                },
                "canCreateorupdateSetting": {
                    "type": "boolean",
                    "description": "Group members can create/update Feature Flags and Settings.\n"
                },
                "canCreateorupdateTag": {
                    "type": "boolean",
                    "description": "Group members can create/update Tags.\n"
                },
                "canDeleteConfig": {
                    "type": "boolean",
                    "description": "Group members can delete Configs.\n"
                },
                "canDeleteEnvironment": {
                    "type": "boolean",
                    "description": "Group members can delete Environments.\n"
                },
                "canDeleteSegment": {
                    "type": "boolean",
                    "description": "Group members can delete Segments.\n"
                },
                "canDeleteSetting": {
                    "type": "boolean",
                    "description": "Group members can delete Feature Flags and Settings.\n"
                },
                "canDeleteTag": {
                    "type": "boolean",
                    "description": "Group members can delete Tags.\n"
                },
                "canDisable2fa": {
                    "type": "boolean",
                    "description": "Group members can disable two-factor authentication for other members.\n"
                },
                "canManageIntegrations": {
                    "type": "boolean",
                    "description": "Group members can add and configure integrations.\n"
                },
                "canManageMembers": {
                    "type": "boolean",
                    "description": "Group members can manage team members.\n"
                },
                "canManageProductPreferences": {
                    "type": "boolean",
                    "description": "Group members can update Product preferences.\n"
                },
                "canManageWebhook": {
                    "type": "boolean",
                    "description": "Group members can create/update/delete Webhooks.\n"
                },
                "canRotateSdkkey": {
                    "type": "boolean",
                    "description": "Group members can rotate SDK keys.\n"
                },
                "canTagSetting": {
                    "type": "boolean",
                    "description": "Group members can attach/detach Tags to Feature Flags and Settings.\n"
                },
                "canUseExportimport": {
                    "type": "boolean",
                    "description": "Group members can use the export/import feature.\n"
                },
                "canViewProductAuditlog": {
                    "type": "boolean",
                    "description": "Group members has access to audit logs.\n"
                },
                "canViewProductStatistics": {
                    "type": "boolean",
                    "description": "Group members has access to product statistics.\n"
                },
                "canViewSdkkey": {
                    "type": "boolean",
                    "description": "Group members has access to SDK keys.\n"
                },
                "environmentAccesses": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment specific permissions map block. Keys are the Environment IDs and the values represent the environment specific Feature Management permission. Possible values: full, readOnly\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Permission Group.\n"
                },
                "newEnvironmentAccesstype": {
                    "type": "string",
                    "description": "Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly, none\n"
                },
                "permissionGroupId": {
                    "type": "integer",
                    "description": "The unique Permission Group ID.\n"
                }
            },
            "type": "object",
            "required": [
                "accesstype",
                "canCreateorupdateConfig",
                "canCreateorupdateEnvironment",
                "canCreateorupdateSegment",
                "canCreateorupdateSetting",
                "canCreateorupdateTag",
                "canDeleteConfig",
                "canDeleteEnvironment",
                "canDeleteSegment",
                "canDeleteSetting",
                "canDeleteTag",
                "canDisable2fa",
                "canManageIntegrations",
                "canManageMembers",
                "canManageProductPreferences",
                "canManageWebhook",
                "canRotateSdkkey",
                "canTagSetting",
                "canUseExportimport",
                "canViewProductAuditlog",
                "canViewProductStatistics",
                "canViewSdkkey",
                "environmentAccesses",
                "name",
                "newEnvironmentAccesstype",
                "permissionGroupId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "configcat:index/getProductsProduct:getProductsProduct": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Product.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Product.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Product within a Product (zero-based).\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The unique Product ID.\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "order",
                "productId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "configcat:index/getSegmentsSegment:getSegmentsSegment": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Segment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Segment.\n"
                },
                "segmentId": {
                    "type": "string",
                    "description": "The unique Segment ID.\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "segmentId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "configcat:index/getSettingsSetting:getSettingsSetting": {
            "properties": {
                "hint": {
                    "type": "string",
                    "description": "The hint of the Feature Flag or Setting.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The key of the Feature Flag or Setting.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Feature Flag or Setting.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Feature Flag or Setting within a Config (zero-based).\n"
                },
                "settingId": {
                    "type": "string",
                    "description": "The unique Feature Flag or Setting ID.\n"
                },
                "settingType": {
                    "type": "string",
                    "description": "The Feature Flag or Setting's type. Available values: `boolean`|`string`|`int`|`double`.\n"
                }
            },
            "type": "object",
            "required": [
                "hint",
                "key",
                "name",
                "order",
                "settingId",
                "settingType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "configcat:index/getTagsTag:getTagsTag": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color of the Tag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Tag.\n"
                },
                "tagId": {
                    "type": "string",
                    "description": "The unique Tag ID.\n"
                }
            },
            "type": "object",
            "required": [
                "color",
                "name",
                "tagId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the configcat package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "basePath": {
                "type": "string",
                "description": "ConfigCat Public Management API's `base_path`. Defaults to [https://api.configcat.com](https://api.configcat.com). This\ncan also be sourced from the `CONFIGCAT_BASE_PATH` Environment Variable.\n"
            },
            "basicAuthPassword": {
                "type": "string",
                "description": "Get your `basic_auth_password` at [ConfigCat Public API\ncredentials](https://app.configcat.com/my-account/public-api-credentials). This can also be sourced from the\n`CONFIGCAT_BASIC_AUTH_PASSWORD` Environment Variable.\n",
                "secret": true
            },
            "basicAuthUsername": {
                "type": "string",
                "description": "Get your `basic_auth_username` at [ConfigCat Public API\ncredentials](https://app.configcat.com/my-account/public-api-credentials). This can also be sourced from the\n`CONFIGCAT_BASIC_AUTH_USERNAME` Environment Variable.\n"
            }
        },
        "inputProperties": {
            "basePath": {
                "type": "string",
                "description": "ConfigCat Public Management API's `base_path`. Defaults to [https://api.configcat.com](https://api.configcat.com). This\ncan also be sourced from the `CONFIGCAT_BASE_PATH` Environment Variable.\n",
                "defaultInfo": {
                    "environment": [
                        "CONFIGCAT_BASE_PATH"
                    ]
                }
            },
            "basicAuthPassword": {
                "type": "string",
                "description": "Get your `basic_auth_password` at [ConfigCat Public API\ncredentials](https://app.configcat.com/my-account/public-api-credentials). This can also be sourced from the\n`CONFIGCAT_BASIC_AUTH_PASSWORD` Environment Variable.\n",
                "defaultInfo": {
                    "environment": [
                        "CONFIGCAT_BASIC_AUTH_PASSWORD"
                    ]
                },
                "secret": true
            },
            "basicAuthUsername": {
                "type": "string",
                "description": "Get your `basic_auth_username` at [ConfigCat Public API\ncredentials](https://app.configcat.com/my-account/public-api-credentials). This can also be sourced from the\n`CONFIGCAT_BASIC_AUTH_USERNAME` Environment Variable.\n",
                "defaultInfo": {
                    "environment": [
                        "CONFIGCAT_BASIC_AUTH_USERNAME"
                    ]
                }
            }
        }
    },
    "resources": {
        "configcat:index/configuration:Configuration": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Config.\n"
                },
                "evaluationVersion": {
                    "type": "string",
                    "description": "The evaluation version of the Config. Possible values: `v1`, `v2`. Default value: `v1`. Using `v2` enables the new\nfeatures of [Config V2](https://configcat.com/docs/advanced/config-v2).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Config.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Config within a Product (zero-based). If multiple Configs has the same order, they are displayed in\nalphabetical order.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "required": [
                "description",
                "evaluationVersion",
                "name",
                "order",
                "productId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Config.\n"
                },
                "evaluationVersion": {
                    "type": "string",
                    "description": "The evaluation version of the Config. Possible values: `v1`, `v2`. Default value: `v1`. Using `v2` enables the new\nfeatures of [Config V2](https://configcat.com/docs/advanced/config-v2).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Config.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Config within a Product (zero-based). If multiple Configs has the same order, they are displayed in\nalphabetical order.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "requiredInputs": [
                "order",
                "productId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Configuration resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Config.\n"
                    },
                    "evaluationVersion": {
                        "type": "string",
                        "description": "The evaluation version of the Config. Possible values: `v1`, `v2`. Default value: `v1`. Using `v2` enables the new\nfeatures of [Config V2](https://configcat.com/docs/advanced/config-v2).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Config.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order of the Config within a Product (zero-based). If multiple Configs has the same order, they are displayed in\nalphabetical order.\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n"
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/environment:Environment": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color of the Environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Environment.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Environment within a Product (zero-based). If multiple Environments has the same order, they are\ndisplayed in alphabetical order.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "required": [
                "color",
                "description",
                "name",
                "order",
                "productId"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The color of the Environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Environment.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Environment within a Product (zero-based). If multiple Environments has the same order, they are\ndisplayed in alphabetical order.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "requiredInputs": [
                "order",
                "productId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The color of the Environment.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Environment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Environment.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order of the Environment within a Product (zero-based). If multiple Environments has the same order, they are\ndisplayed in alphabetical order.\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n"
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/integration:Integration": {
            "properties": {
                "configs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Config IDs that are connected with this Integration. If the list is empty, all of the Configs are connected.\n"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Environment IDs that are connected with this Integration. If the list is empty, all of the Environments are\nconnected.\n"
                },
                "integrationType": {
                    "type": "string",
                    "description": "The integration type of the Integration. Possible values: `dataDog`, `slack`, `amplitude`, `mixPanel`, `segment`,\n`pubNub`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Integration.\n"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Parameters of the integration. The Parameters dictionary differs for each IntegrationType. See available options per\nintegration type at the Example usage section.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "required": [
                "configs",
                "environments",
                "integrationType",
                "name",
                "parameters",
                "productId"
            ],
            "inputProperties": {
                "configs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Config IDs that are connected with this Integration. If the list is empty, all of the Configs are connected.\n"
                },
                "environments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Environment IDs that are connected with this Integration. If the list is empty, all of the Environments are\nconnected.\n"
                },
                "integrationType": {
                    "type": "string",
                    "description": "The integration type of the Integration. Possible values: `dataDog`, `slack`, `amplitude`, `mixPanel`, `segment`,\n`pubNub`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Integration.\n"
                },
                "parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Parameters of the integration. The Parameters dictionary differs for each IntegrationType. See available options per\nintegration type at the Example usage section.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "requiredInputs": [
                "integrationType",
                "productId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Integration resources.\n",
                "properties": {
                    "configs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Config IDs that are connected with this Integration. If the list is empty, all of the Configs are connected.\n"
                    },
                    "environments": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of Environment IDs that are connected with this Integration. If the list is empty, all of the Environments are\nconnected.\n"
                    },
                    "integrationType": {
                        "type": "string",
                        "description": "The integration type of the Integration. Possible values: `dataDog`, `slack`, `amplitude`, `mixPanel`, `segment`,\n`pubNub`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Integration.\n"
                    },
                    "parameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Parameters of the integration. The Parameters dictionary differs for each IntegrationType. See available options per\nintegration type at the Example usage section.\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n"
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/permissionGroup:PermissionGroup": {
            "properties": {
                "accesstype": {
                    "type": "string",
                    "description": "Represent the Feature Management permission. Possible values: readOnly, full, custom\n"
                },
                "canCreateorupdateConfig": {
                    "type": "boolean",
                    "description": "Group members can create/update Configs.\n"
                },
                "canCreateorupdateEnvironment": {
                    "type": "boolean",
                    "description": "Group members can create/update Environments.\n"
                },
                "canCreateorupdateSegment": {
                    "type": "boolean",
                    "description": "Group members can create/update Segments.\n"
                },
                "canCreateorupdateSetting": {
                    "type": "boolean",
                    "description": "Group members can create/update Feature Flags and Settings.\n"
                },
                "canCreateorupdateTag": {
                    "type": "boolean",
                    "description": "Group members can create/update Tags.\n"
                },
                "canDeleteConfig": {
                    "type": "boolean",
                    "description": "Group members can delete Configs.\n"
                },
                "canDeleteEnvironment": {
                    "type": "boolean",
                    "description": "Group members can delete Environments.\n"
                },
                "canDeleteSegment": {
                    "type": "boolean",
                    "description": "Group members can delete Segments.\n"
                },
                "canDeleteSetting": {
                    "type": "boolean",
                    "description": "Group members can delete Feature Flags and Settings.\n"
                },
                "canDeleteTag": {
                    "type": "boolean",
                    "description": "Group members can delete Tags.\n"
                },
                "canDisable2fa": {
                    "type": "boolean",
                    "description": "Group members can disable two-factor authentication for other members.\n"
                },
                "canManageIntegrations": {
                    "type": "boolean",
                    "description": "Group members can add and configure integrations.\n"
                },
                "canManageMembers": {
                    "type": "boolean",
                    "description": "Group members can manage team members.\n"
                },
                "canManageProductPreferences": {
                    "type": "boolean",
                    "description": "Group members can update Product preferences.\n"
                },
                "canManageWebhook": {
                    "type": "boolean",
                    "description": "Group members can create/update/delete Webhooks.\n"
                },
                "canRotateSdkkey": {
                    "type": "boolean",
                    "description": "Group members can rotate SDK keys.\n"
                },
                "canTagSetting": {
                    "type": "boolean",
                    "description": "Group members can attach/detach Tags to Feature Flags and Settings.\n"
                },
                "canUseExportimport": {
                    "type": "boolean",
                    "description": "Group members can use the export/import feature.\n"
                },
                "canViewProductAuditlog": {
                    "type": "boolean",
                    "description": "Group members has access to audit logs.\n"
                },
                "canViewProductStatistics": {
                    "type": "boolean",
                    "description": "Group members has access to product statistics.\n"
                },
                "canViewSdkkey": {
                    "type": "boolean",
                    "description": "Group members has access to SDK keys.\n"
                },
                "environmentAccesses": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment specific permissions map block. Keys are the Environment IDs and the values represent the environment\nspecific Feature Management permission. Possible values: full, readOnly\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Permission Group.\n"
                },
                "newEnvironmentAccesstype": {
                    "type": "string",
                    "description": "Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly,\nnone\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "required": [
                "accesstype",
                "canCreateorupdateConfig",
                "canCreateorupdateEnvironment",
                "canCreateorupdateSegment",
                "canCreateorupdateSetting",
                "canCreateorupdateTag",
                "canDeleteConfig",
                "canDeleteEnvironment",
                "canDeleteSegment",
                "canDeleteSetting",
                "canDeleteTag",
                "canDisable2fa",
                "canManageIntegrations",
                "canManageMembers",
                "canManageProductPreferences",
                "canManageWebhook",
                "canRotateSdkkey",
                "canTagSetting",
                "canUseExportimport",
                "canViewProductAuditlog",
                "canViewProductStatistics",
                "canViewSdkkey",
                "environmentAccesses",
                "name",
                "newEnvironmentAccesstype",
                "productId"
            ],
            "inputProperties": {
                "accesstype": {
                    "type": "string",
                    "description": "Represent the Feature Management permission. Possible values: readOnly, full, custom\n"
                },
                "canCreateorupdateConfig": {
                    "type": "boolean",
                    "description": "Group members can create/update Configs.\n"
                },
                "canCreateorupdateEnvironment": {
                    "type": "boolean",
                    "description": "Group members can create/update Environments.\n"
                },
                "canCreateorupdateSegment": {
                    "type": "boolean",
                    "description": "Group members can create/update Segments.\n"
                },
                "canCreateorupdateSetting": {
                    "type": "boolean",
                    "description": "Group members can create/update Feature Flags and Settings.\n"
                },
                "canCreateorupdateTag": {
                    "type": "boolean",
                    "description": "Group members can create/update Tags.\n"
                },
                "canDeleteConfig": {
                    "type": "boolean",
                    "description": "Group members can delete Configs.\n"
                },
                "canDeleteEnvironment": {
                    "type": "boolean",
                    "description": "Group members can delete Environments.\n"
                },
                "canDeleteSegment": {
                    "type": "boolean",
                    "description": "Group members can delete Segments.\n"
                },
                "canDeleteSetting": {
                    "type": "boolean",
                    "description": "Group members can delete Feature Flags and Settings.\n"
                },
                "canDeleteTag": {
                    "type": "boolean",
                    "description": "Group members can delete Tags.\n"
                },
                "canDisable2fa": {
                    "type": "boolean",
                    "description": "Group members can disable two-factor authentication for other members.\n"
                },
                "canManageIntegrations": {
                    "type": "boolean",
                    "description": "Group members can add and configure integrations.\n"
                },
                "canManageMembers": {
                    "type": "boolean",
                    "description": "Group members can manage team members.\n"
                },
                "canManageProductPreferences": {
                    "type": "boolean",
                    "description": "Group members can update Product preferences.\n"
                },
                "canManageWebhook": {
                    "type": "boolean",
                    "description": "Group members can create/update/delete Webhooks.\n"
                },
                "canRotateSdkkey": {
                    "type": "boolean",
                    "description": "Group members can rotate SDK keys.\n"
                },
                "canTagSetting": {
                    "type": "boolean",
                    "description": "Group members can attach/detach Tags to Feature Flags and Settings.\n"
                },
                "canUseExportimport": {
                    "type": "boolean",
                    "description": "Group members can use the export/import feature.\n"
                },
                "canViewProductAuditlog": {
                    "type": "boolean",
                    "description": "Group members has access to audit logs.\n"
                },
                "canViewProductStatistics": {
                    "type": "boolean",
                    "description": "Group members has access to product statistics.\n"
                },
                "canViewSdkkey": {
                    "type": "boolean",
                    "description": "Group members has access to SDK keys.\n"
                },
                "environmentAccesses": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment specific permissions map block. Keys are the Environment IDs and the values represent the environment\nspecific Feature Management permission. Possible values: full, readOnly\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Permission Group.\n"
                },
                "newEnvironmentAccesstype": {
                    "type": "string",
                    "description": "Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly,\nnone\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "requiredInputs": [
                "productId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PermissionGroup resources.\n",
                "properties": {
                    "accesstype": {
                        "type": "string",
                        "description": "Represent the Feature Management permission. Possible values: readOnly, full, custom\n"
                    },
                    "canCreateorupdateConfig": {
                        "type": "boolean",
                        "description": "Group members can create/update Configs.\n"
                    },
                    "canCreateorupdateEnvironment": {
                        "type": "boolean",
                        "description": "Group members can create/update Environments.\n"
                    },
                    "canCreateorupdateSegment": {
                        "type": "boolean",
                        "description": "Group members can create/update Segments.\n"
                    },
                    "canCreateorupdateSetting": {
                        "type": "boolean",
                        "description": "Group members can create/update Feature Flags and Settings.\n"
                    },
                    "canCreateorupdateTag": {
                        "type": "boolean",
                        "description": "Group members can create/update Tags.\n"
                    },
                    "canDeleteConfig": {
                        "type": "boolean",
                        "description": "Group members can delete Configs.\n"
                    },
                    "canDeleteEnvironment": {
                        "type": "boolean",
                        "description": "Group members can delete Environments.\n"
                    },
                    "canDeleteSegment": {
                        "type": "boolean",
                        "description": "Group members can delete Segments.\n"
                    },
                    "canDeleteSetting": {
                        "type": "boolean",
                        "description": "Group members can delete Feature Flags and Settings.\n"
                    },
                    "canDeleteTag": {
                        "type": "boolean",
                        "description": "Group members can delete Tags.\n"
                    },
                    "canDisable2fa": {
                        "type": "boolean",
                        "description": "Group members can disable two-factor authentication for other members.\n"
                    },
                    "canManageIntegrations": {
                        "type": "boolean",
                        "description": "Group members can add and configure integrations.\n"
                    },
                    "canManageMembers": {
                        "type": "boolean",
                        "description": "Group members can manage team members.\n"
                    },
                    "canManageProductPreferences": {
                        "type": "boolean",
                        "description": "Group members can update Product preferences.\n"
                    },
                    "canManageWebhook": {
                        "type": "boolean",
                        "description": "Group members can create/update/delete Webhooks.\n"
                    },
                    "canRotateSdkkey": {
                        "type": "boolean",
                        "description": "Group members can rotate SDK keys.\n"
                    },
                    "canTagSetting": {
                        "type": "boolean",
                        "description": "Group members can attach/detach Tags to Feature Flags and Settings.\n"
                    },
                    "canUseExportimport": {
                        "type": "boolean",
                        "description": "Group members can use the export/import feature.\n"
                    },
                    "canViewProductAuditlog": {
                        "type": "boolean",
                        "description": "Group members has access to audit logs.\n"
                    },
                    "canViewProductStatistics": {
                        "type": "boolean",
                        "description": "Group members has access to product statistics.\n"
                    },
                    "canViewSdkkey": {
                        "type": "boolean",
                        "description": "Group members has access to SDK keys.\n"
                    },
                    "environmentAccesses": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment specific permissions map block. Keys are the Environment IDs and the values represent the environment\nspecific Feature Management permission. Possible values: full, readOnly\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Permission Group.\n"
                    },
                    "newEnvironmentAccesstype": {
                        "type": "string",
                        "description": "Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly,\nnone\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n"
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/product:Product": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Product.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Product.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Product within a Organization (zero-based). If multiple Products has the same order, they are displayed\nin alphabetical order.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the Organization.\n"
                }
            },
            "required": [
                "description",
                "name",
                "order",
                "organizationId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Product.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Product.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Product within a Organization (zero-based). If multiple Products has the same order, they are displayed\nin alphabetical order.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the Organization.\n"
                }
            },
            "requiredInputs": [
                "order",
                "organizationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Product resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Product.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Product.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order of the Product within a Organization (zero-based). If multiple Products has the same order, they are displayed\nin alphabetical order.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the Organization.\n"
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/productPreferences:ProductPreferences": {
            "properties": {
                "keyGenerationMode": {
                    "type": "string",
                    "description": "Determines the Feature Flag key generation mode. Available values:\n`camelCase`|`upperCase`|`lowerCase`|`pascalCase`|`kebabCase`. Default: `camelCase`.\n"
                },
                "mandatorySettingHint": {
                    "type": "boolean",
                    "description": "Indicates whether Feature flags and Settings must have a hint. Default: false.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                },
                "reasonRequired": {
                    "type": "boolean",
                    "description": "Indicates that a mandatory note is required for saving and publishing. Default: false.\n"
                },
                "reasonRequiredEnvironments": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "The environment specific mandatory note map block. Keys are the Environment IDs and the values indicate that a mandatory\nnote is required for saving and publishing.\n"
                },
                "showVariationId": {
                    "type": "boolean",
                    "description": "Indicates whether variation IDs must be shown on the ConfigCat Dashboard. Default: false.\n"
                }
            },
            "required": [
                "keyGenerationMode",
                "mandatorySettingHint",
                "productId",
                "reasonRequired",
                "reasonRequiredEnvironments",
                "showVariationId"
            ],
            "inputProperties": {
                "keyGenerationMode": {
                    "type": "string",
                    "description": "Determines the Feature Flag key generation mode. Available values:\n`camelCase`|`upperCase`|`lowerCase`|`pascalCase`|`kebabCase`. Default: `camelCase`.\n"
                },
                "mandatorySettingHint": {
                    "type": "boolean",
                    "description": "Indicates whether Feature flags and Settings must have a hint. Default: false.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                },
                "reasonRequired": {
                    "type": "boolean",
                    "description": "Indicates that a mandatory note is required for saving and publishing. Default: false.\n"
                },
                "reasonRequiredEnvironments": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "The environment specific mandatory note map block. Keys are the Environment IDs and the values indicate that a mandatory\nnote is required for saving and publishing.\n"
                },
                "showVariationId": {
                    "type": "boolean",
                    "description": "Indicates whether variation IDs must be shown on the ConfigCat Dashboard. Default: false.\n"
                }
            },
            "requiredInputs": [
                "productId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProductPreferences resources.\n",
                "properties": {
                    "keyGenerationMode": {
                        "type": "string",
                        "description": "Determines the Feature Flag key generation mode. Available values:\n`camelCase`|`upperCase`|`lowerCase`|`pascalCase`|`kebabCase`. Default: `camelCase`.\n"
                    },
                    "mandatorySettingHint": {
                        "type": "boolean",
                        "description": "Indicates whether Feature flags and Settings must have a hint. Default: false.\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n"
                    },
                    "reasonRequired": {
                        "type": "boolean",
                        "description": "Indicates that a mandatory note is required for saving and publishing. Default: false.\n"
                    },
                    "reasonRequiredEnvironments": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "boolean"
                        },
                        "description": "The environment specific mandatory note map block. Keys are the Environment IDs and the values indicate that a mandatory\nnote is required for saving and publishing.\n"
                    },
                    "showVariationId": {
                        "type": "boolean",
                        "description": "Indicates whether variation IDs must be shown on the ConfigCat Dashboard. Default: false.\n"
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/segment:Segment": {
            "properties": {
                "comparator": {
                    "type": "string",
                    "description": "The [comparator](https://configcat.com/docs/advanced/targeting/#comparator) of the Segment.\n"
                },
                "comparisonAttribute": {
                    "type": "string",
                    "description": "The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute) of the Segment.\n"
                },
                "comparisonValue": {
                    "type": "string",
                    "description": "The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value) of the Segment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Segment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Segment.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "required": [
                "comparator",
                "comparisonAttribute",
                "comparisonValue",
                "description",
                "name",
                "productId"
            ],
            "inputProperties": {
                "comparator": {
                    "type": "string",
                    "description": "The [comparator](https://configcat.com/docs/advanced/targeting/#comparator) of the Segment.\n"
                },
                "comparisonAttribute": {
                    "type": "string",
                    "description": "The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute) of the Segment.\n"
                },
                "comparisonValue": {
                    "type": "string",
                    "description": "The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value) of the Segment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Segment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Segment.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "requiredInputs": [
                "comparator",
                "comparisonAttribute",
                "comparisonValue",
                "productId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Segment resources.\n",
                "properties": {
                    "comparator": {
                        "type": "string",
                        "description": "The [comparator](https://configcat.com/docs/advanced/targeting/#comparator) of the Segment.\n"
                    },
                    "comparisonAttribute": {
                        "type": "string",
                        "description": "The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute) of the Segment.\n"
                    },
                    "comparisonValue": {
                        "type": "string",
                        "description": "The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value) of the Segment.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Segment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Segment.\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n"
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/setting:Setting": {
            "properties": {
                "configId": {
                    "type": "string",
                    "description": "The ID of the Config.\n"
                },
                "hint": {
                    "type": "string",
                    "description": "The hint of the Feature Flag or Setting.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The key of the Feature Flag or Setting.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Feature Flag or Setting.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Feature Flag or Setting within a Product (zero-based). If multiple Feature Flags or Settings has the\nsame order, they are displayed in alphabetical order.\n"
                },
                "settingType": {
                    "type": "string",
                    "description": "The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`. Default: `boolean`.\n"
                }
            },
            "required": [
                "configId",
                "hint",
                "key",
                "name",
                "order",
                "settingType"
            ],
            "inputProperties": {
                "configId": {
                    "type": "string",
                    "description": "The ID of the Config.\n"
                },
                "hint": {
                    "type": "string",
                    "description": "The hint of the Feature Flag or Setting.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The key of the Feature Flag or Setting.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Feature Flag or Setting.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Feature Flag or Setting within a Product (zero-based). If multiple Feature Flags or Settings has the\nsame order, they are displayed in alphabetical order.\n"
                },
                "settingType": {
                    "type": "string",
                    "description": "The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`. Default: `boolean`.\n"
                }
            },
            "requiredInputs": [
                "configId",
                "key",
                "order"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Setting resources.\n",
                "properties": {
                    "configId": {
                        "type": "string",
                        "description": "The ID of the Config.\n"
                    },
                    "hint": {
                        "type": "string",
                        "description": "The hint of the Feature Flag or Setting.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The key of the Feature Flag or Setting.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Feature Flag or Setting.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order of the Feature Flag or Setting within a Product (zero-based). If multiple Feature Flags or Settings has the\nsame order, they are displayed in alphabetical order.\n"
                    },
                    "settingType": {
                        "type": "string",
                        "description": "The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`. Default: `boolean`.\n"
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/settingTag:SettingTag": {
            "properties": {
                "settingId": {
                    "type": "string",
                    "description": "The ID of the Feature Flag or Setting.\n"
                },
                "tagId": {
                    "type": "string",
                    "description": "The ID of the Tag.\n"
                }
            },
            "required": [
                "settingId",
                "tagId"
            ],
            "inputProperties": {
                "settingId": {
                    "type": "string",
                    "description": "The ID of the Feature Flag or Setting.\n"
                },
                "tagId": {
                    "type": "string",
                    "description": "The ID of the Tag.\n"
                }
            },
            "requiredInputs": [
                "settingId",
                "tagId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SettingTag resources.\n",
                "properties": {
                    "settingId": {
                        "type": "string",
                        "description": "The ID of the Feature Flag or Setting.\n"
                    },
                    "tagId": {
                        "type": "string",
                        "description": "The ID of the Tag.\n"
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/settingValue:SettingValue": {
            "properties": {
                "environmentId": {
                    "type": "string",
                    "description": "The ID of the Environment.\n"
                },
                "initOnly": {
                    "type": "boolean"
                },
                "mandatoryNotes": {
                    "type": "string",
                    "description": "If the Product's \"Mandatory notes\" preference is turned on for the Environment the Mandatory note must be passed.\n"
                },
                "percentageItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/SettingValuePercentageItem:SettingValuePercentageItem"
                    }
                },
                "rolloutRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/SettingValueRolloutRule:SettingValueRolloutRule"
                    }
                },
                "settingId": {
                    "type": "string",
                    "description": "The ID of the Feature Flag or Setting.\n"
                },
                "settingType": {
                    "type": "string",
                    "description": "The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The Feature Flag or Setting's value. Type: `string`. It must be compatible with the `setting_type`.\n"
                }
            },
            "required": [
                "environmentId",
                "initOnly",
                "settingId",
                "settingType",
                "value"
            ],
            "inputProperties": {
                "environmentId": {
                    "type": "string",
                    "description": "The ID of the Environment.\n"
                },
                "initOnly": {
                    "type": "boolean"
                },
                "mandatoryNotes": {
                    "type": "string",
                    "description": "If the Product's \"Mandatory notes\" preference is turned on for the Environment the Mandatory note must be passed.\n"
                },
                "percentageItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/SettingValuePercentageItem:SettingValuePercentageItem"
                    }
                },
                "rolloutRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/SettingValueRolloutRule:SettingValueRolloutRule"
                    }
                },
                "settingId": {
                    "type": "string",
                    "description": "The ID of the Feature Flag or Setting.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The Feature Flag or Setting's value. Type: `string`. It must be compatible with the `setting_type`.\n"
                }
            },
            "requiredInputs": [
                "environmentId",
                "settingId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SettingValue resources.\n",
                "properties": {
                    "environmentId": {
                        "type": "string",
                        "description": "The ID of the Environment.\n"
                    },
                    "initOnly": {
                        "type": "boolean"
                    },
                    "mandatoryNotes": {
                        "type": "string",
                        "description": "If the Product's \"Mandatory notes\" preference is turned on for the Environment the Mandatory note must be passed.\n"
                    },
                    "percentageItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/configcat:index/SettingValuePercentageItem:SettingValuePercentageItem"
                        }
                    },
                    "rolloutRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/configcat:index/SettingValueRolloutRule:SettingValueRolloutRule"
                        }
                    },
                    "settingId": {
                        "type": "string",
                        "description": "The ID of the Feature Flag or Setting.\n"
                    },
                    "settingType": {
                        "type": "string",
                        "description": "The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The Feature Flag or Setting's value. Type: `string`. It must be compatible with the `setting_type`.\n"
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/settingValueV2:SettingValueV2": {
            "properties": {
                "environmentId": {
                    "type": "string",
                    "description": "The ID of the Environment.\n"
                },
                "initOnly": {
                    "type": "boolean"
                },
                "mandatoryNotes": {
                    "type": "string",
                    "description": "If the Product's \"Mandatory notes\" preference is turned on for the Environment the Mandatory note must be passed.\n"
                },
                "percentageEvaluationAttribute": {
                    "type": "string",
                    "description": "The user attribute used for percentage evaluation. If not set, it defaults to the Identifier user object attribute.\n"
                },
                "settingId": {
                    "type": "string",
                    "description": "The ID of the Feature Flag or Setting.\n"
                },
                "settingType": {
                    "type": "string",
                    "description": "The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`.\n"
                },
                "targetingRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/SettingValueV2TargetingRule:SettingValueV2TargetingRule"
                    },
                    "description": "The targeting rules of the Feature Flag or Setting\n"
                },
                "value": {
                    "$ref": "#/types/configcat:index/SettingValueV2Value:SettingValueV2Value",
                    "description": "Represents the value of a Feature Flag or Setting.\n"
                }
            },
            "required": [
                "environmentId",
                "initOnly",
                "settingId",
                "settingType",
                "value"
            ],
            "inputProperties": {
                "environmentId": {
                    "type": "string",
                    "description": "The ID of the Environment.\n"
                },
                "initOnly": {
                    "type": "boolean"
                },
                "mandatoryNotes": {
                    "type": "string",
                    "description": "If the Product's \"Mandatory notes\" preference is turned on for the Environment the Mandatory note must be passed.\n"
                },
                "percentageEvaluationAttribute": {
                    "type": "string",
                    "description": "The user attribute used for percentage evaluation. If not set, it defaults to the Identifier user object attribute.\n"
                },
                "settingId": {
                    "type": "string",
                    "description": "The ID of the Feature Flag or Setting.\n"
                },
                "targetingRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/SettingValueV2TargetingRule:SettingValueV2TargetingRule"
                    },
                    "description": "The targeting rules of the Feature Flag or Setting\n"
                },
                "value": {
                    "$ref": "#/types/configcat:index/SettingValueV2Value:SettingValueV2Value",
                    "description": "Represents the value of a Feature Flag or Setting.\n"
                }
            },
            "requiredInputs": [
                "environmentId",
                "settingId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SettingValueV2 resources.\n",
                "properties": {
                    "environmentId": {
                        "type": "string",
                        "description": "The ID of the Environment.\n"
                    },
                    "initOnly": {
                        "type": "boolean"
                    },
                    "mandatoryNotes": {
                        "type": "string",
                        "description": "If the Product's \"Mandatory notes\" preference is turned on for the Environment the Mandatory note must be passed.\n"
                    },
                    "percentageEvaluationAttribute": {
                        "type": "string",
                        "description": "The user attribute used for percentage evaluation. If not set, it defaults to the Identifier user object attribute.\n"
                    },
                    "settingId": {
                        "type": "string",
                        "description": "The ID of the Feature Flag or Setting.\n"
                    },
                    "settingType": {
                        "type": "string",
                        "description": "The type of the Feature Flag or Setting. Available values: `boolean`|`string`|`int`|`double`.\n"
                    },
                    "targetingRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/configcat:index/SettingValueV2TargetingRule:SettingValueV2TargetingRule"
                        },
                        "description": "The targeting rules of the Feature Flag or Setting\n"
                    },
                    "value": {
                        "$ref": "#/types/configcat:index/SettingValueV2Value:SettingValueV2Value",
                        "description": "Represents the value of a Feature Flag or Setting.\n"
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/tag:Tag": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color of the Tag. Default value. `panther`. Valid values: `panther`|`whale`|`salmon`|`lizard`|`canary`|`koala`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Tag.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "required": [
                "color",
                "name",
                "productId"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The color of the Tag. Default value. `panther`. Valid values: `panther`|`whale`|`salmon`|`lizard`|`canary`|`koala`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Tag.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "requiredInputs": [
                "productId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tag resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The color of the Tag. Default value. `panther`. Valid values: `panther`|`whale`|`salmon`|`lizard`|`canary`|`koala`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Tag.\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n"
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/webhook:Webhook": {
            "properties": {
                "configId": {
                    "type": "string",
                    "description": "The ID of the Config.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The HTTP body content.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "The ID of the Environment.\n"
                },
                "httpMethod": {
                    "type": "string",
                    "description": "The HTTP method. Available values: `get`|`post`. Default: `get`\n"
                },
                "secureWebhookHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/WebhookSecureWebhookHeader:WebhookSecureWebhookHeader"
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Webhook.\n"
                },
                "webhookHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/WebhookWebhookHeader:WebhookWebhookHeader"
                    },
                    "description": "List of plain text HTTP headers. The value of a plain text header is always visible for everyone. It also appears in\naudit logs and on the webhook test UI.\n"
                }
            },
            "required": [
                "configId",
                "environmentId",
                "httpMethod",
                "url"
            ],
            "inputProperties": {
                "configId": {
                    "type": "string",
                    "description": "The ID of the Config.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The HTTP body content.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "The ID of the Environment.\n"
                },
                "httpMethod": {
                    "type": "string",
                    "description": "The HTTP method. Available values: `get`|`post`. Default: `get`\n"
                },
                "secureWebhookHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/WebhookSecureWebhookHeader:WebhookSecureWebhookHeader"
                    }
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Webhook.\n"
                },
                "webhookHeaders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/WebhookWebhookHeader:WebhookWebhookHeader"
                    },
                    "description": "List of plain text HTTP headers. The value of a plain text header is always visible for everyone. It also appears in\naudit logs and on the webhook test UI.\n"
                }
            },
            "requiredInputs": [
                "configId",
                "environmentId",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Webhook resources.\n",
                "properties": {
                    "configId": {
                        "type": "string",
                        "description": "The ID of the Config.\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "The HTTP body content.\n"
                    },
                    "environmentId": {
                        "type": "string",
                        "description": "The ID of the Environment.\n"
                    },
                    "httpMethod": {
                        "type": "string",
                        "description": "The HTTP method. Available values: `get`|`post`. Default: `get`\n"
                    },
                    "secureWebhookHeaders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/configcat:index/WebhookSecureWebhookHeader:WebhookSecureWebhookHeader"
                        }
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the Webhook.\n"
                    },
                    "webhookHeaders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/configcat:index/WebhookWebhookHeader:WebhookWebhookHeader"
                        },
                        "description": "List of plain text HTTP headers. The value of a plain text header is always visible for everyone. It also appears in\naudit logs and on the webhook test UI.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "configcat:index/getConfigurations:getConfigurations": {
            "inputs": {
                "description": "A collection of arguments for invoking getConfigurations.\n",
                "properties": {
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "productId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "productId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConfigurations.\n",
                "properties": {
                    "configs": {
                        "items": {
                            "$ref": "#/types/configcat:index/getConfigurationsConfig:getConfigurationsConfig"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "string"
                    },
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "productId": {
                        "type": "string"
                    }
                },
                "required": [
                    "configs",
                    "id",
                    "productId"
                ],
                "type": "object"
            }
        },
        "configcat:index/getEnvironments:getEnvironments": {
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironments.\n",
                "properties": {
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "productId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "productId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironments.\n",
                "properties": {
                    "environments": {
                        "items": {
                            "$ref": "#/types/configcat:index/getEnvironmentsEnvironment:getEnvironmentsEnvironment"
                        },
                        "type": "array"
                    },
                    "id": {
                        "type": "string"
                    },
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "productId": {
                        "type": "string"
                    }
                },
                "required": [
                    "environments",
                    "id",
                    "productId"
                ],
                "type": "object"
            }
        },
        "configcat:index/getOrganizations:getOrganizations": {
            "inputs": {
                "description": "A collection of arguments for invoking getOrganizations.\n",
                "properties": {
                    "nameFilterRegex": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrganizations.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "organizations": {
                        "items": {
                            "$ref": "#/types/configcat:index/getOrganizationsOrganization:getOrganizationsOrganization"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "organizations"
                ],
                "type": "object"
            }
        },
        "configcat:index/getPermissionGroups:getPermissionGroups": {
            "inputs": {
                "description": "A collection of arguments for invoking getPermissionGroups.\n",
                "properties": {
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "productId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "productId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPermissionGroups.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "permissionGroups": {
                        "items": {
                            "$ref": "#/types/configcat:index/getPermissionGroupsPermissionGroup:getPermissionGroupsPermissionGroup"
                        },
                        "type": "array"
                    },
                    "productId": {
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "permissionGroups",
                    "productId"
                ],
                "type": "object"
            }
        },
        "configcat:index/getProducts:getProducts": {
            "inputs": {
                "description": "A collection of arguments for invoking getProducts.\n",
                "properties": {
                    "nameFilterRegex": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProducts.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "products": {
                        "items": {
                            "$ref": "#/types/configcat:index/getProductsProduct:getProductsProduct"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "products"
                ],
                "type": "object"
            }
        },
        "configcat:index/getSdkKeys:getSdkKeys": {
            "inputs": {
                "description": "A collection of arguments for invoking getSdkKeys.\n",
                "properties": {
                    "configId": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configId",
                    "environmentId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSdkKeys.\n",
                "properties": {
                    "configId": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "primary": {
                        "type": "string"
                    },
                    "secondary": {
                        "type": "string"
                    }
                },
                "required": [
                    "configId",
                    "environmentId",
                    "id",
                    "primary",
                    "secondary"
                ],
                "type": "object"
            }
        },
        "configcat:index/getSegments:getSegments": {
            "inputs": {
                "description": "A collection of arguments for invoking getSegments.\n",
                "properties": {
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "productId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "productId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSegments.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "productId": {
                        "type": "string"
                    },
                    "segments": {
                        "items": {
                            "$ref": "#/types/configcat:index/getSegmentsSegment:getSegmentsSegment"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "productId",
                    "segments"
                ],
                "type": "object"
            }
        },
        "configcat:index/getSettings:getSettings": {
            "inputs": {
                "description": "A collection of arguments for invoking getSettings.\n",
                "properties": {
                    "configId": {
                        "type": "string"
                    },
                    "keyFilterRegex": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "configId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSettings.\n",
                "properties": {
                    "configId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "keyFilterRegex": {
                        "type": "string"
                    },
                    "settings": {
                        "items": {
                            "$ref": "#/types/configcat:index/getSettingsSetting:getSettingsSetting"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "configId",
                    "id",
                    "settings"
                ],
                "type": "object"
            }
        },
        "configcat:index/getTags:getTags": {
            "inputs": {
                "description": "A collection of arguments for invoking getTags.\n",
                "properties": {
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "productId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "productId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTags.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "productId": {
                        "type": "string"
                    },
                    "tags": {
                        "items": {
                            "$ref": "#/types/configcat:index/getTagsTag:getTagsTag"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "id",
                    "productId",
                    "tags"
                ],
                "type": "object"
            }
        },
        "configcat:index/getWebhookSigningKeys:getWebhookSigningKeys": {
            "inputs": {
                "description": "A collection of arguments for invoking getWebhookSigningKeys.\n",
                "properties": {
                    "webhookId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "webhookId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getWebhookSigningKeys.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "key1": {
                        "type": "string"
                    },
                    "key2": {
                        "type": "string"
                    },
                    "webhookId": {
                        "type": "integer"
                    }
                },
                "required": [
                    "id",
                    "key1",
                    "key2",
                    "webhookId"
                ],
                "type": "object"
            }
        }
    }
}