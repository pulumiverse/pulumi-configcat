{
    "name": "configcat",
    "displayName": "ConfigCat",
    "description": "A Pulumi package for creating and managing configcat cloud resources.",
    "keywords": [
        "pulumi",
        "configcat",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`configcat` Terraform Provider](https://github.com/configcat/terraform-provider-configcat).",
    "repository": "https://github.com/pulumiverse/pulumi-configcat",
    "logoUrl": "https://raw.githubusercontent.com/pulumiverse/pulumi-configcat/refs/heads/main/docs/configcat-logo.png",
    "pluginDownloadURL": "api://github.com/pulumiverse",
    "publisher": "Pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageName": "@pulumiverse/configcat",
            "packageDescription": "A Pulumi package for creating and managing configcat cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/configcat/terraform-provider-configcat)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-configcat` repo](https://github.com/pulumiverse/pulumi-configcat/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-configcat` repo](https://github.com/configcat/terraform-provider-configcat/issues).",
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "packageName": "pulumiverse_configcat",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/configcat/terraform-provider-configcat)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-configcat` repo](https://github.com/pulumiverse/pulumi-configcat/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-configcat` repo](https://github.com/configcat/terraform-provider-configcat/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "basePath": {
                "type": "string",
                "description": "ConfigCat Public Management API Base Path (defaults to production).\n",
                "defaultInfo": {
                    "environment": [
                        "CONFIGCAT_BASE_PATH"
                    ]
                }
            },
            "basicAuthPassword": {
                "type": "string",
                "description": "ConfigCat Public API credential - Basic Auth Password\n",
                "defaultInfo": {
                    "environment": [
                        "CONFIGCAT_BASIC_AUTH_PASSWORD"
                    ]
                },
                "secret": true
            },
            "basicAuthUsername": {
                "type": "string",
                "description": "ConfigCat Public API credential - Basic Auth Username.\n",
                "defaultInfo": {
                    "environment": [
                        "CONFIGCAT_BASIC_AUTH_USERNAME"
                    ]
                }
            }
        },
        "defaults": [
            "basicAuthPassword",
            "basicAuthUsername"
        ]
    },
    "types": {
        "configcat:index/SettingValuePercentageItem:SettingValuePercentageItem": {
            "properties": {
                "percentage": {
                    "type": "string",
                    "description": "Any [number](https://configcat.com/docs/advanced/targeting/#-value) between 0 and 100 that represents a randomly allocated fraction of your users.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The exact [value](https://configcat.com/docs/advanced/targeting/#served-value-1) that will be served to the users that fall into that fraction. Type: `string`. It must be compatible with the `setting_type`.\n"
                }
            },
            "type": "object",
            "required": [
                "percentage",
                "value"
            ]
        },
        "configcat:index/SettingValueRolloutRule:SettingValueRolloutRule": {
            "properties": {
                "comparator": {
                    "type": "string",
                    "description": "The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).\n"
                },
                "comparisonAttribute": {
                    "type": "string",
                    "description": "The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute).\n"
                },
                "comparisonValue": {
                    "type": "string",
                    "description": "The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).\n"
                },
                "segmentComparator": {
                    "type": "string",
                    "description": "The segment_comparator. Possible values: isIn, isNotIn.\n"
                },
                "segmentId": {
                    "type": "string",
                    "description": "The [Segment's](https://configcat.com/docs/advanced/segments) unique identifier.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The exact [value](https://configcat.com/docs/advanced/targeting/#served-value) that will be served to the users who match the targeting rule. Type: `string`. It must be compatible with the `setting_type`.\n"
                }
            },
            "type": "object",
            "required": [
                "value"
            ]
        },
        "configcat:index/getConfigurationsConfig:getConfigurationsConfig": {
            "properties": {
                "configId": {
                    "type": "string",
                    "description": "The unique Config ID.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Config.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Config.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Config within a Product (zero-based).\n"
                }
            },
            "type": "object",
            "required": [
                "configId",
                "description",
                "name",
                "order"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "configcat:index/getEnvironmentsEnvironment:getEnvironmentsEnvironment": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color of the Environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Environment.\n"
                },
                "environmentId": {
                    "type": "string",
                    "description": "The unique Environment ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Environment.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Environment within a Product (zero-based).\n"
                }
            },
            "type": "object",
            "required": [
                "color",
                "description",
                "environmentId",
                "name",
                "order"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "configcat:index/getOrganizationsOrganization:getOrganizationsOrganization": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the Organization.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The unique Organization ID.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "organizationId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "configcat:index/getPermissionGroupsPermissionGroup:getPermissionGroupsPermissionGroup": {
            "properties": {
                "accesstype": {
                    "type": "string",
                    "description": "Represent the Feature Management permission. Possible values: readOnly, full, custom\n"
                },
                "canCreateorupdateConfig": {
                    "type": "boolean",
                    "description": "Group members can create/update Configs.\n"
                },
                "canCreateorupdateEnvironment": {
                    "type": "boolean",
                    "description": "Group members can create/update Environments.\n"
                },
                "canCreateorupdateSegment": {
                    "type": "boolean"
                },
                "canCreateorupdateSetting": {
                    "type": "boolean",
                    "description": "Group members can create/update Feature Flags and Settings.\n"
                },
                "canCreateorupdateTag": {
                    "type": "boolean",
                    "description": "Group members can create/update Tags.\n"
                },
                "canDeleteConfig": {
                    "type": "boolean",
                    "description": "Group members can delete Configs.\n"
                },
                "canDeleteEnvironment": {
                    "type": "boolean",
                    "description": "Group members can delete Environments.\n"
                },
                "canDeleteSegment": {
                    "type": "boolean"
                },
                "canDeleteSetting": {
                    "type": "boolean",
                    "description": "Group members can delete Feature Flags and Settings.\n"
                },
                "canDeleteTag": {
                    "type": "boolean",
                    "description": "Group members can delete Tags.\n"
                },
                "canManageIntegrations": {
                    "type": "boolean",
                    "description": "Group members can add and configure integrations.\n"
                },
                "canManageMembers": {
                    "type": "boolean",
                    "description": "Group members can manage team members.\n"
                },
                "canManageProductPreferences": {
                    "type": "boolean",
                    "description": "Group members can update Product preferences.\n"
                },
                "canManageWebhook": {
                    "type": "boolean",
                    "description": "Group members can create/update/delete Webhooks.\n"
                },
                "canRotateSdkkey": {
                    "type": "boolean",
                    "description": "Group members can rotate SDK keys.\n"
                },
                "canTagSetting": {
                    "type": "boolean",
                    "description": "Group members can attach/detach Tags to Feature Flags and Settings.\n"
                },
                "canUseExportimport": {
                    "type": "boolean",
                    "description": "Group members can use the export/import feature.\n"
                },
                "canViewProductAuditlog": {
                    "type": "boolean",
                    "description": "Group members has access to audit logs.\n"
                },
                "canViewProductStatistics": {
                    "type": "boolean",
                    "description": "Group members has access to product statistics.\n"
                },
                "canViewSdkkey": {
                    "type": "boolean",
                    "description": "Group members has access to SDK keys.\n"
                },
                "environmentAccesses": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment specific permissions map block defined as below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Permission Group.\n"
                },
                "newEnvironmentAccesstype": {
                    "type": "string",
                    "description": "Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly, none\n"
                },
                "permissionGroupId": {
                    "type": "integer",
                    "description": "The unique Permission Groups ID.\n"
                }
            },
            "type": "object",
            "required": [
                "accesstype",
                "canCreateorupdateConfig",
                "canCreateorupdateEnvironment",
                "canCreateorupdateSegment",
                "canCreateorupdateSetting",
                "canCreateorupdateTag",
                "canDeleteConfig",
                "canDeleteEnvironment",
                "canDeleteSegment",
                "canDeleteSetting",
                "canDeleteTag",
                "canManageIntegrations",
                "canManageMembers",
                "canManageProductPreferences",
                "canManageWebhook",
                "canRotateSdkkey",
                "canTagSetting",
                "canUseExportimport",
                "canViewProductAuditlog",
                "canViewProductStatistics",
                "canViewSdkkey",
                "name",
                "newEnvironmentAccesstype",
                "permissionGroupId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "configcat:index/getProductsProduct:getProductsProduct": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Product.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Product.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Product within an Organization (zero-based).\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The unique Product ID.\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "order",
                "productId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "configcat:index/getSegmentsSegment:getSegmentsSegment": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Segment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Segment.\n"
                },
                "segmentId": {
                    "type": "string",
                    "description": "The unique Segment ID.\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "name",
                "segmentId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "configcat:index/getSettingsSetting:getSettingsSetting": {
            "properties": {
                "hint": {
                    "type": "string",
                    "description": "The hint of the Setting.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The key of the Feature Flag/Setting.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Setting.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Setting within a Config (zero-based).\n"
                },
                "settingId": {
                    "type": "string",
                    "description": "The unique Setting ID.\n"
                },
                "settingType": {
                    "type": "string",
                    "description": "The Setting's type. Available values: `boolean`|`string`|`int`|`double`.\n"
                }
            },
            "type": "object",
            "required": [
                "hint",
                "key",
                "name",
                "order",
                "settingId",
                "settingType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "configcat:index/getTagsTag:getTagsTag": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color of the Tag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Tag.\n"
                },
                "tagId": {
                    "type": "string",
                    "description": "The unique Tag ID.\n"
                }
            },
            "type": "object",
            "required": [
                "color",
                "name",
                "tagId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the configcat package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "basePath": {
                "type": "string",
                "description": "ConfigCat Public Management API Base Path (defaults to production).\n"
            },
            "basicAuthPassword": {
                "type": "string",
                "description": "ConfigCat Public API credential - Basic Auth Password\n",
                "secret": true
            },
            "basicAuthUsername": {
                "type": "string",
                "description": "ConfigCat Public API credential - Basic Auth Username.\n"
            }
        },
        "inputProperties": {
            "basePath": {
                "type": "string",
                "description": "ConfigCat Public Management API Base Path (defaults to production).\n",
                "defaultInfo": {
                    "environment": [
                        "CONFIGCAT_BASE_PATH"
                    ]
                }
            },
            "basicAuthPassword": {
                "type": "string",
                "description": "ConfigCat Public API credential - Basic Auth Password\n",
                "defaultInfo": {
                    "environment": [
                        "CONFIGCAT_BASIC_AUTH_PASSWORD"
                    ]
                },
                "secret": true
            },
            "basicAuthUsername": {
                "type": "string",
                "description": "ConfigCat Public API credential - Basic Auth Username.\n",
                "defaultInfo": {
                    "environment": [
                        "CONFIGCAT_BASIC_AUTH_USERNAME"
                    ]
                }
            }
        }
    },
    "resources": {
        "configcat:index/configuration:Configuration": {
            "description": "## # configcat.Configuration Resource\n\nCreates and manages a **Config**. [What is a Config in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nconst myConfig = new configcat.Configuration(\"my_config\", {\n    productId: myProducts.then(myProducts =\u003e myProducts.products?.[0]?.productId),\n    name: \"My config\",\n    description: \"My config description\",\n    order: 0,\n});\nexport const configId = myConfig.id;\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\nimport pulumiverse_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\nmy_config = configcat.Configuration(\"my_config\",\n    product_id=my_products.products[0].product_id,\n    name=\"My config\",\n    description=\"My config description\",\n    order=0)\npulumi.export(\"configId\", my_config.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    var myConfig = new Configcat.Configuration(\"my_config\", new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        Name = \"My config\",\n        Description = \"My config description\",\n        Order = 0,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"configId\"] = myConfig.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyConfig, err := configcat.NewConfiguration(ctx, \"my_config\", \u0026configcat.ConfigurationArgs{\n\t\t\tProductId:   pulumi.String(myProducts.Products[0].ProductId),\n\t\t\tName:        pulumi.String(\"My config\"),\n\t\t\tDescription: pulumi.String(\"My config description\"),\n\t\t\tOrder:       pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"configId\", myConfig.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport com.pulumi.configcat.Configuration;\nimport com.pulumi.configcat.ConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        var myConfig = new Configuration(\"myConfig\", ConfigurationArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .name(\"My config\")\n            .description(\"My config description\")\n            .order(0)\n            .build());\n\n        ctx.export(\"configId\", myConfig.id());\n    }\n}\n```\n```yaml\nresources:\n  myConfig:\n    type: configcat:Configuration\n    name: my_config\n    properties:\n      productId: ${myProducts.products[0].productId}\n      name: My config\n      description: My config description\n      order: 0\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\noutputs:\n  configId: ${myConfig.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n* [Get Config](https://api.configcat.com/docs/#tag/Configs/operation/get-config)\n* [Create Config](https://api.configcat.com/docs/#tag/Configs/operation/create-config)\n* [Update Config](https://api.configcat.com/docs/#tag/Configs/operation/update-config)\n* [Delete Config](https://api.configcat.com/docs/#tag/Configs/operation/delete-config)\n\n## Import\n\nConfigs can be imported using the ConfigId. Get the ConfigId using the [List Configs API](https://api.configcat.com/docs/#tag/Configs/operation/get-configs) for example.\n\n```sh\n$ pulumi import configcat:index/configuration:Configuration example 08d86d63-2726-47cd-8bfc-59608ecb91e2\n```\nRead more about importing.\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Config.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Config.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Config within a Product (zero-based). If multiple Configs has the same order, they are displayed in alphabetical order.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "required": [
                "name",
                "order",
                "productId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Config.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Config.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Config within a Product (zero-based). If multiple Configs has the same order, they are displayed in alphabetical order.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "order",
                "productId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Configuration resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Config.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Config.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order of the Config within a Product (zero-based). If multiple Configs has the same order, they are displayed in alphabetical order.\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/environment:Environment": {
            "description": "## # configcat.Environment Resource\n\nCreates and manages an **Environment**. [What is an Environment in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nconst myEnvironment = new configcat.Environment(\"my_environment\", {\n    productId: myProducts.then(myProducts =\u003e myProducts.products?.[0]?.productId),\n    name: \"Staging\",\n    description: \"Staging description\",\n    color: \"blue\",\n    order: 0,\n});\nexport const environmentId = myEnvironment.id;\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\nimport pulumiverse_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\nmy_environment = configcat.Environment(\"my_environment\",\n    product_id=my_products.products[0].product_id,\n    name=\"Staging\",\n    description=\"Staging description\",\n    color=\"blue\",\n    order=0)\npulumi.export(\"environmentId\", my_environment.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    var myEnvironment = new Configcat.Environment(\"my_environment\", new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        Name = \"Staging\",\n        Description = \"Staging description\",\n        Color = \"blue\",\n        Order = 0,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"environmentId\"] = myEnvironment.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyEnvironment, err := configcat.NewEnvironment(ctx, \"my_environment\", \u0026configcat.EnvironmentArgs{\n\t\t\tProductId:   pulumi.String(myProducts.Products[0].ProductId),\n\t\t\tName:        pulumi.String(\"Staging\"),\n\t\t\tDescription: pulumi.String(\"Staging description\"),\n\t\t\tColor:       pulumi.String(\"blue\"),\n\t\t\tOrder:       pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"environmentId\", myEnvironment.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport com.pulumi.configcat.Environment;\nimport com.pulumi.configcat.EnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        var myEnvironment = new Environment(\"myEnvironment\", EnvironmentArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .name(\"Staging\")\n            .description(\"Staging description\")\n            .color(\"blue\")\n            .order(0)\n            .build());\n\n        ctx.export(\"environmentId\", myEnvironment.id());\n    }\n}\n```\n```yaml\nresources:\n  myEnvironment:\n    type: configcat:Environment\n    name: my_environment\n    properties:\n      productId: ${myProducts.products[0].productId}\n      name: Staging\n      description: Staging description\n      color: blue\n      order: 0\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\noutputs:\n  environmentId: ${myEnvironment.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n* [Get Environment](https://api.configcat.com/docs/#tag/Environments/operation/get-environment)\n* [Create Environment](https://api.configcat.com/docs/#tag/Environments/operation/create-environment)\n* [Update Environment](https://api.configcat.com/docs/#tag/Environments/operation/update-environment)\n* [Delete Environment](https://api.configcat.com/docs/#tag/Environments/operation/delete-environment)\n\n## Import\n\nEnvironments can be imported using the EnvironmentId. Get the EnvironmentId using the [List Environments API](https://api.configcat.com/docs/#tag/Environments/operation/get-environments) for example.\n\n```sh\n$ pulumi import configcat:index/environment:Environment example 08d86d63-2726-47cd-8bfc-59608ecb91e2\n```\nRead more about importing.\n\n",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The color (HTML color code) of the Environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Environment.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Environment within a Product (zero-based). If multiple Environments has the same order, they are displayed in alphabetical order.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "required": [
                "name",
                "order",
                "productId"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The color (HTML color code) of the Environment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Environment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Environment.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Environment within a Product (zero-based). If multiple Environments has the same order, they are displayed in alphabetical order.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "order",
                "productId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The color (HTML color code) of the Environment.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Environment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Environment.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order of the Environment within a Product (zero-based). If multiple Environments has the same order, they are displayed in alphabetical order.\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/permissionGroup:PermissionGroup": {
            "description": "## # configcat.PermissionGroup Resource\n\nCreates and manages a **Permission Group**. [What is a Permission Group in ConfigCat?](https://configcat.com/docs/advanced/team-management/team-management-basics/#permissions--permission-groups-product-level)\n\n## Example Usage\n\n### S\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nconst myPermissionGroup = new configcat.PermissionGroup(\"my_permission_group\", {\n    productId: myProducts.then(myProducts =\u003e myProducts.products?.[0]?.productId),\n    name: \"Administrators\",\n    accesstype: \"full\",\n    canManageMembers: true,\n    canCreateorupdateConfig: true,\n    canDeleteConfig: true,\n    canCreateorupdateEnvironment: true,\n    canDeleteEnvironment: true,\n    canCreateorupdateSetting: true,\n    canTagSetting: true,\n    canDeleteSetting: true,\n    canCreateorupdateTag: true,\n    canDeleteTag: true,\n    canManageWebhook: true,\n    canUseExportimport: true,\n    canManageProductPreferences: true,\n    canManageIntegrations: true,\n    canViewSdkkey: true,\n    canRotateSdkkey: true,\n    canCreateorupdateSegment: true,\n    canDeleteSegment: true,\n    canViewProductAuditlog: true,\n    canViewProductStatistics: true,\n});\nexport const permissionGroupId = myPermissionGroup.id;\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\nimport pulumiverse_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\nmy_permission_group = configcat.PermissionGroup(\"my_permission_group\",\n    product_id=my_products.products[0].product_id,\n    name=\"Administrators\",\n    accesstype=\"full\",\n    can_manage_members=True,\n    can_createorupdate_config=True,\n    can_delete_config=True,\n    can_createorupdate_environment=True,\n    can_delete_environment=True,\n    can_createorupdate_setting=True,\n    can_tag_setting=True,\n    can_delete_setting=True,\n    can_createorupdate_tag=True,\n    can_delete_tag=True,\n    can_manage_webhook=True,\n    can_use_exportimport=True,\n    can_manage_product_preferences=True,\n    can_manage_integrations=True,\n    can_view_sdkkey=True,\n    can_rotate_sdkkey=True,\n    can_createorupdate_segment=True,\n    can_delete_segment=True,\n    can_view_product_auditlog=True,\n    can_view_product_statistics=True)\npulumi.export(\"permissionGroupId\", my_permission_group.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    var myPermissionGroup = new Configcat.PermissionGroup(\"my_permission_group\", new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        Name = \"Administrators\",\n        Accesstype = \"full\",\n        CanManageMembers = true,\n        CanCreateorupdateConfig = true,\n        CanDeleteConfig = true,\n        CanCreateorupdateEnvironment = true,\n        CanDeleteEnvironment = true,\n        CanCreateorupdateSetting = true,\n        CanTagSetting = true,\n        CanDeleteSetting = true,\n        CanCreateorupdateTag = true,\n        CanDeleteTag = true,\n        CanManageWebhook = true,\n        CanUseExportimport = true,\n        CanManageProductPreferences = true,\n        CanManageIntegrations = true,\n        CanViewSdkkey = true,\n        CanRotateSdkkey = true,\n        CanCreateorupdateSegment = true,\n        CanDeleteSegment = true,\n        CanViewProductAuditlog = true,\n        CanViewProductStatistics = true,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"permissionGroupId\"] = myPermissionGroup.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyPermissionGroup, err := configcat.NewPermissionGroup(ctx, \"my_permission_group\", \u0026configcat.PermissionGroupArgs{\n\t\t\tProductId:                    pulumi.String(myProducts.Products[0].ProductId),\n\t\t\tName:                         pulumi.String(\"Administrators\"),\n\t\t\tAccesstype:                   pulumi.String(\"full\"),\n\t\t\tCanManageMembers:             pulumi.Bool(true),\n\t\t\tCanCreateorupdateConfig:      pulumi.Bool(true),\n\t\t\tCanDeleteConfig:              pulumi.Bool(true),\n\t\t\tCanCreateorupdateEnvironment: pulumi.Bool(true),\n\t\t\tCanDeleteEnvironment:         pulumi.Bool(true),\n\t\t\tCanCreateorupdateSetting:     pulumi.Bool(true),\n\t\t\tCanTagSetting:                pulumi.Bool(true),\n\t\t\tCanDeleteSetting:             pulumi.Bool(true),\n\t\t\tCanCreateorupdateTag:         pulumi.Bool(true),\n\t\t\tCanDeleteTag:                 pulumi.Bool(true),\n\t\t\tCanManageWebhook:             pulumi.Bool(true),\n\t\t\tCanUseExportimport:           pulumi.Bool(true),\n\t\t\tCanManageProductPreferences:  pulumi.Bool(true),\n\t\t\tCanManageIntegrations:        pulumi.Bool(true),\n\t\t\tCanViewSdkkey:                pulumi.Bool(true),\n\t\t\tCanRotateSdkkey:              pulumi.Bool(true),\n\t\t\tCanCreateorupdateSegment:     pulumi.Bool(true),\n\t\t\tCanDeleteSegment:             pulumi.Bool(true),\n\t\t\tCanViewProductAuditlog:       pulumi.Bool(true),\n\t\t\tCanViewProductStatistics:     pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"permissionGroupId\", myPermissionGroup.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport com.pulumi.configcat.PermissionGroup;\nimport com.pulumi.configcat.PermissionGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        var myPermissionGroup = new PermissionGroup(\"myPermissionGroup\", PermissionGroupArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .name(\"Administrators\")\n            .accesstype(\"full\")\n            .canManageMembers(true)\n            .canCreateorupdateConfig(true)\n            .canDeleteConfig(true)\n            .canCreateorupdateEnvironment(true)\n            .canDeleteEnvironment(true)\n            .canCreateorupdateSetting(true)\n            .canTagSetting(true)\n            .canDeleteSetting(true)\n            .canCreateorupdateTag(true)\n            .canDeleteTag(true)\n            .canManageWebhook(true)\n            .canUseExportimport(true)\n            .canManageProductPreferences(true)\n            .canManageIntegrations(true)\n            .canViewSdkkey(true)\n            .canRotateSdkkey(true)\n            .canCreateorupdateSegment(true)\n            .canDeleteSegment(true)\n            .canViewProductAuditlog(true)\n            .canViewProductStatistics(true)\n            .build());\n\n        ctx.export(\"permissionGroupId\", myPermissionGroup.id());\n    }\n}\n```\n```yaml\nresources:\n  myPermissionGroup:\n    type: configcat:PermissionGroup\n    name: my_permission_group\n    properties:\n      productId: ${myProducts.products[0].productId}\n      name: Administrators\n      accesstype: full\n      canManageMembers: true\n      canCreateorupdateConfig: true\n      canDeleteConfig: true\n      canCreateorupdateEnvironment: true\n      canDeleteEnvironment: true\n      canCreateorupdateSetting: true\n      canTagSetting: true\n      canDeleteSetting: true\n      canCreateorupdateTag: true\n      canDeleteTag: true\n      canManageWebhook: true\n      canUseExportimport: true\n      canManageProductPreferences: true\n      canManageIntegrations: true\n      canViewSdkkey: true\n      canRotateSdkkey: true\n      canCreateorupdateSegment: true\n      canDeleteSegment: true\n      canViewProductAuditlog: true\n      canViewProductStatistics: true\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\noutputs:\n  permissionGroupId: ${myPermissionGroup.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nconst myTestEnvironments = configcat.getEnvironments({\n    nameFilterRegex: \"Test\",\n});\nconst myProductionEnvironments = configcat.getEnvironments({\n    nameFilterRegex: \"Production\",\n});\nconst myPermissionGroup = new configcat.PermissionGroup(\"my_permission_group\", {\n    productId: myProducts.then(myProducts =\u003e myProducts.products?.[0]?.productId),\n    name: \"Read only except Test environment\",\n    accesstype: \"custom\",\n    environmentAccesses: Promise.all([myTestEnvironments, myTestEnvironments]).then(([myTestEnvironments, myTestEnvironments1]) =\u003e {\n        [myTestEnvironments.environments?.[0]?.environmentId]: \"full\",\n        [myTestEnvironments1.environments?.[1]?.environmentId]: \"readOnly\",\n    }),\n});\nexport const permissionGroupId = myPermissionGroup.id;\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\nimport pulumiverse_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\nmy_test_environments = configcat.get_environments(name_filter_regex=\"Test\")\nmy_production_environments = configcat.get_environments(name_filter_regex=\"Production\")\nmy_permission_group = configcat.PermissionGroup(\"my_permission_group\",\n    product_id=my_products.products[0].product_id,\n    name=\"Read only except Test environment\",\n    accesstype=\"custom\",\n    environment_accesses={\n        my_test_environments.environments[0].environment_id: \"full\",\n        my_test_environments.environments[1].environment_id: \"readOnly\",\n    })\npulumi.export(\"permissionGroupId\", my_permission_group.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    var myTestEnvironments = Configcat.GetEnvironments.Invoke(new()\n    {\n        NameFilterRegex = \"Test\",\n    });\n\n    var myProductionEnvironments = Configcat.GetEnvironments.Invoke(new()\n    {\n        NameFilterRegex = \"Production\",\n    });\n\n    var myPermissionGroup = new Configcat.PermissionGroup(\"my_permission_group\", new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        Name = \"Read only except Test environment\",\n        Accesstype = \"custom\",\n        EnvironmentAccesses = Output.Tuple(myTestEnvironments, myTestEnvironments).Apply(values =\u003e\n        {\n            var myTestEnvironments = values.Item1;\n            var myTestEnvironments1 = values.Item2;\n            return \n            {\n                { myTestEnvironments.Apply(getEnvironmentsResult =\u003e getEnvironmentsResult.Environments[0]?.EnvironmentId), \"full\" },\n                { myTestEnvironments1.Environments[1]?.EnvironmentId, \"readOnly\" },\n            };\n        }),\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"permissionGroupId\"] = myPermissionGroup.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyTestEnvironments, err := configcat.GetEnvironments(ctx, \u0026configcat.GetEnvironmentsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = configcat.GetEnvironments(ctx, \u0026configcat.GetEnvironmentsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Production\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyPermissionGroup, err := configcat.NewPermissionGroup(ctx, \"my_permission_group\", \u0026configcat.PermissionGroupArgs{\n\t\t\tProductId:  pulumi.String(myProducts.Products[0].ProductId),\n\t\t\tName:       pulumi.String(\"Read only except Test environment\"),\n\t\t\tAccesstype: pulumi.String(\"custom\"),\n\t\t\tEnvironmentAccesses: pulumi.StringMap{\n\t\t\t\tmyTestEnvironments.Environments[0].EnvironmentId: pulumi.String(\"full\"),\n\t\t\t\tmyTestEnvironments.Environments[1].EnvironmentId: pulumi.String(\"readOnly\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"permissionGroupId\", myPermissionGroup.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport com.pulumi.configcat.inputs.GetEnvironmentsArgs;\nimport com.pulumi.configcat.PermissionGroup;\nimport com.pulumi.configcat.PermissionGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        final var myTestEnvironments = ConfigcatFunctions.getEnvironments(GetEnvironmentsArgs.builder()\n            .nameFilterRegex(\"Test\")\n            .build());\n\n        final var myProductionEnvironments = ConfigcatFunctions.getEnvironments(GetEnvironmentsArgs.builder()\n            .nameFilterRegex(\"Production\")\n            .build());\n\n        var myPermissionGroup = new PermissionGroup(\"myPermissionGroup\", PermissionGroupArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .name(\"Read only except Test environment\")\n            .accesstype(\"custom\")\n            .environmentAccesses(Map.ofEntries(\n                Map.entry(myTestEnvironments.applyValue(getEnvironmentsResult -\u003e getEnvironmentsResult.environments()[0].environmentId()), \"full\"),\n                Map.entry(myTestEnvironments.applyValue(getEnvironmentsResult -\u003e getEnvironmentsResult.environments()[1].environmentId()), \"readOnly\")\n            ))\n            .build());\n\n        ctx.export(\"permissionGroupId\", myPermissionGroup.id());\n    }\n}\n```\n```yaml\nresources:\n  myPermissionGroup:\n    type: configcat:PermissionGroup\n    name: my_permission_group\n    properties:\n      productId: ${myProducts.products[0].productId}\n      name: Read only except Test environment\n      accesstype: custom\n      environmentAccesses:\n        ${myTestEnvironments.environments[0].environmentId}: full\n        ${myTestEnvironments.environments[1].environmentId}: readOnly\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\n  myTestEnvironments:\n    fn::invoke:\n      function: configcat:getEnvironments\n      arguments:\n        nameFilterRegex: Test\n  myProductionEnvironments:\n    fn::invoke:\n      function: configcat:getEnvironments\n      arguments:\n        nameFilterRegex: Production\noutputs:\n  permissionGroupId: ${myPermissionGroup.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n* [Get Permission Group](https://api.configcat.com/docs/#tag/Permission-Groups/operation/get-permission-group)\n* [Create Permission Group](https://api.configcat.com/docs/#tag/Permission-Groups/operation/create-permission-group)\n* [Update Permission Group](https://api.configcat.com/docs/#tag/Permission-Groups/operation/update-permission-group)\n* [Delete Permission Group](https://api.configcat.com/docs/#tag/Permission-Groups/operation/delete-permission-group)\n\n## Import\n\nPermission Groups can be imported using the PermissionGroupId. Get the PermissionGroupId using the [List Permission Groups API](https://api.configcat.com/docs/#tag/Permission-Groups/operation/get-permission-groups) for example.\n\n```sh\n$ pulumi import configcat:index/permissionGroup:PermissionGroup example 123\n```\nRead more about importing.\n\n",
            "properties": {
                "accesstype": {
                    "type": "string",
                    "description": "Represent the Feature Management permission. Possible values: readOnly, full, custom. Default: custom\n"
                },
                "canCreateorupdateConfig": {
                    "type": "boolean",
                    "description": "Group members can create/update Configs. Default: false.\n"
                },
                "canCreateorupdateEnvironment": {
                    "type": "boolean",
                    "description": "Group members can create/update Environments. Default: false.\n"
                },
                "canCreateorupdateSegment": {
                    "type": "boolean"
                },
                "canCreateorupdateSetting": {
                    "type": "boolean",
                    "description": "Group members can create/update Feature Flags and Settings. Default: false.\n"
                },
                "canCreateorupdateTag": {
                    "type": "boolean",
                    "description": "Group members can create/update Tags. Default: false.\n"
                },
                "canDeleteConfig": {
                    "type": "boolean",
                    "description": "Group members can delete Configs. Default: false.\n"
                },
                "canDeleteEnvironment": {
                    "type": "boolean",
                    "description": "Group members can delete Environments. Default: false.\n"
                },
                "canDeleteSegment": {
                    "type": "boolean"
                },
                "canDeleteSetting": {
                    "type": "boolean",
                    "description": "Group members can delete Feature Flags and Settings. Default: false.\n"
                },
                "canDeleteTag": {
                    "type": "boolean",
                    "description": "Group members can delete Tags. Default: false.\n"
                },
                "canManageIntegrations": {
                    "type": "boolean",
                    "description": "Group members can add and configure integrations. Default: false.\n"
                },
                "canManageMembers": {
                    "type": "boolean",
                    "description": "Group members can manage team members. Default: false.\n"
                },
                "canManageProductPreferences": {
                    "type": "boolean",
                    "description": "Group members can update Product preferences. Default: false.\n"
                },
                "canManageWebhook": {
                    "type": "boolean",
                    "description": "Group members can create/update/delete Webhooks. Default: false.\n"
                },
                "canRotateSdkkey": {
                    "type": "boolean",
                    "description": "Group members can rotate SDK keys. Default: false.\n"
                },
                "canTagSetting": {
                    "type": "boolean",
                    "description": "Group members can attach/detach Tags to Feature Flags and Settings. Default: false.\n"
                },
                "canUseExportimport": {
                    "type": "boolean",
                    "description": "Group members can use the export/import feature. Default: false.\n"
                },
                "canViewProductAuditlog": {
                    "type": "boolean",
                    "description": "Group members has access to audit logs. Default: false.\n"
                },
                "canViewProductStatistics": {
                    "type": "boolean",
                    "description": "Group members has access to product statistics. Default: false.\n"
                },
                "canViewSdkkey": {
                    "type": "boolean",
                    "description": "Group members has access to SDK keys. Default: false.\n"
                },
                "environmentAccesses": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment specific permissions map block defined as below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Permission Group.\n"
                },
                "newEnvironmentAccesstype": {
                    "type": "string",
                    "description": "Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly, none. Default: none.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "required": [
                "name",
                "productId"
            ],
            "inputProperties": {
                "accesstype": {
                    "type": "string",
                    "description": "Represent the Feature Management permission. Possible values: readOnly, full, custom. Default: custom\n"
                },
                "canCreateorupdateConfig": {
                    "type": "boolean",
                    "description": "Group members can create/update Configs. Default: false.\n"
                },
                "canCreateorupdateEnvironment": {
                    "type": "boolean",
                    "description": "Group members can create/update Environments. Default: false.\n"
                },
                "canCreateorupdateSegment": {
                    "type": "boolean"
                },
                "canCreateorupdateSetting": {
                    "type": "boolean",
                    "description": "Group members can create/update Feature Flags and Settings. Default: false.\n"
                },
                "canCreateorupdateTag": {
                    "type": "boolean",
                    "description": "Group members can create/update Tags. Default: false.\n"
                },
                "canDeleteConfig": {
                    "type": "boolean",
                    "description": "Group members can delete Configs. Default: false.\n"
                },
                "canDeleteEnvironment": {
                    "type": "boolean",
                    "description": "Group members can delete Environments. Default: false.\n"
                },
                "canDeleteSegment": {
                    "type": "boolean"
                },
                "canDeleteSetting": {
                    "type": "boolean",
                    "description": "Group members can delete Feature Flags and Settings. Default: false.\n"
                },
                "canDeleteTag": {
                    "type": "boolean",
                    "description": "Group members can delete Tags. Default: false.\n"
                },
                "canManageIntegrations": {
                    "type": "boolean",
                    "description": "Group members can add and configure integrations. Default: false.\n"
                },
                "canManageMembers": {
                    "type": "boolean",
                    "description": "Group members can manage team members. Default: false.\n"
                },
                "canManageProductPreferences": {
                    "type": "boolean",
                    "description": "Group members can update Product preferences. Default: false.\n"
                },
                "canManageWebhook": {
                    "type": "boolean",
                    "description": "Group members can create/update/delete Webhooks. Default: false.\n"
                },
                "canRotateSdkkey": {
                    "type": "boolean",
                    "description": "Group members can rotate SDK keys. Default: false.\n"
                },
                "canTagSetting": {
                    "type": "boolean",
                    "description": "Group members can attach/detach Tags to Feature Flags and Settings. Default: false.\n"
                },
                "canUseExportimport": {
                    "type": "boolean",
                    "description": "Group members can use the export/import feature. Default: false.\n"
                },
                "canViewProductAuditlog": {
                    "type": "boolean",
                    "description": "Group members has access to audit logs. Default: false.\n"
                },
                "canViewProductStatistics": {
                    "type": "boolean",
                    "description": "Group members has access to product statistics. Default: false.\n"
                },
                "canViewSdkkey": {
                    "type": "boolean",
                    "description": "Group members has access to SDK keys. Default: false.\n"
                },
                "environmentAccesses": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The environment specific permissions map block defined as below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Permission Group.\n"
                },
                "newEnvironmentAccesstype": {
                    "type": "string",
                    "description": "Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly, none. Default: none.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "productId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PermissionGroup resources.\n",
                "properties": {
                    "accesstype": {
                        "type": "string",
                        "description": "Represent the Feature Management permission. Possible values: readOnly, full, custom. Default: custom\n"
                    },
                    "canCreateorupdateConfig": {
                        "type": "boolean",
                        "description": "Group members can create/update Configs. Default: false.\n"
                    },
                    "canCreateorupdateEnvironment": {
                        "type": "boolean",
                        "description": "Group members can create/update Environments. Default: false.\n"
                    },
                    "canCreateorupdateSegment": {
                        "type": "boolean"
                    },
                    "canCreateorupdateSetting": {
                        "type": "boolean",
                        "description": "Group members can create/update Feature Flags and Settings. Default: false.\n"
                    },
                    "canCreateorupdateTag": {
                        "type": "boolean",
                        "description": "Group members can create/update Tags. Default: false.\n"
                    },
                    "canDeleteConfig": {
                        "type": "boolean",
                        "description": "Group members can delete Configs. Default: false.\n"
                    },
                    "canDeleteEnvironment": {
                        "type": "boolean",
                        "description": "Group members can delete Environments. Default: false.\n"
                    },
                    "canDeleteSegment": {
                        "type": "boolean"
                    },
                    "canDeleteSetting": {
                        "type": "boolean",
                        "description": "Group members can delete Feature Flags and Settings. Default: false.\n"
                    },
                    "canDeleteTag": {
                        "type": "boolean",
                        "description": "Group members can delete Tags. Default: false.\n"
                    },
                    "canManageIntegrations": {
                        "type": "boolean",
                        "description": "Group members can add and configure integrations. Default: false.\n"
                    },
                    "canManageMembers": {
                        "type": "boolean",
                        "description": "Group members can manage team members. Default: false.\n"
                    },
                    "canManageProductPreferences": {
                        "type": "boolean",
                        "description": "Group members can update Product preferences. Default: false.\n"
                    },
                    "canManageWebhook": {
                        "type": "boolean",
                        "description": "Group members can create/update/delete Webhooks. Default: false.\n"
                    },
                    "canRotateSdkkey": {
                        "type": "boolean",
                        "description": "Group members can rotate SDK keys. Default: false.\n"
                    },
                    "canTagSetting": {
                        "type": "boolean",
                        "description": "Group members can attach/detach Tags to Feature Flags and Settings. Default: false.\n"
                    },
                    "canUseExportimport": {
                        "type": "boolean",
                        "description": "Group members can use the export/import feature. Default: false.\n"
                    },
                    "canViewProductAuditlog": {
                        "type": "boolean",
                        "description": "Group members has access to audit logs. Default: false.\n"
                    },
                    "canViewProductStatistics": {
                        "type": "boolean",
                        "description": "Group members has access to product statistics. Default: false.\n"
                    },
                    "canViewSdkkey": {
                        "type": "boolean",
                        "description": "Group members has access to SDK keys. Default: false.\n"
                    },
                    "environmentAccesses": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The environment specific permissions map block defined as below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Permission Group.\n"
                    },
                    "newEnvironmentAccesstype": {
                        "type": "string",
                        "description": "Represent the environment specific Feature Management permission for new Environments. Possible values: full, readOnly, none. Default: none.\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/product:Product": {
            "description": "## # configcat.Product Resource\n\nCreates and manages a **Product**. [What is a Product in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst myOrganizations = configcat.getOrganizations({\n    nameFilterRegex: \"ConfigCat\",\n});\nconst myProduct = new configcat.Product(\"my_product\", {\n    organizationId: myOrganizations.then(myOrganizations =\u003e myOrganizations.organizations?.[0]?.organizationId),\n    name: \"My product\",\n    description: \"My product description\",\n    order: 0,\n});\nexport const productId = myProduct.id;\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\nimport pulumiverse_configcat as configcat\n\nmy_organizations = configcat.get_organizations(name_filter_regex=\"ConfigCat\")\nmy_product = configcat.Product(\"my_product\",\n    organization_id=my_organizations.organizations[0].organization_id,\n    name=\"My product\",\n    description=\"My product description\",\n    order=0)\npulumi.export(\"productId\", my_product.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myOrganizations = Configcat.GetOrganizations.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat\",\n    });\n\n    var myProduct = new Configcat.Product(\"my_product\", new()\n    {\n        OrganizationId = myOrganizations.Apply(getOrganizationsResult =\u003e getOrganizationsResult.Organizations[0]?.OrganizationId),\n        Name = \"My product\",\n        Description = \"My product description\",\n        Order = 0,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"productId\"] = myProduct.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyOrganizations, err := configcat.GetOrganizations(ctx, \u0026configcat.GetOrganizationsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyProduct, err := configcat.NewProduct(ctx, \"my_product\", \u0026configcat.ProductArgs{\n\t\t\tOrganizationId: pulumi.String(myOrganizations.Organizations[0].OrganizationId),\n\t\t\tName:           pulumi.String(\"My product\"),\n\t\t\tDescription:    pulumi.String(\"My product description\"),\n\t\t\tOrder:          pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"productId\", myProduct.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetOrganizationsArgs;\nimport com.pulumi.configcat.Product;\nimport com.pulumi.configcat.ProductArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myOrganizations = ConfigcatFunctions.getOrganizations(GetOrganizationsArgs.builder()\n            .nameFilterRegex(\"ConfigCat\")\n            .build());\n\n        var myProduct = new Product(\"myProduct\", ProductArgs.builder()\n            .organizationId(myOrganizations.applyValue(getOrganizationsResult -\u003e getOrganizationsResult.organizations()[0].organizationId()))\n            .name(\"My product\")\n            .description(\"My product description\")\n            .order(0)\n            .build());\n\n        ctx.export(\"productId\", myProduct.id());\n    }\n}\n```\n```yaml\nresources:\n  myProduct:\n    type: configcat:Product\n    name: my_product\n    properties:\n      organizationId: ${myOrganizations.organizations[0].organizationId}\n      name: My product\n      description: My product description\n      order: 0\nvariables:\n  myOrganizations:\n    fn::invoke:\n      function: configcat:getOrganizations\n      arguments:\n        nameFilterRegex: ConfigCat\noutputs:\n  productId: ${myProduct.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n* [Get Product](https://api.configcat.com/docs/#tag/Products/operation/get-product)\n* [Create Product](https://api.configcat.com/docs/#tag/Products/operation/create-product)\n* [Update Product](https://api.configcat.com/docs/#tag/Products/operation/update-product)\n* [Delete Product](https://api.configcat.com/docs/#tag/Products/operation/delete-product)\n\n## Import\n\nProducts can be imported using the ProductId. Get the ProductId using the [List Products API](https://api.configcat.com/docs/#tag/Products/operation/get-products) for example.\n\n```sh\n$ pulumi import configcat:index/product:Product example 08d86d63-2726-47cd-8bfc-59608ecb91e2\n```\nRead more about importing.\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Product.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Product.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Product within an Organization (zero-based). If multiple Products has the same order, they are displayed in alphabetical order.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the Organization.\n"
                }
            },
            "required": [
                "name",
                "order",
                "organizationId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the Product.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Product.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Product within an Organization (zero-based). If multiple Products has the same order, they are displayed in alphabetical order.\n"
                },
                "organizationId": {
                    "type": "string",
                    "description": "The ID of the Organization.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "order",
                "organizationId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Product resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the Product.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Product.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order of the Product within an Organization (zero-based). If multiple Products has the same order, they are displayed in alphabetical order.\n"
                    },
                    "organizationId": {
                        "type": "string",
                        "description": "The ID of the Organization.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/segment:Segment": {
            "description": "## # configcat.Segment Resource\n\nCreates and manages a **Segment**. [What is a Segment in ConfigCat?](https://configcat.com/docs/advanced/segments)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nconst mySegment = new configcat.Segment(\"my_segment\", {\n    productId: myProducts.then(myProducts =\u003e myProducts.products?.[0]?.productId),\n    name: \"Beta users\",\n    description: \"Beta users' description\",\n    comparisonAttribute: \"email\",\n    comparator: \"sensitiveIsOneOf\",\n    comparisonValue: \"betauser1@example.com,betauser2@example.com\",\n});\nexport const segmentId = mySegment.id;\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\nimport pulumiverse_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\nmy_segment = configcat.Segment(\"my_segment\",\n    product_id=my_products.products[0].product_id,\n    name=\"Beta users\",\n    description=\"Beta users' description\",\n    comparison_attribute=\"email\",\n    comparator=\"sensitiveIsOneOf\",\n    comparison_value=\"betauser1@example.com,betauser2@example.com\")\npulumi.export(\"segmentId\", my_segment.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    var mySegment = new Configcat.Segment(\"my_segment\", new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        Name = \"Beta users\",\n        Description = \"Beta users' description\",\n        ComparisonAttribute = \"email\",\n        Comparator = \"sensitiveIsOneOf\",\n        ComparisonValue = \"betauser1@example.com,betauser2@example.com\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"segmentId\"] = mySegment.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmySegment, err := configcat.NewSegment(ctx, \"my_segment\", \u0026configcat.SegmentArgs{\n\t\t\tProductId:           pulumi.String(myProducts.Products[0].ProductId),\n\t\t\tName:                pulumi.String(\"Beta users\"),\n\t\t\tDescription:         pulumi.String(\"Beta users' description\"),\n\t\t\tComparisonAttribute: pulumi.String(\"email\"),\n\t\t\tComparator:          pulumi.String(\"sensitiveIsOneOf\"),\n\t\t\tComparisonValue:     pulumi.String(\"betauser1@example.com,betauser2@example.com\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"segmentId\", mySegment.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport com.pulumi.configcat.Segment;\nimport com.pulumi.configcat.SegmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        var mySegment = new Segment(\"mySegment\", SegmentArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .name(\"Beta users\")\n            .description(\"Beta users' description\")\n            .comparisonAttribute(\"email\")\n            .comparator(\"sensitiveIsOneOf\")\n            .comparisonValue(\"betauser1@example.com,betauser2@example.com\")\n            .build());\n\n        ctx.export(\"segmentId\", mySegment.id());\n    }\n}\n```\n```yaml\nresources:\n  mySegment:\n    type: configcat:Segment\n    name: my_segment\n    properties:\n      productId: ${myProducts.products[0].productId}\n      name: Beta users\n      description: Beta users' description\n      comparisonAttribute: email\n      comparator: sensitiveIsOneOf\n      comparisonValue: betauser1@example.com,betauser2@example.com\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\noutputs:\n  segmentId: ${mySegment.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n* [Get Segment](https://api.configcat.com/docs/#tag/Segments/operation/get-segment)\n* [Create Segment](https://api.configcat.com/docs/#tag/Segments/operation/create-segment)\n* [Update Segment](https://api.configcat.com/docs/#tag/Segments/operation/update-segment)\n* [Delete Segment](https://api.configcat.com/docs/#tag/Segments/operation/delete-segment)\n\n## Import\n\nSegments can be imported using the SegmentId. Get the SegmentId using the [List Segments API](https://api.configcat.com/docs/#tag/Segments/operation/get-segments) for example.\n\n```sh\n$ pulumi import configcat:index/segment:Segment example 08d86d63-2726-47cd-8bfc-59608ecb91e2\n```\nRead more about importing.\n\n",
            "properties": {
                "comparator": {
                    "type": "string",
                    "description": "The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).\n"
                },
                "comparisonAttribute": {
                    "type": "string",
                    "description": "The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute).\n"
                },
                "comparisonValue": {
                    "type": "string",
                    "description": "The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Segment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Segment.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "required": [
                "comparator",
                "comparisonAttribute",
                "comparisonValue",
                "name",
                "productId"
            ],
            "inputProperties": {
                "comparator": {
                    "type": "string",
                    "description": "The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).\n"
                },
                "comparisonAttribute": {
                    "type": "string",
                    "description": "The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute).\n"
                },
                "comparisonValue": {
                    "type": "string",
                    "description": "The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Segment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Segment.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "comparator",
                "comparisonAttribute",
                "comparisonValue",
                "productId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Segment resources.\n",
                "properties": {
                    "comparator": {
                        "type": "string",
                        "description": "The [comparator](https://configcat.com/docs/advanced/targeting/#comparator).\n"
                    },
                    "comparisonAttribute": {
                        "type": "string",
                        "description": "The [comparison attribute](https://configcat.com/docs/advanced/targeting/#attribute).\n"
                    },
                    "comparisonValue": {
                        "type": "string",
                        "description": "The [comparison value](https://configcat.com/docs/advanced/targeting/#comparison-value).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Segment.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Segment.\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/setting:Setting": {
            "description": "## # configcat.Setting Resource\n\nCreates and manages a **Feature Flag/Setting**. [Read more about the anatomy of a Feature Flag or Setting.](https://configcat.com/docs/main-concepts) \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nconst myConfigs = myProducts.then(myProducts =\u003e configcat.getConfigurations({\n    productId: myProducts.products?.[0]?.productId,\n    nameFilterRegex: \"Main Config\",\n}));\nconst mySetting = new configcat.Setting(\"my_setting\", {\n    configId: myConfigs.then(myConfigs =\u003e myConfigs.configs?.[0]?.configId),\n    key: \"isAwesomeFeatureEnabled\",\n    name: \"My awesome feature flag\",\n    hint: \"This is the hint for my awesome feature flag\",\n    settingType: \"boolean\",\n    order: 0,\n});\nexport const settingId = mySetting.id;\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\nimport pulumiverse_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\nmy_configs = configcat.get_configurations(product_id=my_products.products[0].product_id,\n    name_filter_regex=\"Main Config\")\nmy_setting = configcat.Setting(\"my_setting\",\n    config_id=my_configs.configs[0].config_id,\n    key=\"isAwesomeFeatureEnabled\",\n    name=\"My awesome feature flag\",\n    hint=\"This is the hint for my awesome feature flag\",\n    setting_type=\"boolean\",\n    order=0)\npulumi.export(\"settingId\", my_setting.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    var myConfigs = Configcat.GetConfigurations.Invoke(new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        NameFilterRegex = \"Main Config\",\n    });\n\n    var mySetting = new Configcat.Setting(\"my_setting\", new()\n    {\n        ConfigId = myConfigs.Apply(getConfigurationsResult =\u003e getConfigurationsResult.Configs[0]?.ConfigId),\n        Key = \"isAwesomeFeatureEnabled\",\n        Name = \"My awesome feature flag\",\n        Hint = \"This is the hint for my awesome feature flag\",\n        SettingType = \"boolean\",\n        Order = 0,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"settingId\"] = mySetting.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyConfigs, err := configcat.GetConfigurations(ctx, \u0026configcat.GetConfigurationsArgs{\n\t\t\tProductId:       myProducts.Products[0].ProductId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Main Config\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmySetting, err := configcat.NewSetting(ctx, \"my_setting\", \u0026configcat.SettingArgs{\n\t\t\tConfigId:    pulumi.String(myConfigs.Configs[0].ConfigId),\n\t\t\tKey:         pulumi.String(\"isAwesomeFeatureEnabled\"),\n\t\t\tName:        pulumi.String(\"My awesome feature flag\"),\n\t\t\tHint:        pulumi.String(\"This is the hint for my awesome feature flag\"),\n\t\t\tSettingType: pulumi.String(\"boolean\"),\n\t\t\tOrder:       pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"settingId\", mySetting.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport com.pulumi.configcat.inputs.GetConfigurationsArgs;\nimport com.pulumi.configcat.Setting;\nimport com.pulumi.configcat.SettingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        final var myConfigs = ConfigcatFunctions.getConfigurations(GetConfigurationsArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .nameFilterRegex(\"Main Config\")\n            .build());\n\n        var mySetting = new Setting(\"mySetting\", SettingArgs.builder()\n            .configId(myConfigs.applyValue(getConfigurationsResult -\u003e getConfigurationsResult.configs()[0].configId()))\n            .key(\"isAwesomeFeatureEnabled\")\n            .name(\"My awesome feature flag\")\n            .hint(\"This is the hint for my awesome feature flag\")\n            .settingType(\"boolean\")\n            .order(0)\n            .build());\n\n        ctx.export(\"settingId\", mySetting.id());\n    }\n}\n```\n```yaml\nresources:\n  mySetting:\n    type: configcat:Setting\n    name: my_setting\n    properties:\n      configId: ${myConfigs.configs[0].configId}\n      key: isAwesomeFeatureEnabled\n      name: My awesome feature flag\n      hint: This is the hint for my awesome feature flag\n      settingType: boolean\n      order: 0\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\n  myConfigs:\n    fn::invoke:\n      function: configcat:getConfigurations\n      arguments:\n        productId: ${myProducts.products[0].productId}\n        nameFilterRegex: Main Config\noutputs:\n  settingId: ${mySetting.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n* [Get Flag](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/get-setting)\n* [Create Flag](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/create-setting)\n* [Update Flag](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/update-setting)\n* [Delete Flag](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/delete-setting)\n\n## Import\n\nFeature Flags/Settings can be imported using the SettingId. Get the SettingId using e.g. the [List Flags API](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/get-settings).\n\n```sh\n$ pulumi import configcat:index/setting:Setting example 1234\n```\nRead more about importing.\n\n",
            "properties": {
                "configId": {
                    "type": "string",
                    "description": "The ID of the Config.\n"
                },
                "hint": {
                    "type": "string",
                    "description": "The hint of the Setting.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The key of the Feature Flag/Setting.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Setting.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Setting within a Config (zero-based). If multiple Settings has the same order, they are displayed in alphabetical order.\n"
                },
                "settingType": {
                    "type": "string",
                    "description": "Default: `boolean`. The Setting's type.  \nAvailable values: `boolean`|`string`|`int`|`double`.\n"
                }
            },
            "required": [
                "configId",
                "key",
                "name",
                "order"
            ],
            "inputProperties": {
                "configId": {
                    "type": "string",
                    "description": "The ID of the Config.\n",
                    "willReplaceOnChanges": true
                },
                "hint": {
                    "type": "string",
                    "description": "The hint of the Setting.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The key of the Feature Flag/Setting.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Setting.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The order of the Setting within a Config (zero-based). If multiple Settings has the same order, they are displayed in alphabetical order.\n"
                },
                "settingType": {
                    "type": "string",
                    "description": "Default: `boolean`. The Setting's type.  \nAvailable values: `boolean`|`string`|`int`|`double`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "configId",
                "key",
                "order"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Setting resources.\n",
                "properties": {
                    "configId": {
                        "type": "string",
                        "description": "The ID of the Config.\n",
                        "willReplaceOnChanges": true
                    },
                    "hint": {
                        "type": "string",
                        "description": "The hint of the Setting.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The key of the Feature Flag/Setting.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Setting.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "The order of the Setting within a Config (zero-based). If multiple Settings has the same order, they are displayed in alphabetical order.\n"
                    },
                    "settingType": {
                        "type": "string",
                        "description": "Default: `boolean`. The Setting's type.  \nAvailable values: `boolean`|`string`|`int`|`double`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/settingTag:SettingTag": {
            "description": "## # configcat.SettingTag Resource\n\nAdds/Removes **Tags** to/from **Feature Flags and Settings**.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nconst myConfigs = myProducts.then(myProducts =\u003e configcat.getConfigurations({\n    productId: myProducts.products?.[0]?.productId,\n    nameFilterRegex: \"Main Config\",\n}));\nconst myTags = myProducts.then(myProducts =\u003e configcat.getTags({\n    productId: myProducts.products?.[0]?.productId,\n    nameFilterRegex: \"Tag\",\n}));\nconst mySettings = myConfigs.then(myConfigs =\u003e configcat.getSettings({\n    configId: myConfigs.configs?.[0]?.configId,\n    keyFilterRegex: \"isAwesomeFeatureEnabled\",\n}));\nconst mySettingTag = new configcat.SettingTag(\"my_setting_tag\", {\n    settingId: mySettings.then(mySettings =\u003e mySettings.settings?.[0]?.settingId),\n    tagId: myTags.then(myTags =\u003e myTags.tags?.[0]?.tagId),\n});\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\nimport pulumiverse_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\nmy_configs = configcat.get_configurations(product_id=my_products.products[0].product_id,\n    name_filter_regex=\"Main Config\")\nmy_tags = configcat.get_tags(product_id=my_products.products[0].product_id,\n    name_filter_regex=\"Tag\")\nmy_settings = configcat.get_settings(config_id=my_configs.configs[0].config_id,\n    key_filter_regex=\"isAwesomeFeatureEnabled\")\nmy_setting_tag = configcat.SettingTag(\"my_setting_tag\",\n    setting_id=my_settings.settings[0].setting_id,\n    tag_id=my_tags.tags[0].tag_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    var myConfigs = Configcat.GetConfigurations.Invoke(new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        NameFilterRegex = \"Main Config\",\n    });\n\n    var myTags = Configcat.GetTags.Invoke(new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        NameFilterRegex = \"Tag\",\n    });\n\n    var mySettings = Configcat.GetSettings.Invoke(new()\n    {\n        ConfigId = myConfigs.Apply(getConfigurationsResult =\u003e getConfigurationsResult.Configs[0]?.ConfigId),\n        KeyFilterRegex = \"isAwesomeFeatureEnabled\",\n    });\n\n    var mySettingTag = new Configcat.SettingTag(\"my_setting_tag\", new()\n    {\n        SettingId = mySettings.Apply(getSettingsResult =\u003e getSettingsResult.Settings[0]?.SettingId),\n        TagId = myTags.Apply(getTagsResult =\u003e getTagsResult.Tags[0]?.TagId),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyConfigs, err := configcat.GetConfigurations(ctx, \u0026configcat.GetConfigurationsArgs{\n\t\t\tProductId:       myProducts.Products[0].ProductId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Main Config\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyTags, err := configcat.GetTags(ctx, \u0026configcat.GetTagsArgs{\n\t\t\tProductId:       myProducts.Products[0].ProductId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Tag\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmySettings, err := configcat.GetSettings(ctx, \u0026configcat.GetSettingsArgs{\n\t\t\tConfigId:       myConfigs.Configs[0].ConfigId,\n\t\t\tKeyFilterRegex: pulumi.StringRef(\"isAwesomeFeatureEnabled\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = configcat.NewSettingTag(ctx, \"my_setting_tag\", \u0026configcat.SettingTagArgs{\n\t\t\tSettingId: pulumi.String(mySettings.Settings[0].SettingId),\n\t\t\tTagId:     pulumi.String(myTags.Tags[0].TagId),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport com.pulumi.configcat.inputs.GetConfigurationsArgs;\nimport com.pulumi.configcat.inputs.GetTagsArgs;\nimport com.pulumi.configcat.inputs.GetSettingsArgs;\nimport com.pulumi.configcat.SettingTag;\nimport com.pulumi.configcat.SettingTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        final var myConfigs = ConfigcatFunctions.getConfigurations(GetConfigurationsArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .nameFilterRegex(\"Main Config\")\n            .build());\n\n        final var myTags = ConfigcatFunctions.getTags(GetTagsArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .nameFilterRegex(\"Tag\")\n            .build());\n\n        final var mySettings = ConfigcatFunctions.getSettings(GetSettingsArgs.builder()\n            .configId(myConfigs.applyValue(getConfigurationsResult -\u003e getConfigurationsResult.configs()[0].configId()))\n            .keyFilterRegex(\"isAwesomeFeatureEnabled\")\n            .build());\n\n        var mySettingTag = new SettingTag(\"mySettingTag\", SettingTagArgs.builder()\n            .settingId(mySettings.applyValue(getSettingsResult -\u003e getSettingsResult.settings()[0].settingId()))\n            .tagId(myTags.applyValue(getTagsResult -\u003e getTagsResult.tags()[0].tagId()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySettingTag:\n    type: configcat:SettingTag\n    name: my_setting_tag\n    properties:\n      settingId: ${mySettings.settings[0].settingId}\n      tagId: ${myTags.tags[0].tagId}\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\n  myConfigs:\n    fn::invoke:\n      function: configcat:getConfigurations\n      arguments:\n        productId: ${myProducts.products[0].productId}\n        nameFilterRegex: Main Config\n  myTags:\n    fn::invoke:\n      function: configcat:getTags\n      arguments:\n        productId: ${myProducts.products[0].productId}\n        nameFilterRegex: Tag\n  mySettings:\n    fn::invoke:\n      function: configcat:getSettings\n      arguments:\n        configId: ${myConfigs.configs[0].configId}\n        keyFilterRegex: isAwesomeFeatureEnabled\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n* [Get Flag](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/get-setting)\n* [Update Flag](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/update-setting)\n\n## Import\n\nTags can be imported using a combined SettingId:TagId ID.  \n\nGet the SettingId using e.g. the [List Flags API](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/get-settings).  \n\nGet the TagId using e.g. the [List Tags API](https://api.configcat.com/docs/#tag/Tags/operation/get-tags).  \n\n```sh\n$ pulumi import configcat:index/settingTag:SettingTag example 1234:5678\n```\n\nRead more about importing.\n\n",
            "properties": {
                "settingId": {
                    "type": "string",
                    "description": "The ID of the Feature Flag/Setting.\n"
                },
                "tagId": {
                    "type": "string",
                    "description": "The ID of the Tag.\n"
                }
            },
            "required": [
                "settingId",
                "tagId"
            ],
            "inputProperties": {
                "settingId": {
                    "type": "string",
                    "description": "The ID of the Feature Flag/Setting.\n",
                    "willReplaceOnChanges": true
                },
                "tagId": {
                    "type": "string",
                    "description": "The ID of the Tag.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "settingId",
                "tagId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SettingTag resources.\n",
                "properties": {
                    "settingId": {
                        "type": "string",
                        "description": "The ID of the Feature Flag/Setting.\n",
                        "willReplaceOnChanges": true
                    },
                    "tagId": {
                        "type": "string",
                        "description": "The ID of the Tag.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/settingValue:SettingValue": {
            "description": "## # configcat.SettingValue Resource\n\nInitializes and updates **Feature Flag and Setting** values. [Read more about the anatomy of a Feature Flag or Setting.](https://configcat.com/docs/main-concepts) \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nconst myConfigs = myProducts.then(myProducts =\u003e configcat.getConfigurations({\n    productId: myProducts.products?.[0]?.productId,\n    nameFilterRegex: \"Main Config\",\n}));\nconst myEnvironments = myProducts.then(myProducts =\u003e configcat.getEnvironments({\n    productId: myProducts.products?.[0]?.productId,\n    nameFilterRegex: \"Test\",\n}));\nconst mySettings = myConfigs.then(myConfigs =\u003e configcat.getSettings({\n    configId: myConfigs.configs?.[0]?.configId,\n    keyFilterRegex: \"isAwesomeFeatureEnabled\",\n}));\nconst mySettingValue = new configcat.SettingValue(\"my_setting_value\", {\n    environmentId: myEnvironments.then(myEnvironments =\u003e myEnvironments.environments?.[0]?.environmentId),\n    settingId: mySettings.then(mySettings =\u003e mySettings.settings?.[0]?.settingId),\n    mandatoryNotes: \"mandatory notes\",\n    value: \"true\",\n    rolloutRules: [\n        {\n            comparisonAttribute: \"Email\",\n            comparator: \"contains\",\n            comparisonValue: \"@mycompany.com\",\n            value: \"true\",\n        },\n        {\n            comparisonAttribute: \"custom\",\n            comparator: \"isOneOf\",\n            comparisonValue: \"red\",\n            value: \"false\",\n        },\n    ],\n    percentageItems: [\n        {\n            percentage: \"20\",\n            value: \"true\",\n        },\n        {\n            percentage: \"80\",\n            value: \"false\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\nimport pulumiverse_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\nmy_configs = configcat.get_configurations(product_id=my_products.products[0].product_id,\n    name_filter_regex=\"Main Config\")\nmy_environments = configcat.get_environments(product_id=my_products.products[0].product_id,\n    name_filter_regex=\"Test\")\nmy_settings = configcat.get_settings(config_id=my_configs.configs[0].config_id,\n    key_filter_regex=\"isAwesomeFeatureEnabled\")\nmy_setting_value = configcat.SettingValue(\"my_setting_value\",\n    environment_id=my_environments.environments[0].environment_id,\n    setting_id=my_settings.settings[0].setting_id,\n    mandatory_notes=\"mandatory notes\",\n    value=\"true\",\n    rollout_rules=[\n        {\n            \"comparison_attribute\": \"Email\",\n            \"comparator\": \"contains\",\n            \"comparison_value\": \"@mycompany.com\",\n            \"value\": \"true\",\n        },\n        {\n            \"comparison_attribute\": \"custom\",\n            \"comparator\": \"isOneOf\",\n            \"comparison_value\": \"red\",\n            \"value\": \"false\",\n        },\n    ],\n    percentage_items=[\n        {\n            \"percentage\": \"20\",\n            \"value\": \"true\",\n        },\n        {\n            \"percentage\": \"80\",\n            \"value\": \"false\",\n        },\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    var myConfigs = Configcat.GetConfigurations.Invoke(new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        NameFilterRegex = \"Main Config\",\n    });\n\n    var myEnvironments = Configcat.GetEnvironments.Invoke(new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        NameFilterRegex = \"Test\",\n    });\n\n    var mySettings = Configcat.GetSettings.Invoke(new()\n    {\n        ConfigId = myConfigs.Apply(getConfigurationsResult =\u003e getConfigurationsResult.Configs[0]?.ConfigId),\n        KeyFilterRegex = \"isAwesomeFeatureEnabled\",\n    });\n\n    var mySettingValue = new Configcat.SettingValue(\"my_setting_value\", new()\n    {\n        EnvironmentId = myEnvironments.Apply(getEnvironmentsResult =\u003e getEnvironmentsResult.Environments[0]?.EnvironmentId),\n        SettingId = mySettings.Apply(getSettingsResult =\u003e getSettingsResult.Settings[0]?.SettingId),\n        MandatoryNotes = \"mandatory notes\",\n        Value = \"true\",\n        RolloutRules = new[]\n        {\n            new Configcat.Inputs.SettingValueRolloutRuleArgs\n            {\n                ComparisonAttribute = \"Email\",\n                Comparator = \"contains\",\n                ComparisonValue = \"@mycompany.com\",\n                Value = \"true\",\n            },\n            new Configcat.Inputs.SettingValueRolloutRuleArgs\n            {\n                ComparisonAttribute = \"custom\",\n                Comparator = \"isOneOf\",\n                ComparisonValue = \"red\",\n                Value = \"false\",\n            },\n        },\n        PercentageItems = new[]\n        {\n            new Configcat.Inputs.SettingValuePercentageItemArgs\n            {\n                Percentage = \"20\",\n                Value = \"true\",\n            },\n            new Configcat.Inputs.SettingValuePercentageItemArgs\n            {\n                Percentage = \"80\",\n                Value = \"false\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyConfigs, err := configcat.GetConfigurations(ctx, \u0026configcat.GetConfigurationsArgs{\n\t\t\tProductId:       myProducts.Products[0].ProductId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Main Config\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyEnvironments, err := configcat.GetEnvironments(ctx, \u0026configcat.GetEnvironmentsArgs{\n\t\t\tProductId:       myProducts.Products[0].ProductId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmySettings, err := configcat.GetSettings(ctx, \u0026configcat.GetSettingsArgs{\n\t\t\tConfigId:       myConfigs.Configs[0].ConfigId,\n\t\t\tKeyFilterRegex: pulumi.StringRef(\"isAwesomeFeatureEnabled\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = configcat.NewSettingValue(ctx, \"my_setting_value\", \u0026configcat.SettingValueArgs{\n\t\t\tEnvironmentId:  pulumi.String(myEnvironments.Environments[0].EnvironmentId),\n\t\t\tSettingId:      pulumi.String(mySettings.Settings[0].SettingId),\n\t\t\tMandatoryNotes: pulumi.String(\"mandatory notes\"),\n\t\t\tValue:          pulumi.String(\"true\"),\n\t\t\tRolloutRules: configcat.SettingValueRolloutRuleArray{\n\t\t\t\t\u0026configcat.SettingValueRolloutRuleArgs{\n\t\t\t\t\tComparisonAttribute: pulumi.String(\"Email\"),\n\t\t\t\t\tComparator:          pulumi.String(\"contains\"),\n\t\t\t\t\tComparisonValue:     pulumi.String(\"@mycompany.com\"),\n\t\t\t\t\tValue:               pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t\t\u0026configcat.SettingValueRolloutRuleArgs{\n\t\t\t\t\tComparisonAttribute: pulumi.String(\"custom\"),\n\t\t\t\t\tComparator:          pulumi.String(\"isOneOf\"),\n\t\t\t\t\tComparisonValue:     pulumi.String(\"red\"),\n\t\t\t\t\tValue:               pulumi.String(\"false\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPercentageItems: configcat.SettingValuePercentageItemArray{\n\t\t\t\t\u0026configcat.SettingValuePercentageItemArgs{\n\t\t\t\t\tPercentage: pulumi.String(\"20\"),\n\t\t\t\t\tValue:      pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t\t\u0026configcat.SettingValuePercentageItemArgs{\n\t\t\t\t\tPercentage: pulumi.String(\"80\"),\n\t\t\t\t\tValue:      pulumi.String(\"false\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport com.pulumi.configcat.inputs.GetConfigurationsArgs;\nimport com.pulumi.configcat.inputs.GetEnvironmentsArgs;\nimport com.pulumi.configcat.inputs.GetSettingsArgs;\nimport com.pulumi.configcat.SettingValue;\nimport com.pulumi.configcat.SettingValueArgs;\nimport com.pulumi.configcat.inputs.SettingValueRolloutRuleArgs;\nimport com.pulumi.configcat.inputs.SettingValuePercentageItemArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        final var myConfigs = ConfigcatFunctions.getConfigurations(GetConfigurationsArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .nameFilterRegex(\"Main Config\")\n            .build());\n\n        final var myEnvironments = ConfigcatFunctions.getEnvironments(GetEnvironmentsArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .nameFilterRegex(\"Test\")\n            .build());\n\n        final var mySettings = ConfigcatFunctions.getSettings(GetSettingsArgs.builder()\n            .configId(myConfigs.applyValue(getConfigurationsResult -\u003e getConfigurationsResult.configs()[0].configId()))\n            .keyFilterRegex(\"isAwesomeFeatureEnabled\")\n            .build());\n\n        var mySettingValue = new SettingValue(\"mySettingValue\", SettingValueArgs.builder()\n            .environmentId(myEnvironments.applyValue(getEnvironmentsResult -\u003e getEnvironmentsResult.environments()[0].environmentId()))\n            .settingId(mySettings.applyValue(getSettingsResult -\u003e getSettingsResult.settings()[0].settingId()))\n            .mandatoryNotes(\"mandatory notes\")\n            .value(\"true\")\n            .rolloutRules(            \n                SettingValueRolloutRuleArgs.builder()\n                    .comparisonAttribute(\"Email\")\n                    .comparator(\"contains\")\n                    .comparisonValue(\"@mycompany.com\")\n                    .value(\"true\")\n                    .build(),\n                SettingValueRolloutRuleArgs.builder()\n                    .comparisonAttribute(\"custom\")\n                    .comparator(\"isOneOf\")\n                    .comparisonValue(\"red\")\n                    .value(\"false\")\n                    .build())\n            .percentageItems(            \n                SettingValuePercentageItemArgs.builder()\n                    .percentage(20)\n                    .value(\"true\")\n                    .build(),\n                SettingValuePercentageItemArgs.builder()\n                    .percentage(80)\n                    .value(\"false\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  mySettingValue:\n    type: configcat:SettingValue\n    name: my_setting_value\n    properties:\n      environmentId: ${myEnvironments.environments[0].environmentId}\n      settingId: ${mySettings.settings[0].settingId}\n      mandatoryNotes: mandatory notes\n      value: 'true'\n      rolloutRules:\n        - comparisonAttribute: Email\n          comparator: contains\n          comparisonValue: '@mycompany.com'\n          value: 'true'\n        - comparisonAttribute: custom\n          comparator: isOneOf\n          comparisonValue: red\n          value: 'false'\n      percentageItems:\n        - percentage: 20\n          value: 'true'\n        - percentage: 80\n          value: 'false'\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\n  myConfigs:\n    fn::invoke:\n      function: configcat:getConfigurations\n      arguments:\n        productId: ${myProducts.products[0].productId}\n        nameFilterRegex: Main Config\n  myEnvironments:\n    fn::invoke:\n      function: configcat:getEnvironments\n      arguments:\n        productId: ${myProducts.products[0].productId}\n        nameFilterRegex: Test\n  mySettings:\n    fn::invoke:\n      function: configcat:getSettings\n      arguments:\n        configId: ${myConfigs.configs[0].configId}\n        keyFilterRegex: isAwesomeFeatureEnabled\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n* [Get Value](https://api.configcat.com/docs/#tag/Feature-Flag-and-Setting-values/operation/get-setting-value)\n* [Replace Value](https://api.configcat.com/docs/#tag/Feature-Flag-and-Setting-values/operation/replace-setting-value)\n\n## Import\n\nFeature Flag/Setting values can be imported using a combined EnvironmentID:SettingId ID.  \n\nGet the SettingId using e.g. the [List Flags API](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/get-settings).  \n\nGet the EnvironmentId using e.g. the [List Environments API](https://api.configcat.com/docs/#tag/Environments/operation/get-environments).\n\n```sh\n$ pulumi import configcat:index/settingValue:SettingValue example 08d86d63-2726-47cd-8bfc-59608ecb91e2:1234\n```\n\nRead more about importing.\n\n",
            "properties": {
                "environmentId": {
                    "type": "string",
                    "description": "The ID of the Environment.\n"
                },
                "initOnly": {
                    "type": "boolean",
                    "description": "Default: true. Read more below.  \n\nThe Feature Flag/Setting's value\n"
                },
                "mandatoryNotes": {
                    "type": "string",
                    "description": "Default: \"\". If the Product's \"Mandatory notes\" preference is turned on for the Environment the Mandatory note must be passed.\n"
                },
                "percentageItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/SettingValuePercentageItem:SettingValuePercentageItem"
                    },
                    "description": "A list to define [Percentage items](https://configcat.com/docs/advanced/targeting/#targeting-a-percentage-of-users). Read more below.\n"
                },
                "rolloutRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/SettingValueRolloutRule:SettingValueRolloutRule"
                    },
                    "description": "A list to define [Rollout rules](https://configcat.com/docs/advanced/targeting/#anatomy-of-a-targeting-rule). Read more below.\n"
                },
                "settingId": {
                    "type": "string",
                    "description": "The ID of the Feature Flag/Setting.\n"
                },
                "settingType": {
                    "type": "string",
                    "description": "The Setting's type.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The Setting's value. Type: `string`. It must be compatible with the `setting_type`.\n"
                }
            },
            "required": [
                "environmentId",
                "settingId",
                "settingType",
                "value"
            ],
            "inputProperties": {
                "environmentId": {
                    "type": "string",
                    "description": "The ID of the Environment.\n",
                    "willReplaceOnChanges": true
                },
                "initOnly": {
                    "type": "boolean",
                    "description": "Default: true. Read more below.  \n\nThe Feature Flag/Setting's value\n"
                },
                "mandatoryNotes": {
                    "type": "string",
                    "description": "Default: \"\". If the Product's \"Mandatory notes\" preference is turned on for the Environment the Mandatory note must be passed.\n"
                },
                "percentageItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/SettingValuePercentageItem:SettingValuePercentageItem"
                    },
                    "description": "A list to define [Percentage items](https://configcat.com/docs/advanced/targeting/#targeting-a-percentage-of-users). Read more below.\n"
                },
                "rolloutRules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/configcat:index/SettingValueRolloutRule:SettingValueRolloutRule"
                    },
                    "description": "A list to define [Rollout rules](https://configcat.com/docs/advanced/targeting/#anatomy-of-a-targeting-rule). Read more below.\n"
                },
                "settingId": {
                    "type": "string",
                    "description": "The ID of the Feature Flag/Setting.\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The Setting's value. Type: `string`. It must be compatible with the `setting_type`.\n"
                }
            },
            "requiredInputs": [
                "environmentId",
                "settingId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SettingValue resources.\n",
                "properties": {
                    "environmentId": {
                        "type": "string",
                        "description": "The ID of the Environment.\n",
                        "willReplaceOnChanges": true
                    },
                    "initOnly": {
                        "type": "boolean",
                        "description": "Default: true. Read more below.  \n\nThe Feature Flag/Setting's value\n"
                    },
                    "mandatoryNotes": {
                        "type": "string",
                        "description": "Default: \"\". If the Product's \"Mandatory notes\" preference is turned on for the Environment the Mandatory note must be passed.\n"
                    },
                    "percentageItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/configcat:index/SettingValuePercentageItem:SettingValuePercentageItem"
                        },
                        "description": "A list to define [Percentage items](https://configcat.com/docs/advanced/targeting/#targeting-a-percentage-of-users). Read more below.\n"
                    },
                    "rolloutRules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/configcat:index/SettingValueRolloutRule:SettingValueRolloutRule"
                        },
                        "description": "A list to define [Rollout rules](https://configcat.com/docs/advanced/targeting/#anatomy-of-a-targeting-rule). Read more below.\n"
                    },
                    "settingId": {
                        "type": "string",
                        "description": "The ID of the Feature Flag/Setting.\n",
                        "willReplaceOnChanges": true
                    },
                    "settingType": {
                        "type": "string",
                        "description": "The Setting's type.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The Setting's value. Type: `string`. It must be compatible with the `setting_type`.\n"
                    }
                },
                "type": "object"
            }
        },
        "configcat:index/tag:Tag": {
            "description": "## # configcat.Tag Resource\n\nCreates and manages a **Tag**.  \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\nimport * as configcat from \"@pulumiverse/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nconst myTag = new configcat.Tag(\"my_tag\", {\n    productId: myProducts.then(myProducts =\u003e myProducts.products?.[0]?.productId),\n    name: \"Created by Terraform\",\n});\nexport const tagId = myTag.id;\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\nimport pulumiverse_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\nmy_tag = configcat.Tag(\"my_tag\",\n    product_id=my_products.products[0].product_id,\n    name=\"Created by Terraform\")\npulumi.export(\"tagId\", my_tag.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\nusing Configcat = Pulumiverse.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    var myTag = new Configcat.Tag(\"my_tag\", new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        Name = \"Created by Terraform\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"tagId\"] = myTag.Id,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyTag, err := configcat.NewTag(ctx, \"my_tag\", \u0026configcat.TagArgs{\n\t\t\tProductId: pulumi.String(myProducts.Products[0].ProductId),\n\t\t\tName:      pulumi.String(\"Created by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"tagId\", myTag.ID())\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport com.pulumi.configcat.Tag;\nimport com.pulumi.configcat.TagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        var myTag = new Tag(\"myTag\", TagArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .name(\"Created by Terraform\")\n            .build());\n\n        ctx.export(\"tagId\", myTag.id());\n    }\n}\n```\n```yaml\nresources:\n  myTag:\n    type: configcat:Tag\n    name: my_tag\n    properties:\n      productId: ${myProducts.products[0].productId}\n      name: Created by Terraform\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\noutputs:\n  tagId: ${myTag.id}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n* [Get Tag](https://api.configcat.com/docs/#tag/Tags/operation/get-tag)\n* [Create Tag](https://api.configcat.com/docs/#tag/Tags/operation/create-tag)\n* [Update Tag](https://api.configcat.com/docs/#tag/Tags/operation/update-tag)\n* [Delete Tag](https://api.configcat.com/docs/#tag/Tags/operation/delete-tag)\n\n## Import\n\nTags can be imported using the TagId. Get the TagId using e.g. the [List Tags API](https://api.configcat.com/docs/#tag/Tags/operation/get-tags).\n\n```sh\n$ pulumi import configcat:index/tag:Tag example 1234\n```\nRead more about importing.\n\n",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "Default: `panther`. The color of the Tag. Valid values: `panther`, `whale`, `salmon`, `lizard`, `canary`, `koala`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Tag.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n"
                }
            },
            "required": [
                "name",
                "productId"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "Default: `panther`. The color of the Tag. Valid values: `panther`, `whale`, `salmon`, `lizard`, `canary`, `koala`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Tag.\n"
                },
                "productId": {
                    "type": "string",
                    "description": "The ID of the Product.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "productId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tag resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "Default: `panther`. The color of the Tag. Valid values: `panther`, `whale`, `salmon`, `lizard`, `canary`, `koala`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Tag.\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "configcat:index/getConfigurations:getConfigurations": {
            "description": "## # configcat.getConfigurations Resource\n\nUse this data source to access information about existing **Configs**. [What is a Config in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nconst myConfigs = myProducts.then(myProducts =\u003e configcat.getConfigurations({\n    productId: myProducts.products?.[0]?.productId,\n    nameFilterRegex: \"Main Config\",\n}));\nexport const configId = myConfigs.then(myConfigs =\u003e myConfigs.configs?.[0]?.configId);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\nmy_configs = configcat.get_configurations(product_id=my_products.products[0].product_id,\n    name_filter_regex=\"Main Config\")\npulumi.export(\"configId\", my_configs.configs[0].config_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    var myConfigs = Configcat.GetConfigurations.Invoke(new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        NameFilterRegex = \"Main Config\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"configId\"] = myConfigs.Apply(getConfigurationsResult =\u003e getConfigurationsResult.Configs[0]?.ConfigId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyConfigs, err := configcat.GetConfigurations(ctx, \u0026configcat.GetConfigurationsArgs{\n\t\t\tProductId:       myProducts.Products[0].ProductId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Main Config\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"configId\", myConfigs.Configs[0].ConfigId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport com.pulumi.configcat.inputs.GetConfigurationsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        final var myConfigs = ConfigcatFunctions.getConfigurations(GetConfigurationsArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .nameFilterRegex(\"Main Config\")\n            .build());\n\n        ctx.export(\"configId\", myConfigs.applyValue(getConfigurationsResult -\u003e getConfigurationsResult.configs()[0].configId()));\n    }\n}\n```\n```yaml\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\n  myConfigs:\n    fn::invoke:\n      function: configcat:getConfigurations\n      arguments:\n        productId: ${myProducts.products[0].productId}\n        nameFilterRegex: Main Config\noutputs:\n  configId: ${myConfigs.configs[0].configId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n[List Configs](https://api.configcat.com/docs/#tag/Configs/operation/get-configs)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getConfigurations.\n",
                "properties": {
                    "nameFilterRegex": {
                        "type": "string",
                        "description": "Filter the Configs by name.\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n"
                    }
                },
                "type": "object",
                "required": [
                    "productId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConfigurations.\n",
                "properties": {
                    "configs": {
                        "description": "A config list block defined as below.\n",
                        "items": {
                            "$ref": "#/types/configcat:index/getConfigurationsConfig:getConfigurationsConfig"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "productId": {
                        "type": "string"
                    }
                },
                "required": [
                    "configs",
                    "productId",
                    "id"
                ],
                "type": "object"
            }
        },
        "configcat:index/getEnvironments:getEnvironments": {
            "description": "## # configcat.getEnvironments Resource\n\nUse this data source to access information about existing **Environments**. [What is an Environment in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nconst myEnvironments = myProducts.then(myProducts =\u003e configcat.getEnvironments({\n    productId: myProducts.products?.[0]?.productId,\n    nameFilterRegex: \"Test\",\n}));\nexport const environmentId = myEnvironments.then(myEnvironments =\u003e myEnvironments.environments?.[0]?.environmentId);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\nmy_environments = configcat.get_environments(product_id=my_products.products[0].product_id,\n    name_filter_regex=\"Test\")\npulumi.export(\"environmentId\", my_environments.environments[0].environment_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    var myEnvironments = Configcat.GetEnvironments.Invoke(new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        NameFilterRegex = \"Test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"environmentId\"] = myEnvironments.Apply(getEnvironmentsResult =\u003e getEnvironmentsResult.Environments[0]?.EnvironmentId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyEnvironments, err := configcat.GetEnvironments(ctx, \u0026configcat.GetEnvironmentsArgs{\n\t\t\tProductId:       myProducts.Products[0].ProductId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"environmentId\", myEnvironments.Environments[0].EnvironmentId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport com.pulumi.configcat.inputs.GetEnvironmentsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        final var myEnvironments = ConfigcatFunctions.getEnvironments(GetEnvironmentsArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .nameFilterRegex(\"Test\")\n            .build());\n\n        ctx.export(\"environmentId\", myEnvironments.applyValue(getEnvironmentsResult -\u003e getEnvironmentsResult.environments()[0].environmentId()));\n    }\n}\n```\n```yaml\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\n  myEnvironments:\n    fn::invoke:\n      function: configcat:getEnvironments\n      arguments:\n        productId: ${myProducts.products[0].productId}\n        nameFilterRegex: Test\noutputs:\n  environmentId: ${myEnvironments.environments[0].environmentId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n- [List Environments](https://api.configcat.com/docs/#tag/Environments/operation/get-environments)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironments.\n",
                "properties": {
                    "nameFilterRegex": {
                        "type": "string",
                        "description": "Filter the Environments by name.\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n"
                    }
                },
                "type": "object",
                "required": [
                    "productId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironments.\n",
                "properties": {
                    "environments": {
                        "description": "An environment list block defined as below.\n",
                        "items": {
                            "$ref": "#/types/configcat:index/getEnvironmentsEnvironment:getEnvironmentsEnvironment"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "productId": {
                        "type": "string"
                    }
                },
                "required": [
                    "environments",
                    "productId",
                    "id"
                ],
                "type": "object"
            }
        },
        "configcat:index/getOrganizations:getOrganizations": {
            "description": "## # configcat.getOrganizations Resource\n\nUse this data source to access information about existing **Organizations**. [What is an Organization in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst myOrganizations = configcat.getOrganizations({\n    nameFilterRegex: \"ConfigCat\",\n});\nexport const organizationId = myOrganizations.then(myOrganizations =\u003e myOrganizations.organizations?.[0]?.organizationId);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nmy_organizations = configcat.get_organizations(name_filter_regex=\"ConfigCat\")\npulumi.export(\"organizationId\", my_organizations.organizations[0].organization_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myOrganizations = Configcat.GetOrganizations.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"organizationId\"] = myOrganizations.Apply(getOrganizationsResult =\u003e getOrganizationsResult.Organizations[0]?.OrganizationId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyOrganizations, err := configcat.GetOrganizations(ctx, \u0026configcat.GetOrganizationsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"organizationId\", myOrganizations.Organizations[0].OrganizationId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetOrganizationsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myOrganizations = ConfigcatFunctions.getOrganizations(GetOrganizationsArgs.builder()\n            .nameFilterRegex(\"ConfigCat\")\n            .build());\n\n        ctx.export(\"organizationId\", myOrganizations.applyValue(getOrganizationsResult -\u003e getOrganizationsResult.organizations()[0].organizationId()));\n    }\n}\n```\n```yaml\nvariables:\n  myOrganizations:\n    fn::invoke:\n      function: configcat:getOrganizations\n      arguments:\n        nameFilterRegex: ConfigCat\noutputs:\n  organizationId: ${myOrganizations.organizations[0].organizationId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n- [List Organizations](https://api.configcat.com/docs/#tag/Organizations/operation/get-organizations)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getOrganizations.\n",
                "properties": {
                    "nameFilterRegex": {
                        "type": "string",
                        "description": "Filter the Organizations by name.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrganizations.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "organizations": {
                        "description": "An organization list block defined as below.\n",
                        "items": {
                            "$ref": "#/types/configcat:index/getOrganizationsOrganization:getOrganizationsOrganization"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "organizations",
                    "id"
                ],
                "type": "object"
            }
        },
        "configcat:index/getPermissionGroups:getPermissionGroups": {
            "description": "## # configcat.getPermissionGroups Resource\n\nUse this data source to access information about existing **Permission Groups**. [What is a Permission Group in ConfigCat?](https://configcat.com/docs/advanced/team-management/team-management-basics/#permissions--permission-groups-product-level)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nconst myPermissionGroups = myProducts.then(myProducts =\u003e configcat.getPermissionGroups({\n    productId: myProducts.products?.[0]?.productId,\n    nameFilterRegex: \"Administrators\",\n}));\nexport const permissionGroupId = myPermissionGroups.then(myPermissionGroups =\u003e myPermissionGroups.permissionGroups?.[0]?.permissionGroupId);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\nmy_permission_groups = configcat.get_permission_groups(product_id=my_products.products[0].product_id,\n    name_filter_regex=\"Administrators\")\npulumi.export(\"permissionGroupId\", my_permission_groups.permission_groups[0].permission_group_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    var myPermissionGroups = Configcat.GetPermissionGroups.Invoke(new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        NameFilterRegex = \"Administrators\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"permissionGroupId\"] = myPermissionGroups.Apply(getPermissionGroupsResult =\u003e getPermissionGroupsResult.PermissionGroups[0]?.PermissionGroupId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyPermissionGroups, err := configcat.GetPermissionGroups(ctx, \u0026configcat.GetPermissionGroupsArgs{\n\t\t\tProductId:       myProducts.Products[0].ProductId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Administrators\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"permissionGroupId\", myPermissionGroups.PermissionGroups[0].PermissionGroupId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport com.pulumi.configcat.inputs.GetPermissionGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        final var myPermissionGroups = ConfigcatFunctions.getPermissionGroups(GetPermissionGroupsArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .nameFilterRegex(\"Administrators\")\n            .build());\n\n        ctx.export(\"permissionGroupId\", myPermissionGroups.applyValue(getPermissionGroupsResult -\u003e getPermissionGroupsResult.permissionGroups()[0].permissionGroupId()));\n    }\n}\n```\n```yaml\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\n  myPermissionGroups:\n    fn::invoke:\n      function: configcat:getPermissionGroups\n      arguments:\n        productId: ${myProducts.products[0].productId}\n        nameFilterRegex: Administrators\noutputs:\n  permissionGroupId: ${myPermissionGroups.permissionGroups[0].permissionGroupId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n- [List Permission Groups](https://api.configcat.com/docs/index.html#tag/Permission-Groups/operation/get-permission-groups)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPermissionGroups.\n",
                "properties": {
                    "nameFilterRegex": {
                        "type": "string",
                        "description": "Filter the Permission Groups by name.\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n"
                    }
                },
                "type": "object",
                "required": [
                    "productId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPermissionGroups.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "permissionGroups": {
                        "description": "A permission group list block defined as below.\n",
                        "items": {
                            "$ref": "#/types/configcat:index/getPermissionGroupsPermissionGroup:getPermissionGroupsPermissionGroup"
                        },
                        "type": "array"
                    },
                    "productId": {
                        "type": "string"
                    }
                },
                "required": [
                    "permissionGroups",
                    "productId",
                    "id"
                ],
                "type": "object"
            }
        },
        "configcat:index/getProducts:getProducts": {
            "description": "## # configcat.getProducts Resource\n\nUse this data source to access information about existing **Products**. [What is a Product in ConfigCat?](https://configcat.com/docs/main-concepts)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nexport const productId = myProducts.then(myProducts =\u003e myProducts.products?.[0]?.productId);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\npulumi.export(\"productId\", my_products.products[0].product_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"productId\"] = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"productId\", myProducts.Products[0].ProductId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        ctx.export(\"productId\", myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()));\n    }\n}\n```\n```yaml\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\noutputs:\n  productId: ${myProducts.products[0].productId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n- [List Products](https://api.configcat.com/docs/#tag/Products/operation/get-products)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProducts.\n",
                "properties": {
                    "nameFilterRegex": {
                        "type": "string",
                        "description": "Filter the Products by name.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProducts.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "products": {
                        "description": "A product list block defined as below.\n",
                        "items": {
                            "$ref": "#/types/configcat:index/getProductsProduct:getProductsProduct"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "products",
                    "id"
                ],
                "type": "object"
            }
        },
        "configcat:index/getSdkKeys:getSdkKeys": {
            "description": "## # configcat.getSdkKeys Resource\n\nUse this data source to access information about **SDK Keys**.\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nconst myConfigs = myProducts.then(myProducts =\u003e configcat.getConfigurations({\n    productId: myProducts.products?.[0]?.productId,\n    nameFilterRegex: \"Main Config\",\n}));\nconst myEnvironments = myProducts.then(myProducts =\u003e configcat.getEnvironments({\n    productId: myProducts.products?.[0]?.productId,\n    nameFilterRegex: \"Test\",\n}));\nconst mySdkkey = Promise.all([myConfigs, myEnvironments]).then(([myConfigs, myEnvironments]) =\u003e configcat.getSdkKeys({\n    configId: myConfigs.configs?.[0]?.configId,\n    environmentId: myEnvironments.environments?.[0]?.environmentId,\n}));\nexport const primarySdkkey = mySdkkey.then(mySdkkey =\u003e mySdkkey.primary);\nexport const secondarySdkkey = mySdkkey.then(mySdkkey =\u003e mySdkkey.secondary);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\nmy_configs = configcat.get_configurations(product_id=my_products.products[0].product_id,\n    name_filter_regex=\"Main Config\")\nmy_environments = configcat.get_environments(product_id=my_products.products[0].product_id,\n    name_filter_regex=\"Test\")\nmy_sdkkey = configcat.get_sdk_keys(config_id=my_configs.configs[0].config_id,\n    environment_id=my_environments.environments[0].environment_id)\npulumi.export(\"primarySdkkey\", my_sdkkey.primary)\npulumi.export(\"secondarySdkkey\", my_sdkkey.secondary)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    var myConfigs = Configcat.GetConfigurations.Invoke(new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        NameFilterRegex = \"Main Config\",\n    });\n\n    var myEnvironments = Configcat.GetEnvironments.Invoke(new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        NameFilterRegex = \"Test\",\n    });\n\n    var mySdkkey = Configcat.GetSdkKeys.Invoke(new()\n    {\n        ConfigId = myConfigs.Apply(getConfigurationsResult =\u003e getConfigurationsResult.Configs[0]?.ConfigId),\n        EnvironmentId = myEnvironments.Apply(getEnvironmentsResult =\u003e getEnvironmentsResult.Environments[0]?.EnvironmentId),\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"primarySdkkey\"] = mySdkkey.Apply(getSdkKeysResult =\u003e getSdkKeysResult.Primary),\n        [\"secondarySdkkey\"] = mySdkkey.Apply(getSdkKeysResult =\u003e getSdkKeysResult.Secondary),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyConfigs, err := configcat.GetConfigurations(ctx, \u0026configcat.GetConfigurationsArgs{\n\t\t\tProductId:       myProducts.Products[0].ProductId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Main Config\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyEnvironments, err := configcat.GetEnvironments(ctx, \u0026configcat.GetEnvironmentsArgs{\n\t\t\tProductId:       myProducts.Products[0].ProductId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmySdkkey, err := configcat.GetSdkKeys(ctx, \u0026configcat.GetSdkKeysArgs{\n\t\t\tConfigId:      myConfigs.Configs[0].ConfigId,\n\t\t\tEnvironmentId: myEnvironments.Environments[0].EnvironmentId,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"primarySdkkey\", mySdkkey.Primary)\n\t\tctx.Export(\"secondarySdkkey\", mySdkkey.Secondary)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport com.pulumi.configcat.inputs.GetConfigurationsArgs;\nimport com.pulumi.configcat.inputs.GetEnvironmentsArgs;\nimport com.pulumi.configcat.inputs.GetSdkKeysArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        final var myConfigs = ConfigcatFunctions.getConfigurations(GetConfigurationsArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .nameFilterRegex(\"Main Config\")\n            .build());\n\n        final var myEnvironments = ConfigcatFunctions.getEnvironments(GetEnvironmentsArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .nameFilterRegex(\"Test\")\n            .build());\n\n        final var mySdkkey = ConfigcatFunctions.getSdkKeys(GetSdkKeysArgs.builder()\n            .configId(myConfigs.applyValue(getConfigurationsResult -\u003e getConfigurationsResult.configs()[0].configId()))\n            .environmentId(myEnvironments.applyValue(getEnvironmentsResult -\u003e getEnvironmentsResult.environments()[0].environmentId()))\n            .build());\n\n        ctx.export(\"primarySdkkey\", mySdkkey.applyValue(getSdkKeysResult -\u003e getSdkKeysResult.primary()));\n        ctx.export(\"secondarySdkkey\", mySdkkey.applyValue(getSdkKeysResult -\u003e getSdkKeysResult.secondary()));\n    }\n}\n```\n```yaml\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\n  myConfigs:\n    fn::invoke:\n      function: configcat:getConfigurations\n      arguments:\n        productId: ${myProducts.products[0].productId}\n        nameFilterRegex: Main Config\n  myEnvironments:\n    fn::invoke:\n      function: configcat:getEnvironments\n      arguments:\n        productId: ${myProducts.products[0].productId}\n        nameFilterRegex: Test\n  mySdkkey:\n    fn::invoke:\n      function: configcat:getSdkKeys\n      arguments:\n        configId: ${myConfigs.configs[0].configId}\n        environmentId: ${myEnvironments.environments[0].environmentId}\noutputs:\n  primarySdkkey: ${mySdkkey.primary}\n  secondarySdkkey: ${mySdkkey.secondary}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n- [Get SDK Key](https://api.configcat.com/docs/#tag/SDK-Keys/operation/get-sdk-keys)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSdkKeys.\n",
                "properties": {
                    "configId": {
                        "type": "string",
                        "description": "The ID of the Config.\n"
                    },
                    "environmentId": {
                        "type": "string",
                        "description": "The ID of the Environment.\n"
                    }
                },
                "type": "object",
                "required": [
                    "configId",
                    "environmentId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSdkKeys.\n",
                "properties": {
                    "configId": {
                        "type": "string"
                    },
                    "environmentId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "primary": {
                        "description": "The primary SDK Key associated with your **Config** and **Environment**.\n",
                        "type": "string"
                    },
                    "secondary": {
                        "description": "The secondary SDK Key associated with your **Config** and **Environment**.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "configId",
                    "environmentId",
                    "primary",
                    "secondary",
                    "id"
                ],
                "type": "object"
            }
        },
        "configcat:index/getSegments:getSegments": {
            "description": "## # configcat.getSegments Resource\n\nUse this data source to access information about existing **Segments**. [What is a Segment in ConfigCat?](https://configcat.com/docs/advanced/segments)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nconst mySegments = myProducts.then(myProducts =\u003e configcat.getSegments({\n    productId: myProducts.products?.[0]?.productId,\n    nameFilterRegex: \"Test\",\n}));\nexport const segmentId = mySegments.then(mySegments =\u003e mySegments.segments?.[0]?.segmentId);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\nmy_segments = configcat.get_segments(product_id=my_products.products[0].product_id,\n    name_filter_regex=\"Test\")\npulumi.export(\"segmentId\", my_segments.segments[0].segment_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    var mySegments = Configcat.GetSegments.Invoke(new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        NameFilterRegex = \"Test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"segmentId\"] = mySegments.Apply(getSegmentsResult =\u003e getSegmentsResult.Segments[0]?.SegmentId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmySegments, err := configcat.GetSegments(ctx, \u0026configcat.GetSegmentsArgs{\n\t\t\tProductId:       myProducts.Products[0].ProductId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"segmentId\", mySegments.Segments[0].SegmentId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport com.pulumi.configcat.inputs.GetSegmentsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        final var mySegments = ConfigcatFunctions.getSegments(GetSegmentsArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .nameFilterRegex(\"Test\")\n            .build());\n\n        ctx.export(\"segmentId\", mySegments.applyValue(getSegmentsResult -\u003e getSegmentsResult.segments()[0].segmentId()));\n    }\n}\n```\n```yaml\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\n  mySegments:\n    fn::invoke:\n      function: configcat:getSegments\n      arguments:\n        productId: ${myProducts.products[0].productId}\n        nameFilterRegex: Test\noutputs:\n  segmentId: ${mySegments.segments[0].segmentId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n- [List Segments](https://api.configcat.com/docs/#tag/Segments/operation/get-segments)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSegments.\n",
                "properties": {
                    "nameFilterRegex": {
                        "type": "string",
                        "description": "Filter the Segments by name.\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n"
                    }
                },
                "type": "object",
                "required": [
                    "productId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSegments.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "productId": {
                        "type": "string"
                    },
                    "segments": {
                        "description": "A segment list block defined as below.\n",
                        "items": {
                            "$ref": "#/types/configcat:index/getSegmentsSegment:getSegmentsSegment"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "productId",
                    "segments",
                    "id"
                ],
                "type": "object"
            }
        },
        "configcat:index/getSettings:getSettings": {
            "description": "## # configcat.getSettings Resource\n\nUse this data source to access information about existing **Feature Flags or Settings**. [Read more about the anatomy of a Feature Flag or Setting.](https://configcat.com/docs/main-concepts) \n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nconst myConfigs = myProducts.then(myProducts =\u003e configcat.getConfigurations({\n    productId: myProducts.products?.[0]?.productId,\n    nameFilterRegex: \"Main Config\",\n}));\nconst settings = myConfigs.then(myConfigs =\u003e configcat.getSettings({\n    configId: myConfigs.configs?.[0]?.configId,\n    keyFilterRegex: \"isAwesomeFeatureEnabled\",\n}));\nexport const settingId = settings.then(settings =\u003e settings.settings?.[0]?.settingId);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\nmy_configs = configcat.get_configurations(product_id=my_products.products[0].product_id,\n    name_filter_regex=\"Main Config\")\nsettings = configcat.get_settings(config_id=my_configs.configs[0].config_id,\n    key_filter_regex=\"isAwesomeFeatureEnabled\")\npulumi.export(\"settingId\", settings.settings[0].setting_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    var myConfigs = Configcat.GetConfigurations.Invoke(new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        NameFilterRegex = \"Main Config\",\n    });\n\n    var settings = Configcat.GetSettings.Invoke(new()\n    {\n        ConfigId = myConfigs.Apply(getConfigurationsResult =\u003e getConfigurationsResult.Configs[0]?.ConfigId),\n        KeyFilterRegex = \"isAwesomeFeatureEnabled\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"settingId\"] = settings.Apply(getSettingsResult =\u003e getSettingsResult.Settings[0]?.SettingId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyConfigs, err := configcat.GetConfigurations(ctx, \u0026configcat.GetConfigurationsArgs{\n\t\t\tProductId:       myProducts.Products[0].ProductId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Main Config\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tsettings, err := configcat.GetSettings(ctx, \u0026configcat.GetSettingsArgs{\n\t\t\tConfigId:       myConfigs.Configs[0].ConfigId,\n\t\t\tKeyFilterRegex: pulumi.StringRef(\"isAwesomeFeatureEnabled\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"settingId\", settings.Settings[0].SettingId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport com.pulumi.configcat.inputs.GetConfigurationsArgs;\nimport com.pulumi.configcat.inputs.GetSettingsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        final var myConfigs = ConfigcatFunctions.getConfigurations(GetConfigurationsArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .nameFilterRegex(\"Main Config\")\n            .build());\n\n        final var settings = ConfigcatFunctions.getSettings(GetSettingsArgs.builder()\n            .configId(myConfigs.applyValue(getConfigurationsResult -\u003e getConfigurationsResult.configs()[0].configId()))\n            .keyFilterRegex(\"isAwesomeFeatureEnabled\")\n            .build());\n\n        ctx.export(\"settingId\", settings.applyValue(getSettingsResult -\u003e getSettingsResult.settings()[0].settingId()));\n    }\n}\n```\n```yaml\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\n  myConfigs:\n    fn::invoke:\n      function: configcat:getConfigurations\n      arguments:\n        productId: ${myProducts.products[0].productId}\n        nameFilterRegex: Main Config\n  settings:\n    fn::invoke:\n      function: configcat:getSettings\n      arguments:\n        configId: ${myConfigs.configs[0].configId}\n        keyFilterRegex: isAwesomeFeatureEnabled\noutputs:\n  settingId: ${settings.settings[0].settingId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n- [List Flags](https://api.configcat.com/docs/#tag/Feature-Flags-and-Settings/operation/get-settings)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSettings.\n",
                "properties": {
                    "configId": {
                        "type": "string",
                        "description": "The ID of the Config.\n"
                    },
                    "keyFilterRegex": {
                        "type": "string",
                        "description": "Filter the Settings by key.\n"
                    }
                },
                "type": "object",
                "required": [
                    "configId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSettings.\n",
                "properties": {
                    "configId": {
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "keyFilterRegex": {
                        "type": "string"
                    },
                    "settings": {
                        "description": "A setting list block defined as below.\n",
                        "items": {
                            "$ref": "#/types/configcat:index/getSettingsSetting:getSettingsSetting"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "configId",
                    "settings",
                    "id"
                ],
                "type": "object"
            }
        },
        "configcat:index/getTags:getTags": {
            "description": "## # configcat.getTags Resource\n\nUse this data source to access information about existing **Tags**.\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as configcat from \"@pulumi/configcat\";\n\nconst myProducts = configcat.getProducts({\n    nameFilterRegex: \"ConfigCat's product\",\n});\nconst myTags = myProducts.then(myProducts =\u003e configcat.getTags({\n    productId: myProducts.products?.[0]?.productId,\n    nameFilterRegex: \"Test\",\n}));\nexport const tagId = myTags.then(myTags =\u003e myTags.tags?.[0]?.tagId);\n```\n```python\nimport pulumi\nimport pulumi_configcat as configcat\n\nmy_products = configcat.get_products(name_filter_regex=\"ConfigCat's product\")\nmy_tags = configcat.get_tags(product_id=my_products.products[0].product_id,\n    name_filter_regex=\"Test\")\npulumi.export(\"tagId\", my_tags.tags[0].tag_id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Configcat = Pulumi.Configcat;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myProducts = Configcat.GetProducts.Invoke(new()\n    {\n        NameFilterRegex = \"ConfigCat's product\",\n    });\n\n    var myTags = Configcat.GetTags.Invoke(new()\n    {\n        ProductId = myProducts.Apply(getProductsResult =\u003e getProductsResult.Products[0]?.ProductId),\n        NameFilterRegex = \"Test\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"tagId\"] = myTags.Apply(getTagsResult =\u003e getTagsResult.Tags[0]?.TagId),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-configcat/sdk/v3/go/configcat\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyProducts, err := configcat.GetProducts(ctx, \u0026configcat.GetProductsArgs{\n\t\t\tNameFilterRegex: pulumi.StringRef(\"ConfigCat's product\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyTags, err := configcat.GetTags(ctx, \u0026configcat.GetTagsArgs{\n\t\t\tProductId:       myProducts.Products[0].ProductId,\n\t\t\tNameFilterRegex: pulumi.StringRef(\"Test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"tagId\", myTags.Tags[0].TagId)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.configcat.ConfigcatFunctions;\nimport com.pulumi.configcat.inputs.GetProductsArgs;\nimport com.pulumi.configcat.inputs.GetTagsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myProducts = ConfigcatFunctions.getProducts(GetProductsArgs.builder()\n            .nameFilterRegex(\"ConfigCat's product\")\n            .build());\n\n        final var myTags = ConfigcatFunctions.getTags(GetTagsArgs.builder()\n            .productId(myProducts.applyValue(getProductsResult -\u003e getProductsResult.products()[0].productId()))\n            .nameFilterRegex(\"Test\")\n            .build());\n\n        ctx.export(\"tagId\", myTags.applyValue(getTagsResult -\u003e getTagsResult.tags()[0].tagId()));\n    }\n}\n```\n```yaml\nvariables:\n  myProducts:\n    fn::invoke:\n      function: configcat:getProducts\n      arguments:\n        nameFilterRegex: ConfigCat's product\n  myTags:\n    fn::invoke:\n      function: configcat:getTags\n      arguments:\n        productId: ${myProducts.products[0].productId}\n        nameFilterRegex: Test\noutputs:\n  tagId: ${myTags.tags[0].tagId}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Endpoints used\n\n- [List Tags](https://api.configcat.com/docs/#tag/Tags/operation/get-tags)\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTags.\n",
                "properties": {
                    "nameFilterRegex": {
                        "type": "string",
                        "description": "Filter the Tags by name.\n"
                    },
                    "productId": {
                        "type": "string",
                        "description": "The ID of the Product.\n"
                    }
                },
                "type": "object",
                "required": [
                    "productId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTags.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "nameFilterRegex": {
                        "type": "string"
                    },
                    "productId": {
                        "type": "string"
                    },
                    "tags": {
                        "description": "A tag list block defined as below.\n",
                        "items": {
                            "$ref": "#/types/configcat:index/getTagsTag:getTagsTag"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "productId",
                    "tags",
                    "id"
                ],
                "type": "object"
            }
        }
    }
}